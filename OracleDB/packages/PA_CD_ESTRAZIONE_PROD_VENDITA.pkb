CREATE OR REPLACE PACKAGE BODY VENCD.PA_CD_ESTRAZIONE_PROD_VENDITA AS
/***************************************************************************************
   NAME:      PA_CD_ESTRAZIONE_PROD_VENDITA
   AUTHOR:    Mauro Viel (Altran)
   PURPOSE:   Questo package contiene procedure/funzioni necessarie per l'estrazione
              del prodotto di vendita


   REVISIONS:
   Ver        Date        Author                Description
   ---------  ----------  ---------------       ------------------------------------
   1.0        17/06/2009  Mauro Viel (Altran) Created this package.
****************************************************************************************/

-----------------------------------------------------------------------------------------------------
-- Function ELENCO_PRODOTTI_VENDITA_TAB
--
-- DESCRIZIONE:  Elenca i prodotti di vendita di tipo tabellare
--
--
--
-- REALIZZATORE: Simone Bottani, Altran, Luglio 2009
--
--  MODIFICHE: Mauro Viel Altran 10/02/2011 inserito il FLG_SEGUI_IL_FILM
--
-------------------------------------------------------------------------------------------------

FUNCTION ELENCO_PRODOTTI_VENDITA_TAB(p_categoria_prodotto CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO%TYPE, p_id_mod_vendita CD_PRODOTTO_VENDITA.ID_MOD_VENDITA%TYPE, p_stato_vendita CD_PRODOTTO_ACQUISTATO.STATO_DI_VENDITA%TYPE, p_data_inizio CD_LISTINO.DATA_INIZIO%TYPE, p_data_fine CD_LISTINO.DATA_FINE%TYPE, p_id_formato CD_FORMATO_ACQUISTABILE.ID_FORMATO%TYPE, p_tipo_disp VARCHAR2) RETURN C_LISTA_VENDITA_TAB IS
v_lista_vendita C_LISTA_VENDITA_TAB;
v_descr_stato_vendita CD_STATO_DI_VENDITA.DESCR_BREVE%TYPE;
BEGIN
--
   IF p_stato_vendita IS NOT NULL AND p_stato_vendita <> -1 THEN
    SELECT DESCR_BREVE
    INTO v_descr_stato_vendita
    FROM CD_STATO_DI_VENDITA
    WHERE ID_STATO_VENDITA = p_stato_vendita;
   END IF;
--
OPEN v_lista_vendita FOR
SELECT ID_CIRCUITO,
       ID_PRODOTTO_VENDITA,
       CIRCUITO,
       PRODOTTO_PUBBLICITARIO,
       TIPOLOGIA_BREAK,
       DURATA_BREAK,
       ID_LISTINO,
       NUMERO_BREAK,
       NUM_SCHERMI,
       PA_CD_UTILITY.FU_CALCOLA_IMPORTO(PA_CD_TARIFFA.FU_GET_TARIFFA_RIPARAMETRATA(ID_TARIFFA, p_id_formato),SCONTO_STAGIONALE) AS TARIFFA,
       PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS IMPORTO_ORIGINALE,
       ID_TARIFFA,
       ID_TIPO_TARIFFA,
       ID_UNITA,
       DESC_UNITA,
       SCONTO_STAGIONALE,
       ID_TIPO_CINEMA,
       0 as disponibilita_minima,
       0 as disponibilita_massima,
       FLG_SEGUI_IL_FILM
       --SUBSTR(disp,1,INSTR(disp,'|',1,1) -1) as disponibilita_minima,
       --SUBSTR(disp,INSTR(disp,'|',1,1) +1,length(disp)) as disponibilita_massima
FROM(
SELECT CD_CIRCUITO.ID_CIRCUITO,
BRK.ID_PRODOTTO_VENDITA,
CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
CD_TIPO_BREAK.DESC_TIPO_BREAK AS TIPOLOGIA_BREAK,
CD_TIPO_BREAK.DURATA_SECONDI AS DURATA_BREAK,
BRK.ID_LISTINO,
BRK.IMPORTO,
--PA_CD_ESTRAZIONE_PROD_VENDITA.FU_GET_BREAK_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio,CD_PRODOTTO_VENDITA.ID_TIPO_BREAK, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_BREAK,
 0 AS NUMERO_BREAK,
 FU_GET_NUM_SCHERMI(BRK.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine) AS NUM_SCHERMI,
 BRK.ID_TARIFFA,
 BRK.ID_TIPO_TARIFFA,
 BRK.ID_TIPO_CINEMA,
 CD_UNITA_MISURA_TEMP.ID_UNITA,
 CD_UNITA_MISURA_TEMP.DESC_UNITA,
 CASE 
 WHEN FLG_STAGIONALE = 'S'
  THEN FU_GET_SCONTO_STAGIONALE(BRK.ID_LISTINO, p_data_inizio, p_data_fine)
 ELSE 0
 END AS SCONTO_STAGIONALE,
 --'0|0' as disp(SELECT fu_affollamento(p_tipo_disp,CD_TARIFFA.ID_PRODOTTO_VENDITA, v_descr_stato_vendita,p_data_inizio, p_data_fine) FROM DUAL) disp
 --fu_calcola_affollamento('BREAK_VENDITA',CD_TARIFFA.ID_PRODOTTO_VENDITA, 'TVE',p_data_inizio, p_data_fine) as disponibilita
 FLG_SEGUI_IL_FILM
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_CIRCUITO,
     --CD_FORMATO_ACQUISTABILE,
     --CD_COEFF_CINEMA,
     CD_LISTINO,
     CD_TIPO_BREAK,
     (SELECT PV.ID_PRODOTTO_VENDITA,
     PV.ID_CIRCUITO, PV.ID_TIPO_BREAK,PV.FLG_SEGUI_IL_FILM,
     PUBB.DESC_PRODOTTO,
     TAR.ID_TARIFFA,
     TAR.ID_MISURA_PRD_VE, 
     TAR.ID_FORMATO,
     TAR.ID_LISTINO,
     TAR.ID_TIPO_TARIFFA,
     TAR.ID_TIPO_CINEMA,
     TAR.IMPORTO,
     TAR.FLG_STAGIONALE
     FROM
     CD_TARIFFA TAR,
     CD_PRODOTTO_PUBB PUBB,
     CD_PRODOTTO_VENDITA PV
    WHERE PV.ID_MOD_VENDITA = p_id_mod_vendita
    AND   PV.FLG_ANNULLATO = 'N'
    AND   PUBB.ID_PRODOTTO_PUBB = PV.ID_PRODOTTO_PUBB
    AND   PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
    --AND   (p_categoria_prodotto IS NULL OR CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto)
    AND   TAR.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
    AND   (TAR.ID_TIPO_TARIFFA = 1 OR TAR.ID_FORMATO = p_id_formato)
    AND   (TAR.DATA_INIZIO <= p_data_inizio) --or TAR.DATA_INIZIO >= p_data_inizio)
    AND   TAR.DATA_FINE >= p_data_fine
    AND EXISTS(SELECT B.ID_BREAK FROM CD_BREAK B, CD_CIRCUITO_BREAK CB, CD_BREAK_VENDITA BV
               WHERE BV.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
               AND   BV.DATA_EROGAZIONE BETWEEN p_data_inizio AND p_data_fine
               AND   BV.FLG_ANNULLATO = 'N'
               AND   CB.ID_CIRCUITO_BREAK = BV.ID_CIRCUITO_BREAK
               AND   CB.FLG_ANNULLATO = 'N'
               AND   B.ID_BREAK = CB.ID_BREAK
               AND   B.FLG_ANNULLATO = 'N'
               AND ROWNUM = 1)
     ) BRK
WHERE CD_CIRCUITO.ID_CIRCUITO = BRK.ID_CIRCUITO
AND   CD_TIPO_BREAK.ID_TIPO_BREAK = BRK.ID_TIPO_BREAK
--AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = BRK.ID_FORMATO
--AND   CD_COEFF_CINEMA.ID_COEFF = CD_FORMATO_ACQUISTABILE.ID_COEFF
AND   CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE = BRK.ID_MISURA_PRD_VE
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_LISTINO.ID_LISTINO = BRK.ID_LISTINO
AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1)
ORDER BY ID_CIRCUITO, TIPOLOGIA_BREAK;
RETURN v_lista_vendita;
--  EXCEPTION
 --     WHEN NO_DATA_FOUND THEN
 --     RAISE;
 --     WHEN OTHERS THEN
 --     RAISE;
  END ELENCO_PRODOTTI_VENDITA_TAB;

-----------------------------------------------------------------------------------------------------
-- Function ELENCO_PRODOTTI_VENDITA_TAB
--
-- DESCRIZIONE:  Elenca i prodotti di vendita richiesti di tipo tabellare
--
--
--
-- REALIZZATORE: Simone Bottani, Altran, Novembre 2009
--
--  MODIFICHE:
--
-------------------------------------------------------------------------------------------------
FUNCTION ELENCO_PROD_VENDITA_TAB_RIC(p_categoria_prodotto CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO%TYPE, p_id_mod_vendita CD_PRODOTTO_VENDITA.ID_MOD_VENDITA%TYPE, p_data_inizio CD_LISTINO.DATA_INIZIO%TYPE, p_data_fine CD_LISTINO.DATA_FINE%TYPE, p_id_formato CD_FORMATO_ACQUISTABILE.ID_FORMATO%TYPE) RETURN C_LISTA_VENDITA_TAB IS
v_lista_vendita C_LISTA_VENDITA_TAB;
BEGIN
--
OPEN v_lista_vendita FOR
SELECT ID_CIRCUITO,
       ID_PRODOTTO_VENDITA,
       CIRCUITO,
       PRODOTTO_PUBBLICITARIO,
       TIPOLOGIA_BREAK,
       DURATA_BREAK,
       ID_LISTINO,
       NUMERO_BREAK,
       NUM_SCHERMI,
       PA_CD_UTILITY.FU_CALCOLA_IMPORTO(PA_CD_TARIFFA.FU_GET_TARIFFA_RIPARAMETRATA(ID_TARIFFA, p_id_formato),SCONTO_STAGIONALE) AS TARIFFA,
       PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS IMPORTO_ORIGINALE,
       ID_TARIFFA,
       ID_TIPO_TARIFFA,
       ID_UNITA,
       DESC_UNITA,
       SCONTO_STAGIONALE,
       ID_TIPO_CINEMA,
       0 as disponibilita_minima,
       0 as disponibilita_massima,
       FLG_SEGUI_IL_FILM
FROM(
SELECT CD_CIRCUITO.ID_CIRCUITO,
BRK.ID_PRODOTTO_VENDITA,
CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
BRK.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
CD_TIPO_BREAK.DESC_TIPO_BREAK AS TIPOLOGIA_BREAK,
CD_TIPO_BREAK.DURATA_SECONDI AS DURATA_BREAK,
BRK.ID_LISTINO,
BRK.IMPORTO,
--PA_CD_ESTRAZIONE_PROD_VENDITA.FU_GET_BREAK_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio,CD_PRODOTTO_VENDITA.ID_TIPO_BREAK, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_BREAK,
0 as NUMERO_BREAK,
FU_GET_NUM_SCHERMI(BRK.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine) AS NUM_SCHERMI,
 PA_CD_TARIFFA.FU_GET_TARIFFA_RIPARAMETRATA(BRK.ID_TARIFFA, p_id_formato) AS TARIFFA,
 BRK.IMPORTO AS IMPORTO_ORIGINALE,
 BRK.ID_TARIFFA,
 BRK.ID_TIPO_TARIFFA,
 BRK.ID_TIPO_CINEMA,
 CD_UNITA_MISURA_TEMP.ID_UNITA,
 CD_UNITA_MISURA_TEMP.DESC_UNITA,
  CASE 
 WHEN FLG_STAGIONALE = 'S'
  THEN FU_GET_SCONTO_STAGIONALE(BRK.ID_LISTINO, p_data_inizio, p_data_fine)
 ELSE 0
 END AS SCONTO_STAGIONALE,
 FLG_SEGUI_IL_FILM
  --(SELECT fu_affollamento(p_tipo_disp,CD_TARIFFA.ID_PRODOTTO_VENDITA, v_descr_stato_vendita,p_data_inizio, p_data_fine) FROM DUAL) disp
 --null as disponibilita
 --fu_calcola_affollamento('BREAK_VENDITA',CD_TARIFFA.ID_PRODOTTO_VENDITA, 'TVE',p_data_inizio, p_data_fine) as disponibilita
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_CIRCUITO,
     --CD_FORMATO_ACQUISTABILE,
     --CD_COEFF_CINEMA,
     CD_LISTINO,
     CD_TIPO_BREAK,
     (SELECT PV.ID_PRODOTTO_VENDITA,
     PV.ID_CIRCUITO, PV.ID_TIPO_BREAK,PV.FLG_SEGUI_IL_FILM,
     CD_PRODOTTO_PUBB.DESC_PRODOTTO,
     CD_TARIFFA.ID_TARIFFA,
     CD_TARIFFA.ID_MISURA_PRD_VE, 
     CD_TARIFFA.ID_FORMATO,
     CD_TARIFFA.ID_LISTINO,
     CD_TARIFFA.ID_TIPO_TARIFFA,
     CD_TARIFFA.ID_TIPO_CINEMA,
     CD_TARIFFA.IMPORTO,
     CD_TARIFFA.FLG_STAGIONALE
     FROM
     CD_TARIFFA,
     CD_PRODOTTO_PUBB,
     CD_PRODOTTO_VENDITA PV
    WHERE   (p_id_mod_vendita is null or PV.ID_MOD_VENDITA = p_id_mod_vendita)
    AND   PV.FLG_ANNULLATO = 'N'
    AND   CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB = PV.ID_PRODOTTO_PUBB
    AND   (p_categoria_prodotto IS NULL OR CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto)
    AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
    AND   (CD_TARIFFA.ID_TIPO_TARIFFA = 1 OR CD_TARIFFA.ID_FORMATO = p_id_formato)
    AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
    AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE >= p_data_fine)
    AND   PV.FLG_DEFINITO_A_LISTINO = 'S'
    AND EXISTS(SELECT CD_BREAK.ID_BREAK FROM CD_BREAK, Cd_CIRCUITO_BREAK, CD_BREAK_VENDITA
               WHERE CD_BREAK_VENDITA.DATA_EROGAZIONE BETWEEN p_data_inizio AND p_data_fine
               AND   CD_BREAK_VENDITA.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
               AND   CD_BREAK_VENDITA.FLG_ANNULLATO = 'N'
               AND   CD_CIRCUITO_BREAK.ID_CIRCUITO_BREAK = CD_BREAK_VENDITA.ID_CIRCUITO_BREAK
               AND   CD_CIRCUITO_BREAK.FLG_ANNULLATO = 'N'
               AND   CD_BREAK.ID_BREAK = CD_CIRCUITO_BREAK.ID_BREAK
               AND   CD_BREAK.FLG_ANNULLATO = 'N'
               AND ROWNUM = 1)
     ) BRK
WHERE BRK.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   BRK.ID_TIPO_BREAK = CD_TIPO_BREAK.ID_TIPO_BREAK
--AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = BRK.ID_FORMATO
--AND   CD_COEFF_CINEMA.ID_COEFF = CD_FORMATO_ACQUISTABILE.ID_COEFF
AND   CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE = BRK.ID_MISURA_PRD_VE
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_LISTINO.ID_LISTINO = BRK.ID_LISTINO
AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1
ORDER BY ID_CIRCUITO, TIPOLOGIA_BREAK
/*GROUP BY CD_CIRCUITO.ID_CIRCUITO,
         CD_TARIFFA.ID_PRODOTTO_VENDITA,
         CD_CIRCUITO.NOME_CIRCUITO,
         CD_PRODOTTO_PUBB.DESC_PRODOTTO,
         CD_TIPO_BREAK.DESC_TIPO_BREAK,
         CD_TIPO_BREAK.DURATA_SECONDI,
         CD_TARIFFA.ID_LISTINO,
         CD_TARIFFA.IMPORTO,
         CD_TARIFFA.ID_TARIFFA,
         CD_TARIFFA.ID_TIPO_TARIFFA,
         CD_TARIFFA.ID_TIPO_CINEMA,
         CD_TARIFFA.ID_MISURA_PRD_VE,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CD_PRODOTTO_VENDITA.ID_TIPO_BREAK*/)
          p_ven;
RETURN v_lista_vendita;
--  EXCEPTION
 --     WHEN NO_DATA_FOUND THEN
 --     RAISE;
 --     WHEN OTHERS THEN
 --     RAISE;
  END ELENCO_PROD_VENDITA_TAB_RIC;

-----------------------------------------------------------------------------------------------------
-- Function ELENCO_PRODOTTI_VENDITA_IS
--
-- DESCRIZIONE:  Elenca i prodotti di vendita di tipo iniziativa speciale
--
--
--
-- REALIZZATORE: Simone Bottani, Altran, Novembre 2009
--
--  MODIFICHE: Mauro Viel Altran, Settebre 2011 inserite condixioni di validita sugli ambienti di vendita --#MV01
--
-------------------------------------------------------------------------------------------------

FUNCTION ELENCO_PRODOTTI_VENDITA_IS(p_categoria_prodotto CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO%TYPE,p_id_mod_vendita CD_PRODOTTO_VENDITA.ID_MOD_VENDITA%TYPE, p_stato_vendita CD_PRODOTTO_ACQUISTATO.STATO_DI_VENDITA%TYPE, p_data_inizio CD_LISTINO.DATA_INIZIO%TYPE, p_data_fine CD_LISTINO.DATA_FINE%TYPE ) RETURN C_LISTA_VENDITA_IS IS
v_lista_vendita C_LISTA_VENDITA_IS;
v_sconto_stagionale CD_SCONTO_STAGIONALE.PERC_SCONTO%TYPE;
p_id_formato CD_TARIFFA.ID_FORMATO%TYPE;
BEGIN
--
   /* BEGIN
    v_sconto_stagionale := 0;
--
    SELECT CD_SCONTO_STAGIONALE.PERC_SCONTO AS SCONTO_STAGIONALE into v_sconto_stagionale
        FROM CD_SCONTO_STAGIONALE,CD_TARIFFA
        WHERE   CD_TARIFFA.ID_LISTINO  = CD_SCONTO_STAGIONALE.ID_LISTINO (+)
        AND   CD_TARIFFA.FLG_STAGIONALE = 'S'
        AND   (p_data_inizio IS NULL OR cd_sconto_stagionale.DATA_INIZIO <= p_data_inizio)
        AND   (p_data_fine IS NULL OR cd_sconto_stagionale.DATA_FINE >= p_data_fine);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      v_sconto_stagionale := 0;
    END;*/
--
OPEN v_lista_vendita FOR
       SELECT
         ID_CIRCUITO,
         ID_PRODOTTO_VENDITA,
          CIRCUITO,
          PRODOTTO_PUBBLICITARIO,
          ID_LISTINO,
          NUMERO_COMUNICATI,
          NUMERO_AMBIENTI,
          DISPONIBILITA,
          PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS TARIFFA,
          ID_TARIFFA,
          SCONTO_STAGIONALE,
          AMBITO,
          ID_UNITA,
          DESC_UNITA,
          ID_FORMATO,
          DESC_FORMATO,
          ID_TIPO_CINEMA,
          DESC_TIPO_CINEMA
         FROM
         (SELECT CD_CIRCUITO.ID_CIRCUITO,
          CD_TARIFFA.ID_PRODOTTO_VENDITA,
          CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
          CD_PRODOTTO_PUBB.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
          CD_TARIFFA.ID_LISTINO,
          0 AS NUMERO_COMUNICATI,--FU_GET_SALE_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio, CD_TARIFFA.ID_LISTINO, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_COMUNICATI,
          COUNT(DISTINCT CD_CIRCUITO_SALA.ID_SALA) AS NUMERO_AMBIENTI,
          FU_GET_DISPONIBILITA_IS(CD_CIRCUITO_SALA.ID_CIRCUITO,
          CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,p_data_inizio,p_data_fine) AS DISPONIBILITA,
          CD_TARIFFA.IMPORTO,
          CD_TARIFFA.ID_TARIFFA,
          CD_TARIFFA.ID_TIPO_CINEMA,
          CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
          FU_GET_SCONTO_STAGIONALE(CD_TARIFFA.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine, p_id_formato,CD_TARIFFA.ID_MISURA_PRD_VE) AS SCONTO_STAGIONALE,
          2 AS AMBITO,
          CD_UNITA_MISURA_TEMP.ID_UNITA,
          CD_UNITA_MISURA_TEMP.DESC_UNITA,
          CD_FORMATO_ACQUISTABILE.ID_FORMATO,
          CD_FORMATO_ACQUISTABILE.DESCRIZIONE AS DESC_FORMATO
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_PRODOTTO_VENDITA,
     CD_CIRCUITO ,
     CD_TARIFFA ,
     CD_PRODOTTO_PUBB,
     CD_CIRCUITO_SALA,
     CD_SALA_VENDITA,
     CD_FORMATO_ACQUISTABILE,
     CD_LISTINO,
     CD_LUOGO_TIPO_PUBB,
     CD_LUOGO,
     CD_TIPO_CINEMA, 
     CD_SALA  --MV01
WHERE   (p_id_mod_vendita IS NULL OR CD_PRODOTTO_VENDITA.ID_MOD_VENDITA = p_id_mod_vendita)
AND   CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB IS NOT NULL
AND   CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB =CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
AND   CD_PRODOTTO_VENDITA.FLG_ANNULLATO = 'N'
AND   CD_CIRCUITO_SALA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_CIRCUITO.FLG_ANNULLATO = 'N'
AND   CD_CIRCUITO_SALA.ID_CIRCUITO_SALA = CD_SALA_VENDITA.ID_CIRCUITO_SALA
AND   CD_CIRCUITO_SALA.FLG_ANNULLATO = 'N'
AND   CD_SALA_VENDITA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_CIRCUITO_SALA.ID_LISTINO = CD_LISTINO.ID_LISTINO
AND   CD_SALA.ID_SALA = CD_CIRCUITO_SALA.ID_SALA --#MV01
AND   CD_SALA.DATA_FINE_VALIDITA IS NULL --#MV01
AND   CD_LISTINO.ID_LISTINO = CD_TARIFFA.ID_LISTINO
AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE   >=p_data_fine)
AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_PRODOTTO_VENDITA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_TARIFFA.ID_MISURA_PRD_VE = CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE
AND   CD_TARIFFA.ID_TIPO_CINEMA = CD_TIPO_CINEMA.ID_TIPO_CINEMA
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = CD_TARIFFA.ID_FORMATO
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
AND   CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO
AND   CD_LUOGO.DESC_LUOGO = 'Sala'
AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1
GROUP BY CD_CIRCUITO.ID_CIRCUITO,
         CD_TARIFFA.ID_PRODOTTO_VENDITA,
         CD_CIRCUITO.NOME_CIRCUITO,
         CD_TARIFFA.ID_LISTINO,
         CD_TARIFFA.IMPORTO,
         CD_TARIFFA.ID_TARIFFA,
         CD_TARIFFA.ID_TIPO_CINEMA,
         CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
         CD_PRODOTTO_PUBB.DESC_PRODOTTO,
         CD_CIRCUITO_SALA.ID_CIRCUITO,
         CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,
         CD_LUOGO.ID_LUOGO,
         CD_TARIFFA.ID_MISURA_PRD_VE,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CD_FORMATO_ACQUISTABILE.ID_FORMATO,
         CD_FORMATO_ACQUISTABILE.DESCRIZIONE)
UNION
       SELECT
         ID_CIRCUITO,
         ID_PRODOTTO_VENDITA,
          CIRCUITO,
          PRODOTTO_PUBBLICITARIO,
          ID_LISTINO,
          NUMERO_COMUNICATI,
          NUMERO_AMBIENTI,
          DISPONIBILITA,
          PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS TARIFFA,
          ID_TARIFFA,
          SCONTO_STAGIONALE,
          AMBITO,
          ID_UNITA,
          DESC_UNITA,
          ID_FORMATO,
          DESC_FORMATO,
          ID_TIPO_CINEMA,
          DESC_TIPO_CINEMA
         FROM(
SELECT CD_CIRCUITO.ID_CIRCUITO,CD_TARIFFA.ID_PRODOTTO_VENDITA,
CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
CD_PRODOTTO_PUBB.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
CD_TARIFFA.ID_LISTINO,
0 AS NUMERO_COMUNICATI,-- FU_GET_ATRII_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio, CD_TARIFFA.ID_LISTINO, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_COMUNICATI,
 COUNT(DISTINCT CD_CIRCUITO_ATRIO.ID_ATRIO) AS NUMERO_AMBIENTI,--#MV01
 FU_GET_DISPONIBILITA_IS(CD_CIRCUITO_ATRIO.ID_CIRCUITO,CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,p_data_inizio,p_data_fine) AS DISPONIBILITA,
 CD_TARIFFA.IMPORTO,CD_TARIFFA.ID_TARIFFA,CD_TARIFFA.ID_TIPO_CINEMA,CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
 FU_GET_SCONTO_STAGIONALE(CD_TARIFFA.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine, p_id_formato,CD_TARIFFA.ID_MISURA_PRD_VE) AS SCONTO_STAGIONALE,
  3 AS AMBITO,
  CD_UNITA_MISURA_TEMP.ID_UNITA,
  CD_UNITA_MISURA_TEMP.DESC_UNITA,
  CD_FORMATO_ACQUISTABILE.ID_FORMATO,
  CD_FORMATO_ACQUISTABILE.DESCRIZIONE AS DESC_FORMATO
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_PRODOTTO_VENDITA,
     CD_CIRCUITO,
     CD_TARIFFA,
     CD_PRODOTTO_PUBB,
     CD_CIRCUITO_ATRIO,
     CD_ATRIO_VENDITA,
     CD_FORMATO_ACQUISTABILE,
     CD_LISTINO,
     CD_LUOGO_TIPO_PUBB,
     CD_LUOGO,
     CD_TIPO_CINEMA,
     CD_ATRIO 
WHERE   (p_id_mod_vendita IS NULL OR CD_PRODOTTO_VENDITA.ID_MOD_VENDITA = p_id_mod_vendita)
AND   CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB IS NOT NULL
AND   CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB =CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
AND   CD_PRODOTTO_VENDITA.FLG_ANNULLATO = 'N'
AND   CD_CIRCUITO_ATRIO.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_CIRCUITO_ATRIO.ID_CIRCUITO_ATRIO = CD_ATRIO_VENDITA.ID_CIRCUITO_ATRIO
AND   CD_ATRIO_VENDITA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_CIRCUITO_ATRIO.ID_LISTINO = CD_LISTINO.ID_LISTINO
AND   CD_CIRCUITO_ATRIO.FLG_ANNULLATO ='N' --#MV01
AND   CD_ATRIO.ID_ATRIO = CD_CIRCUITO_ATRIO.ID_ATRIO
AND   CD_ATRIO.FLG_ANNULLATO ='N'
AND   CD_LISTINO.ID_LISTINO = CD_TARIFFA.ID_LISTINO
AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE   >=p_data_fine)
AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_PRODOTTO_VENDITA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_TARIFFA.ID_MISURA_PRD_VE = CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE
AND   CD_TARIFFA.ID_TIPO_CINEMA = CD_TIPO_CINEMA.ID_TIPO_CINEMA
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = CD_TARIFFA.ID_FORMATO
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
AND   CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO
AND   CD_LUOGO.DESC_LUOGO = 'Atrio'
AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1
GROUP BY CD_CIRCUITO.ID_CIRCUITO,
         CD_TARIFFA.ID_PRODOTTO_VENDITA,
         CD_CIRCUITO.NOME_CIRCUITO,
         CD_TARIFFA.ID_LISTINO,
         CD_TARIFFA.IMPORTO,
         CD_TARIFFA.ID_TARIFFA,
         CD_TARIFFA.ID_TIPO_CINEMA,
         CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
         CD_PRODOTTO_PUBB.DESC_PRODOTTO,
         CD_CIRCUITO.ID_CIRCUITO,
         CD_CIRCUITO_ATRIO.ID_CIRCUITO,
         CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,
         CD_LUOGO.ID_LUOGO,
         CD_TARIFFA.ID_MISURA_PRD_VE,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CD_FORMATO_ACQUISTABILE.ID_FORMATO,
         CD_FORMATO_ACQUISTABILE.DESCRIZIONE)
UNION
       SELECT
         ID_CIRCUITO,
         ID_PRODOTTO_VENDITA,
          CIRCUITO,
          PRODOTTO_PUBBLICITARIO,
          ID_LISTINO,
          NUMERO_COMUNICATI,
          NUMERO_AMBIENTI,
          DISPONIBILITA,
          PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS TARIFFA,
          ID_TARIFFA,
          SCONTO_STAGIONALE,
          AMBITO,
          ID_UNITA,
          DESC_UNITA,
          ID_FORMATO,
          DESC_FORMATO,
          ID_TIPO_CINEMA,
          DESC_TIPO_CINEMA
         FROM(
SELECT CD_CIRCUITO.ID_CIRCUITO,
    CD_TARIFFA.ID_PRODOTTO_VENDITA,
    CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
    CD_PRODOTTO_PUBB.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
    CD_TARIFFA.ID_LISTINO,
    --FU_GET_CINEMA_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio, CD_TARIFFA.ID_LISTINO, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_COMUNICATI,
    0 AS NUMERO_COMUNICATI,
    COUNT(DISTINCT ID_CINEMA) AS NUMERO_AMBIENTI,
    FU_GET_DISPONIBILITA_IS(CD_CIRCUITO_CINEMA.ID_CIRCUITO,
    CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,p_data_inizio,p_data_fine) AS DISPONIBILITA,
    CD_TARIFFA.IMPORTO,
    CD_TARIFFA.ID_TARIFFA,
    CD_TARIFFA.ID_TIPO_CINEMA,
    CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
    FU_GET_SCONTO_STAGIONALE(CD_TARIFFA.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine, p_id_formato,CD_TARIFFA.ID_MISURA_PRD_VE) AS SCONTO_STAGIONALE,
    4 AS AMBITO,
    CD_UNITA_MISURA_TEMP.ID_UNITA,
    CD_UNITA_MISURA_TEMP.DESC_UNITA,
    CD_FORMATO_ACQUISTABILE.ID_FORMATO,
    CD_FORMATO_ACQUISTABILE.DESCRIZIONE AS DESC_FORMATO
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_PRODOTTO_VENDITA,
     CD_CIRCUITO ,
     CD_TARIFFA ,
     CD_PRODOTTO_PUBB,
     CD_CIRCUITO_CINEMA,
     CD_CINEMA_VENDITA,
     CD_FORMATO_ACQUISTABILE,
     CD_LISTINO,
     CD_LUOGO_TIPO_PUBB,
     CD_LUOGO,
     CD_TIPO_CINEMA
WHERE   (p_id_mod_vendita IS NULL OR CD_PRODOTTO_VENDITA.ID_MOD_VENDITA = p_id_mod_vendita)
AND   CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB IS NOT NULL
AND   CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB =CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
AND   CD_PRODOTTO_VENDITA.FLG_ANNULLATO = 'N'
AND   CD_CIRCUITO_CINEMA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_CIRCUITO_CINEMA.ID_CIRCUITO_CINEMA = CD_CINEMA_VENDITA.ID_CIRCUITO_CINEMA
AND   CD_CINEMA_VENDITA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_CINEMA_VENDITA.FLG_ANNULLATO ='N' --#MV01
AND   CD_CIRCUITO_CINEMA.ID_LISTINO = CD_LISTINO.ID_LISTINO
AND   CD_LISTINO.ID_LISTINO = CD_TARIFFA.ID_LISTINO
AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE   >=p_data_fine)
AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_TARIFFA.ID_TIPO_CINEMA = CD_TIPO_CINEMA.ID_TIPO_CINEMA
AND   CD_PRODOTTO_VENDITA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_TARIFFA.ID_MISURA_PRD_VE = CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = CD_TARIFFA.ID_FORMATO
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
AND   CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO
AND   CD_LUOGO.DESC_LUOGO = 'Cinema'
AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1
GROUP BY CD_CIRCUITO.ID_CIRCUITO,
         CD_TARIFFA.ID_PRODOTTO_VENDITA,
         CD_CIRCUITO.NOME_CIRCUITO,
         CD_PRODOTTO_PUBB.DESC_PRODOTTO,
         CD_TARIFFA.ID_LISTINO,
         CD_TARIFFA.IMPORTO,
         CD_TARIFFA.ID_TARIFFA,
         CD_TARIFFA.ID_TIPO_CINEMA,
         CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
         CD_CIRCUITO.ID_CIRCUITO,
         CD_CIRCUITO_CINEMA.ID_CIRCUITO,
         CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,
         CD_LUOGO.ID_LUOGO,
         CD_TARIFFA.ID_MISURA_PRD_VE,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CD_FORMATO_ACQUISTABILE.ID_FORMATO,
         CD_FORMATO_ACQUISTABILE.DESCRIZIONE)
UNION
--Sponsorizzazioni
       SELECT
         ID_CIRCUITO,
         ID_PRODOTTO_VENDITA,
          CIRCUITO,
          PRODOTTO_PUBBLICITARIO,
          ID_LISTINO,
          0 AS NUMERO_COMUNICATI,
          1 AS NUMERO_AMBIENTI,
          'S' AS DISPONIBILITA,
          PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS TARIFFA,
          ID_TARIFFA,
          SCONTO_STAGIONALE,
          AMBITO,
          ID_UNITA,
          DESC_UNITA,
          ID_FORMATO,
          DESC_FORMATO,
          NULL AS ID_TIPO_CINEMA,
          NULL As DESC_TIPO_CINEMA
         FROM(
SELECT CD_CIRCUITO.ID_CIRCUITO,
  CD_TARIFFA.ID_PRODOTTO_VENDITA,
  CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
  CD_PRODOTTO_PUBB.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
  CD_TARIFFA.ID_LISTINO,
 -- FU_GET_ATRII_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio, CD_TARIFFA.ID_LISTINO, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_COMUNICATI,
 -- FU_GET_DISPONIBILITA_IS(CD_CIRCUITO_ATRIO.ID_CIRCUITO,CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,p_data_inizio,p_data_fine) AS DISPONIBILITA,
  0,0,'S',
  CD_TARIFFA.IMPORTO, CD_TARIFFA.ID_TARIFFA,CD_TARIFFA.ID_TIPO_CINEMA,
  FU_GET_SCONTO_STAGIONALE(CD_TARIFFA.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine, p_id_formato,CD_TARIFFA.ID_MISURA_PRD_VE) AS SCONTO_STAGIONALE,
  NULL AS AMBITO,
  CD_UNITA_MISURA_TEMP.ID_UNITA,
  CD_UNITA_MISURA_TEMP.DESC_UNITA,
  CD_FORMATO_ACQUISTABILE.ID_FORMATO,
   CD_FORMATO_ACQUISTABILE.DESCRIZIONE AS DESC_FORMATO
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_PRODOTTO_VENDITA,
     CD_CIRCUITO ,
     CD_TARIFFA ,
     CD_PRODOTTO_PUBB,
     CD_LISTINO,
     CD_FORMATO_ACQUISTABILE
WHERE   (p_id_mod_vendita IS NULL OR CD_PRODOTTO_VENDITA.ID_MOD_VENDITA = p_id_mod_vendita)
AND   CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB IS NULL
AND   CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB = CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
AND   CD_PRODOTTO_VENDITA.FLG_ANNULLATO = 'N'
AND   CD_LISTINO.ID_LISTINO = CD_TARIFFA.ID_LISTINO
AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE   >=p_data_fine)
AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_PRODOTTO_VENDITA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_TARIFFA.ID_MISURA_PRD_VE = CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_TARIFFA.ID_FORMATO = CD_FORMATO_ACQUISTABILE.ID_FORMATO
AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1
--AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
--AND   CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO
--AND   CD_LUOGO.DESC_LUOGO = 'Cinema'
GROUP BY CD_CIRCUITO.ID_CIRCUITO,
         CD_TARIFFA.ID_PRODOTTO_VENDITA,
         CD_CIRCUITO.NOME_CIRCUITO,
         CD_PRODOTTO_PUBB.DESC_PRODOTTO,
         CD_TARIFFA.ID_LISTINO,
         CD_TARIFFA.IMPORTO,
         CD_TARIFFA.ID_TARIFFA,
         CD_TARIFFA.ID_TIPO_CINEMA,
         CD_CIRCUITO.ID_CIRCUITO,
         CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,
       --  CD_LUOGO.ID_LUOGO,
         CD_TARIFFA.ID_MISURA_PRD_VE,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CD_FORMATO_ACQUISTABILE.ID_FORMATO,
         CD_FORMATO_ACQUISTABILE.DESCRIZIONE);
RETURN v_lista_vendita;
  EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
  END ELENCO_PRODOTTI_VENDITA_IS;
--
-----------------------------------------------------------------------------------------------------
-- Function ELENCO_PRODOTTI_VENDITA_IS
--
-- DESCRIZIONE:  Elenca i prodotti di vendita richiesti
--               di tipo iniziativa speciale

--
--
--
-- REALIZZATORE: Simone Bottani, Altran, Novembre 2009
--
--  MODIFICHE: Mauro Viel Altran, Settebre 2011 inserite condixioni di validita sugli ambienti di vendita --#MV01
--
-------------------------------------------------------------------------------------------------

FUNCTION ELENCO_PROD_VENDITA_IS_RIC(p_categoria_prodotto CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO%TYPE,p_id_mod_vendita CD_PRODOTTO_VENDITA.ID_MOD_VENDITA%TYPE, p_stato_vendita CD_PRODOTTO_ACQUISTATO.STATO_DI_VENDITA%TYPE, p_data_inizio CD_LISTINO.DATA_INIZIO%TYPE, p_data_fine CD_LISTINO.DATA_FINE%TYPE ) RETURN C_LISTA_VENDITA_IS IS
v_lista_vendita C_LISTA_VENDITA_IS;
v_sconto_stagionale CD_SCONTO_STAGIONALE.PERC_SCONTO%TYPE;
p_id_formato CD_TARIFFA.ID_FORMATO%TYPE;
BEGIN
--
OPEN v_lista_vendita FOR
       SELECT
         ID_CIRCUITO,
         ID_PRODOTTO_VENDITA,
          CIRCUITO,
          PRODOTTO_PUBBLICITARIO,
          ID_LISTINO,
          NUMERO_COMUNICATI,
          NUMERO_AMBIENTI,
          DISPONIBILITA,
          PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS TARIFFA,
          ID_TARIFFA,
          SCONTO_STAGIONALE,
          AMBITO,
          ID_UNITA,
          DESC_UNITA,
          ID_FORMATO,
          DESC_FORMATO,
          ID_TIPO_CINEMA,
          DESC_TIPO_CINEMA
         FROM
         (SELECT CD_CIRCUITO.ID_CIRCUITO,
          CD_TARIFFA.ID_PRODOTTO_VENDITA,
          CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
          CD_PRODOTTO_PUBB.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
          CD_TARIFFA.ID_LISTINO,
          FU_GET_SALE_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio, CD_TARIFFA.ID_LISTINO, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_COMUNICATI,
          COUNT(DISTINCT CD_CIRCUITO_SALA.ID_SALA) AS NUMERO_AMBIENTI,
          FU_GET_DISPONIBILITA_IS(CD_CIRCUITO_SALA.ID_CIRCUITO,
          CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,p_data_inizio,p_data_fine) AS DISPONIBILITA,
          CD_TARIFFA.IMPORTO,
          CD_TARIFFA.ID_TARIFFA,
          CD_TARIFFA.ID_TIPO_CINEMA,
          CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
          FU_GET_SCONTO_STAGIONALE(CD_TARIFFA.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine, p_id_formato,CD_TARIFFA.ID_MISURA_PRD_VE) AS SCONTO_STAGIONALE,
          2 AS AMBITO,
          CD_UNITA_MISURA_TEMP.ID_UNITA,
          CD_UNITA_MISURA_TEMP.DESC_UNITA,
          CD_FORMATO_ACQUISTABILE.ID_FORMATO,
          CD_FORMATO_ACQUISTABILE.DESCRIZIONE AS DESC_FORMATO
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_PRODOTTO_VENDITA,
     CD_CIRCUITO ,
     CD_TARIFFA ,
     CD_PRODOTTO_PUBB,
     CD_CIRCUITO_SALA,
     CD_SALA_VENDITA,
     CD_FORMATO_ACQUISTABILE,
     CD_LISTINO,
     CD_LUOGO_TIPO_PUBB,
     CD_LUOGO,
     CD_TIPO_CINEMA,
     CD_SALA --#MV01
WHERE   (p_id_mod_vendita IS NULL OR CD_PRODOTTO_VENDITA.ID_MOD_VENDITA = p_id_mod_vendita)
AND   CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB IS NOT NULL
AND   CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB =CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
AND   CD_PRODOTTO_VENDITA.FLG_ANNULLATO = 'N'
AND   CD_CIRCUITO_SALA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_CIRCUITO.FLG_ANNULLATO = 'N'
AND   CD_CIRCUITO_SALA.ID_CIRCUITO_SALA = CD_SALA_VENDITA.ID_CIRCUITO_SALA
AND   CD_CIRCUITO_SALA.FLG_ANNULLATO = 'N'
AND   CD_SALA_VENDITA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_SALA.ID_SALA = CD_CIRCUITO_SALA.ID_SALA --#MV01
AND   CD_SALA.DATA_FINE_VALIDITA IS NULL--#MV01
AND   CD_CIRCUITO_SALA.ID_LISTINO = CD_LISTINO.ID_LISTINO
AND   CD_LISTINO.ID_LISTINO = CD_TARIFFA.ID_LISTINO
AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE   >=p_data_fine)
AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_PRODOTTO_VENDITA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_TARIFFA.ID_MISURA_PRD_VE = CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE
AND   CD_TARIFFA.ID_TIPO_CINEMA = CD_TIPO_CINEMA.ID_TIPO_CINEMA
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = CD_TARIFFA.ID_FORMATO
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
AND   CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO
AND   CD_LUOGO.DESC_LUOGO = 'Sala'
AND   CD_PRODOTTO_VENDITA.FLG_DEFINITO_A_LISTINO = 'S'
AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1
GROUP BY CD_CIRCUITO.ID_CIRCUITO,
         CD_TARIFFA.ID_PRODOTTO_VENDITA,
         CD_CIRCUITO.NOME_CIRCUITO,
         CD_TARIFFA.ID_LISTINO,
         CD_TARIFFA.IMPORTO,
         CD_TARIFFA.ID_TARIFFA,
         CD_TARIFFA.ID_TIPO_CINEMA,
         CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
         CD_PRODOTTO_PUBB.DESC_PRODOTTO,
         CD_CIRCUITO_SALA.ID_CIRCUITO,
         CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,
         CD_LUOGO.ID_LUOGO,
         CD_TARIFFA.ID_MISURA_PRD_VE,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CD_FORMATO_ACQUISTABILE.ID_FORMATO,
         CD_FORMATO_ACQUISTABILE.DESCRIZIONE)
UNION
       SELECT
         ID_CIRCUITO,
         ID_PRODOTTO_VENDITA,
          CIRCUITO,
          PRODOTTO_PUBBLICITARIO,
          ID_LISTINO,
          NUMERO_COMUNICATI,
          NUMERO_AMBIENTI,
          DISPONIBILITA,
          PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS TARIFFA,
          ID_TARIFFA,
          SCONTO_STAGIONALE,
          AMBITO,
          ID_UNITA,
          DESC_UNITA,
          ID_FORMATO,
          DESC_FORMATO,
          ID_TIPO_CINEMA,
          DESC_TIPO_CINEMA
         FROM(
SELECT CD_CIRCUITO.ID_CIRCUITO,CD_TARIFFA.ID_PRODOTTO_VENDITA,
CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
CD_PRODOTTO_PUBB.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
CD_TARIFFA.ID_LISTINO,
FU_GET_ATRII_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio, CD_TARIFFA.ID_LISTINO, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_COMUNICATI,
 COUNT(DISTINCT ID_ATRIO) AS NUMERO_AMBIENTI,
 FU_GET_DISPONIBILITA_IS(CD_CIRCUITO_ATRIO.ID_CIRCUITO,CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,p_data_inizio,p_data_fine) AS DISPONIBILITA,
 CD_TARIFFA.IMPORTO,CD_TARIFFA.ID_TARIFFA,CD_TARIFFA.ID_TIPO_CINEMA,CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
 FU_GET_SCONTO_STAGIONALE(CD_TARIFFA.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine, p_id_formato,CD_TARIFFA.ID_MISURA_PRD_VE) AS SCONTO_STAGIONALE,
  3 AS AMBITO,
  CD_UNITA_MISURA_TEMP.ID_UNITA,
  CD_UNITA_MISURA_TEMP.DESC_UNITA,
  CD_FORMATO_ACQUISTABILE.ID_FORMATO,
  CD_FORMATO_ACQUISTABILE.DESCRIZIONE AS DESC_FORMATO
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_PRODOTTO_VENDITA,
     CD_CIRCUITO,
     CD_TARIFFA,
     CD_PRODOTTO_PUBB,
     CD_CIRCUITO_ATRIO,
     CD_ATRIO_VENDITA,
     CD_FORMATO_ACQUISTABILE,
     CD_LISTINO,
     CD_LUOGO_TIPO_PUBB,
     CD_LUOGO,
     CD_TIPO_CINEMA
WHERE   (p_id_mod_vendita IS NULL OR CD_PRODOTTO_VENDITA.ID_MOD_VENDITA = p_id_mod_vendita)
AND   CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB IS NOT NULL
AND   CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB =CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
AND   CD_PRODOTTO_VENDITA.FLG_ANNULLATO = 'N'
AND   CD_CIRCUITO_ATRIO.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_CIRCUITO_ATRIO.ID_CIRCUITO_ATRIO = CD_ATRIO_VENDITA.ID_CIRCUITO_ATRIO
AND   CD_CIRCUITO_ATRIO.FLG_ANNULLATO ='N' --#MV01
AND   CD_ATRIO_VENDITA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_CIRCUITO_ATRIO.ID_LISTINO = CD_LISTINO.ID_LISTINO
AND   CD_LISTINO.ID_LISTINO = CD_TARIFFA.ID_LISTINO
AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE   >=p_data_fine)
AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_TARIFFA.ID_TIPO_CINEMA = CD_TIPO_CINEMA.ID_TIPO_CINEMA
AND   CD_PRODOTTO_VENDITA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_TARIFFA.ID_MISURA_PRD_VE = CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = CD_TARIFFA.ID_FORMATO
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
AND   CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO
AND   CD_LUOGO.DESC_LUOGO = 'Atrio'
AND   CD_PRODOTTO_VENDITA.FLG_DEFINITO_A_LISTINO = 'S'
AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1
GROUP BY CD_CIRCUITO.ID_CIRCUITO,
         CD_TARIFFA.ID_PRODOTTO_VENDITA,
         CD_CIRCUITO.NOME_CIRCUITO,
         CD_TARIFFA.ID_LISTINO,
         CD_TARIFFA.IMPORTO,
         CD_TARIFFA.ID_TARIFFA,
         CD_TARIFFA.ID_TIPO_CINEMA,
         CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
         CD_PRODOTTO_PUBB.DESC_PRODOTTO,
         CD_CIRCUITO.ID_CIRCUITO,
         CD_CIRCUITO_ATRIO.ID_CIRCUITO,
         CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,
         CD_LUOGO.ID_LUOGO,
         CD_TARIFFA.ID_MISURA_PRD_VE,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CD_FORMATO_ACQUISTABILE.ID_FORMATO,
         CD_FORMATO_ACQUISTABILE.DESCRIZIONE)
UNION
       SELECT
         ID_CIRCUITO,
         ID_PRODOTTO_VENDITA,
          CIRCUITO,
          PRODOTTO_PUBBLICITARIO,
          ID_LISTINO,
          NUMERO_COMUNICATI,
          NUMERO_AMBIENTI,
          DISPONIBILITA,
          PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS TARIFFA,
          ID_TARIFFA,
          SCONTO_STAGIONALE,
          AMBITO,
          ID_UNITA,
          DESC_UNITA,
          ID_FORMATO,
          DESC_FORMATO,
          ID_TIPO_CINEMA,
          DESC_TIPO_CINEMA
         FROM(
SELECT CD_CIRCUITO.ID_CIRCUITO,
    CD_TARIFFA.ID_PRODOTTO_VENDITA,
    CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
    CD_PRODOTTO_PUBB.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
    CD_TARIFFA.ID_LISTINO,
    FU_GET_CINEMA_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio, CD_TARIFFA.ID_LISTINO, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_COMUNICATI,
    COUNT(DISTINCT ID_CINEMA) AS NUMERO_AMBIENTI,
    FU_GET_DISPONIBILITA_IS(CD_CIRCUITO_CINEMA.ID_CIRCUITO,
    CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,p_data_inizio,p_data_fine) AS DISPONIBILITA,
    CD_TARIFFA.IMPORTO,
    CD_TARIFFA.ID_TARIFFA,
    CD_TARIFFA.ID_TIPO_CINEMA,
    CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
    FU_GET_SCONTO_STAGIONALE(CD_TARIFFA.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine, p_id_formato,CD_TARIFFA.ID_MISURA_PRD_VE) AS SCONTO_STAGIONALE,
    4 AS AMBITO,
    CD_UNITA_MISURA_TEMP.ID_UNITA,
    CD_UNITA_MISURA_TEMP.DESC_UNITA,
    CD_FORMATO_ACQUISTABILE.ID_FORMATO,
    CD_FORMATO_ACQUISTABILE.DESCRIZIONE AS DESC_FORMATO
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_PRODOTTO_VENDITA,
     CD_CIRCUITO ,
     CD_TARIFFA ,
     CD_PRODOTTO_PUBB,
     CD_CIRCUITO_CINEMA,
     CD_CINEMA_VENDITA,
     CD_FORMATO_ACQUISTABILE,
     CD_LISTINO,
     CD_LUOGO_TIPO_PUBB,
     CD_LUOGO,
     CD_TIPO_CINEMA
WHERE   (p_id_mod_vendita IS NULL OR CD_PRODOTTO_VENDITA.ID_MOD_VENDITA = p_id_mod_vendita)
AND   CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB IS NOT NULL
AND   CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB =CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
AND   CD_PRODOTTO_VENDITA.FLG_ANNULLATO = 'N'
AND   CD_CIRCUITO_CINEMA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_CIRCUITO_CINEMA.ID_CIRCUITO_CINEMA = CD_CINEMA_VENDITA.ID_CIRCUITO_CINEMA
AND   CD_CINEMA_VENDITA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_CINEMA_VENDITA.FLG_ANNULLATO ='N' --#MV01
AND   CD_CIRCUITO_CINEMA.ID_LISTINO = CD_LISTINO.ID_LISTINO
AND   CD_LISTINO.ID_LISTINO = CD_TARIFFA.ID_LISTINO
AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE   >=p_data_fine)
AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_PRODOTTO_VENDITA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_TARIFFA.ID_MISURA_PRD_VE = CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE
AND   CD_TARIFFA.ID_TIPO_CINEMA = CD_TIPO_CINEMA.ID_TIPO_CINEMA
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = CD_TARIFFA.ID_FORMATO
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
AND   CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO
AND   CD_LUOGO.DESC_LUOGO = 'Cinema'
AND   CD_PRODOTTO_VENDITA.FLG_DEFINITO_A_LISTINO = 'S'
AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1
GROUP BY CD_CIRCUITO.ID_CIRCUITO,
         CD_TARIFFA.ID_PRODOTTO_VENDITA,
         CD_CIRCUITO.NOME_CIRCUITO,
         CD_PRODOTTO_PUBB.DESC_PRODOTTO,
         CD_TARIFFA.ID_LISTINO,
         CD_TARIFFA.IMPORTO,
         CD_TARIFFA.ID_TARIFFA,
         CD_TARIFFA.ID_TIPO_CINEMA,
         CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
         CD_CIRCUITO.ID_CIRCUITO,
         CD_CIRCUITO_CINEMA.ID_CIRCUITO,
         CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,
         CD_LUOGO.ID_LUOGO,
         CD_TARIFFA.ID_MISURA_PRD_VE,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CD_FORMATO_ACQUISTABILE.ID_FORMATO,
         CD_FORMATO_ACQUISTABILE.DESCRIZIONE)
UNION
--Sponsorizzazioni
       SELECT
         ID_CIRCUITO,
         ID_PRODOTTO_VENDITA,
          CIRCUITO,
          PRODOTTO_PUBBLICITARIO,
          ID_LISTINO,
          0 AS NUMERO_COMUNICATI,
          1 AS NUMERO_AMBIENTI,
          'S' AS DISPONIBILITA,
          PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS TARIFFA,
          ID_TARIFFA,
          SCONTO_STAGIONALE,
          AMBITO,
          ID_UNITA,
          DESC_UNITA,
          ID_FORMATO,
          DESC_FORMATO,
          ID_TIPO_CINEMA,
          DESC_TIPO_CINEMA
         FROM(
SELECT CD_CIRCUITO.ID_CIRCUITO,
  CD_TARIFFA.ID_PRODOTTO_VENDITA,
  CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
  CD_PRODOTTO_PUBB.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
  CD_TARIFFA.ID_LISTINO,
 -- FU_GET_ATRII_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio, CD_TARIFFA.ID_LISTINO, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_COMUNICATI,
 -- FU_GET_DISPONIBILITA_IS(CD_CIRCUITO_ATRIO.ID_CIRCUITO,CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,p_data_inizio,p_data_fine) AS DISPONIBILITA,
  0,0,'S',
  CD_TARIFFA.IMPORTO, CD_TARIFFA.ID_TARIFFA,CD_TARIFFA.ID_TIPO_CINEMA,CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
  FU_GET_SCONTO_STAGIONALE(CD_TARIFFA.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine, p_id_formato,CD_TARIFFA.ID_MISURA_PRD_VE) AS SCONTO_STAGIONALE,
  NULL AS AMBITO,
  CD_UNITA_MISURA_TEMP.ID_UNITA,
  CD_UNITA_MISURA_TEMP.DESC_UNITA,
  CD_FORMATO_ACQUISTABILE.ID_FORMATO,
  CD_FORMATO_ACQUISTABILE.DESCRIZIONE AS DESC_FORMATO
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_PRODOTTO_VENDITA,
     CD_CIRCUITO ,
     CD_TARIFFA ,
     CD_PRODOTTO_PUBB,
     CD_CIRCUITO_CINEMA,
     CD_CINEMA_VENDITA,
     CD_FORMATO_ACQUISTABILE,
     CD_LISTINO,
     CD_TIPO_CINEMA
WHERE   (p_id_mod_vendita IS NULL OR CD_PRODOTTO_VENDITA.ID_MOD_VENDITA = p_id_mod_vendita)
AND   CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB IS NULL
AND   CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB = CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
AND   CD_PRODOTTO_VENDITA.FLG_ANNULLATO = 'N'
AND   CD_CIRCUITO_CINEMA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_CIRCUITO_CINEMA.ID_CIRCUITO_CINEMA = CD_CINEMA_VENDITA.ID_CIRCUITO_CINEMA
AND   CD_CINEMA_VENDITA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_CIRCUITO_CINEMA.ID_LISTINO = CD_LISTINO.ID_LISTINO
AND   CD_LISTINO.ID_LISTINO = CD_TARIFFA.ID_LISTINO
AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE   >=p_data_fine)
AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_TARIFFA.ID_TIPO_CINEMA = CD_TIPO_CINEMA.ID_TIPO_CINEMA(+)
AND   CD_PRODOTTO_VENDITA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_TARIFFA.ID_MISURA_PRD_VE = CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = CD_TARIFFA.ID_FORMATO
AND   CD_PRODOTTO_VENDITA.FLG_DEFINITO_A_LISTINO = 'S'
AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1
--AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
--AND   CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO
--AND   CD_LUOGO.DESC_LUOGO = 'Cinema'
GROUP BY CD_CIRCUITO.ID_CIRCUITO,
         CD_TARIFFA.ID_PRODOTTO_VENDITA,
         CD_CIRCUITO.NOME_CIRCUITO,
         CD_PRODOTTO_PUBB.DESC_PRODOTTO,
         CD_TARIFFA.ID_LISTINO,
         CD_TARIFFA.IMPORTO,
         CD_TARIFFA.ID_TARIFFA,
         CD_TARIFFA.ID_TIPO_CINEMA,
         CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
         CD_CIRCUITO.ID_CIRCUITO,
         CD_CIRCUITO_CINEMA.ID_CIRCUITO,
         CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,
        -- CD_LUOGO.ID_LUOGO,
        CD_TARIFFA.ID_MISURA_PRD_VE,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CD_FORMATO_ACQUISTABILE.ID_FORMATO,
         CD_FORMATO_ACQUISTABILE.DESCRIZIONE);
RETURN v_lista_vendita;
--  EXCEPTION
--      WHEN NO_DATA_FOUND THEN
--      RAISE;
 --     WHEN OTHERS THEN
 --     RAISE;
  END ELENCO_PROD_VENDITA_IS_RIC;
--
  FUNCTION FU_GET_MODALITA_VENDITA RETURN C_MODALITA_VENDITA IS
    c_modalita_return C_MODALITA_VENDITA;
    BEGIN
    OPEN c_modalita_return FOR
    SELECT ID_MOD_VENDITA, DESC_MOD_VENDITA FROM CD_MODALITA_VENDITA;
    RETURN c_modalita_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
  END FU_GET_MODALITA_VENDITA;

-----------------------------------------------------------------------------------------------------
-- Function FU_GET_STATO_VENDITA
--
-- DESCRIZIONE:  Restituisce gli stati di vendita esistenti
--
--
--
-- REALIZZATORE: Simone Bottani, Altran, Luglio 2009
--
--  MODIFICHE:
--
-------------------------------------------------------------------------------------------------

  FUNCTION FU_GET_STATO_VENDITA RETURN C_STATO_VENDITA IS
    c_stati_return C_STATO_VENDITA;
    BEGIN
    OPEN c_stati_return FOR
    SELECT ID_STATO_VENDITA, DESCRIZIONE, DESCR_BREVE FROM CD_STATO_DI_VENDITA;
    RETURN c_stati_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
  END FU_GET_STATO_VENDITA;

    FUNCTION FU_GET_SELECT_STATO_VENDITA RETURN C_STATO_VENDITA_SELECT IS
    c_stati_return C_STATO_VENDITA_SELECT;
    BEGIN
    OPEN c_stati_return FOR
    SELECT ID_STATO_VENDITA AS ID, DESCRIZIONE AS VALUE, DESCR_BREVE FROM CD_STATO_DI_VENDITA;
    RETURN c_stati_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
  END FU_GET_SELECT_STATO_VENDITA;

/*----manca il controllo sullo stagionale
select cd_tariffa.id_prodotto_vendita,cd_circuito.NOME_CIRCUITO as CIRCUITO,cd_prodotto_pubb.DESC_PRODOTTO as PRODOTTO_PUBBLICITARIO, 'S' as disponibilita, cd_tariffa.IMPORTO as TARIFFA
from cd_prodotto_vendita,
     cd_circuito ,
     cd_tariffa ,
     cd_prodotto_pubb,
     cd_circuito_sala,
     cd_sala_vendita,
     cd_formato_acquistabile
where cd_prodotto_vendita.ID_CIRCUITO = cd_circuito.ID_CIRCUITO
--and   cd_prodotto_vendita.ID_MOD_VENDITA like '%'||'2' --p_id_mod_vendita
and   (p_id_mod_vendita is null or cd_prodotto_vendita.ID_MOD_VENDITA = p_id_mod_vendita)
and   cd_prodotto_pubb.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto--'ISP'--p_categoria_prodotto
and   cd_prodotto_vendita.ID_PRODOTTO_PUBB =cd_prodotto_pubb.ID_PRODOTTO_PUBB
and   cd_circuito_sala.ID_CIRCUITO = cd_circuito.ID_CIRCUITO
and   cd_circuito_sala.ID_CIRCUITO_SALA =cd_sala_vendita.ID_CIRCUITO_SALA
and   cd_tariffa.DATA_INIZIO >=to_date('01012004','DDMMYYYY')-- p_data_inizio
and   cd_tariffa.DATA_FINE   <=to_date('01012010','DDMMYYYY') --p_data_fine
and   cd_tariffa.ID_PRODOTTO_VENDITA = cd_prodotto_vendita.ID_PRODOTTO_VENDITA
group by cd_tariffa.id_prodotto_vendita,
         cd_circuito.NOME_CIRCUITO,
         cd_tariffa.IMPORTO,
         cd_prodotto_pubb.DESC_PRODOTTO;


/*
select cd_tariffa.id_prodotto_vendita,cd_circuito.NOME_CIRCUITO as CIRCUITO,cd_prodotto_pubb.DESC_PRODOTTO as PRODOTTO_PUBBLICITARIO, 'S' as disponibilita, cd_tariffa.IMPORTO as TARIFFA
from cd_prodotto_vendita,
     cd_circuito ,
     cd_tariffa ,
     cd_prodotto_pubb,
     --cd_circuito_sala,
     --cd_sala_vendita,
     cd_circuito_atrio,
     cd_atrio_vendita,
     cd_formato_acquistabile
where cd_prodotto_vendita.ID_CIRCUITO = cd_circuito.ID_CIRCUITO
--nd   cd_prodotto_vendita.ID_MOD_VENDITA like '%'||'2' --p_id_mod_vendita
and   (p_id_mod_vendita is null or cd_prodotto_vendita.ID_MOD_VENDITA = p_id_mod_vendita)
and   cd_prodotto_pubb.COD_CATEGORIA_PRODOTTO='ISP'--p_categoria_prodotto
and   cd_prodotto_vendita.ID_PRODOTTO_PUBB =cd_prodotto_pubb.ID_PRODOTTO_PUBB
and   cd_circuito_atrio.ID_CIRCUITO = cd_circuito.ID_CIRCUITO
and   cd_circuito_atrio.ID_CIRCUITO_ATRIO =cd_atrio_vendita.ID_CIRCUITO_ATRIO
and   cd_tariffa.DATA_INIZIO >=to_date('01012004','DDMMYYYY')-- p_data_inizio
and   cd_tariffa.DATA_FINE   <=to_date('01012010','DDMMYYYY') --p_data_fine
and   cd_tariffa.ID_PRODOTTO_VENDITA = cd_prodotto_vendita.ID_PRODOTTO_VENDITA
group by cd_tariffa.id_prodotto_vendita,
         cd_circuito.NOME_CIRCUITO,
         cd_tariffa.IMPORTO,
         cd_prodotto_pubb.DESC_PRODOTTO;
         */

/**
    Per semplicita si valuta una disponibilita per ogni giorno.
    Da raffinare eventualmente in seguito
**/
FUNCTION FU_GET_DISPONIBILITA_IS(p_id_circuito CD_CIRCUITO.ID_CIRCUITO%TYPE, p_id_prodotto_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE, p_data_inizio CD_LISTINO.DATA_INIZIO%TYPE, p_data_fine CD_LISTINO.DATA_FINE%TYPE) RETURN CHAR IS
v_disponibilita_return CHAR;
v_id_prodotto_pubb CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB%TYPE;
v_num_comunicati NUMBER;
v_num_giorni NUMBER;
c_luoghi C_LUOGO;
v_id_luogo CD_LUOGO.ID_LUOGO%TYPE;
v_desc_luogo CD_LUOGO.DESC_LUOGO%TYPE;

BEGIN

SELECT CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB INTO v_id_prodotto_pubb
FROM CD_PRODOTTO_VENDITA
WHERE CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita;

SELECT p_data_fine - p_data_inizio INTO v_num_giorni FROM DUAL;

c_luoghi := FU_GET_LUOGO_PROD_VENDITA(p_id_prodotto_vendita);

LOOP

FETCH c_luoghi INTO v_id_luogo, v_desc_luogo;
EXIT WHEN c_luoghi%NOTFOUND;
IF v_id_luogo = 2 THEN --Sala
    SELECT COUNT(1) INTO v_num_comunicati
    FROM CD_SALA_VENDITA, CD_COMUNICATO
    WHERE ID_CIRCUITO_SALA = p_id_circuito
    AND (CD_SALA_VENDITA.DATA_EROGAZIONE >= p_data_inizio AND CD_SALA_VENDITA.DATA_EROGAZIONE <= p_data_fine)
    AND CD_COMUNICATO.ID_SALA_VENDITA = CD_SALA_VENDITA.ID_SALA_VENDITA;
ELSIF v_id_prodotto_pubb = 3 THEN --Atrio
    SELECT COUNT(1) INTO v_num_comunicati
    FROM CD_ATRIO_VENDITA, CD_COMUNICATO
    WHERE ID_CIRCUITO_ATRIO = p_id_circuito
    AND (CD_ATRIO_VENDITA.DATA_EROGAZIONE >= p_data_inizio AND CD_ATRIO_VENDITA.DATA_EROGAZIONE <= p_data_fine)
    AND CD_COMUNICATO.ID_ATRIO_VENDITA = CD_ATRIO_VENDITA.ID_ATRIO_VENDITA;
ELSIF v_id_prodotto_pubb = 4 THEN --Cinema
    SELECT COUNT(1) INTO v_num_comunicati
    FROM CD_CINEMA_VENDITA, CD_COMUNICATO
    WHERE ID_CIRCUITO_CINEMA = p_id_circuito
    AND (CD_CINEMA_VENDITA.DATA_EROGAZIONE >= p_data_inizio AND CD_CINEMA_VENDITA.DATA_EROGAZIONE <= p_data_fine)
    AND CD_COMUNICATO.ID_CINEMA_VENDITA = CD_CINEMA_VENDITA.ID_CINEMA_VENDITA;

END IF;

END LOOP;
close c_luoghi;
IF v_num_giorni > v_num_comunicati THEN
    v_disponibilita_return := 'S';
ELSE
      v_disponibilita_return := 'N';
END IF;

RETURN v_disponibilita_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
END FU_GET_DISPONIBILITA_IS;

FUNCTION FU_GET_LUOGO_PROD_VENDITA(p_id_prodotto_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE) RETURN C_LUOGO IS
v_luoghi_return C_LUOGO;
BEGIN
    BEGIN
    OPEN v_luoghi_return FOR
    SELECT CD_LUOGO.ID_LUOGO,CD_LUOGO.DESC_LUOGO
     FROM CD_LUOGO, CD_LUOGO_TIPO_PUBB, CD_PRODOTTO_VENDITA, CD_PRODOTTO_PUBB
     WHERE CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
     AND CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB = CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
     AND CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
     AND CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO;
     EXCEPTION WHEN NO_DATA_FOUND THEN
        --Sponsorizzazione
        OPEN v_luoghi_return FOR
        SELECT CD_LUOGO.ID_LUOGO,CD_LUOGO.DESC_LUOGO
        FROM CD_LUOGO
        WHERE ID_LUOGO = 6;
     END;     
RETURN v_luoghi_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
END FU_GET_LUOGO_PROD_VENDITA;

FUNCTION FU_GET_BREAK_LIBERA(p_id_circuito CD_PRODOTTO_VENDITA.ID_CIRCUITO%TYPE, p_id_cinema CD_CINEMA.ID_CINEMA%TYPE, p_id_prodotto_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE, p_id_schermo CD_SCHERMO.ID_SCHERMO%TYPE, p_data_inizio CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE,p_data_fine CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE) RETURN C_BREAK IS
v_break_return C_BREAK;
BEGIN
    OPEN v_break_return FOR
    SELECT
    CD_CIRCUITO.NOME_CIRCUITO,
    CD_CINEMA.NOME_CINEMA,
    CD_SALA.NOME_SALA,
    CD_BREAK.NOME_BREAK,
    CD_BREAK.SECONDI_NOMINALI,
    CD_BREAK.ID_BREAK
    FROM
     CD_CIRCUITO_CINEMA,
     CD_CINEMA,
     CD_SALA,
     CD_SCHERMO,
     CD_PROIEZIONE,
     CD_BREAK,
     CD_BREAK_VENDITA,
     CD_CIRCUITO_BREAK,
     CD_CIRCUITO
    WHERE CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
    AND CD_CIRCUITO_BREAK.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
    AND CD_CIRCUITO_BREAK.ID_BREAK = CD_BREAK.ID_BREAK
    AND CD_BREAK_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
    AND CD_BREAK_VENDITA.ID_CIRCUITO_BREAK = CD_CIRCUITO_BREAK.ID_CIRCUITO_BREAK
    AND   (p_data_inizio IS NULL OR CD_BREAK_VENDITA.DATA_EROGAZIONE >= p_data_inizio)
    AND   (p_data_fine IS NULL OR CD_BREAK_VENDITA.DATA_EROGAZIONE <= p_data_fine)
    AND CD_BREAK.ID_PROIEZIONE = CD_PROIEZIONE.ID_PROIEZIONE
    AND CD_PROIEZIONE.ID_SCHERMO = CD_SCHERMO.ID_SALA
    AND CD_SCHERMO.ID_SALA = CD_SALA.ID_SALA
    AND (p_id_schermo IS NULL OR CD_SCHERMO.ID_SCHERMO = p_id_schermo)
    AND CD_SALA.ID_CINEMA = CD_CINEMA.ID_CINEMA
    AND CD_CINEMA.ID_CINEMA = p_id_cinema
    AND CD_CIRCUITO_CINEMA.ID_CINEMA = CD_CINEMA.ID_CINEMA
    AND CD_CIRCUITO_CINEMA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO;
    RETURN v_break_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
END FU_GET_BREAK_LIBERA;

FUNCTION FU_GET_SCHERMI_LIBERA(
p_id_circuito CD_PRODOTTO_VENDITA.ID_CIRCUITO%TYPE,
p_id_tipo_cinema CD_TIPO_CINEMA.ID_TIPO_CINEMA%TYPE,
p_id_cinema CD_CINEMA.ID_CINEMA%TYPE,
p_id_comune CD_COMUNE.ID_COMUNE%TYPE,
p_id_provincia CD_PROVINCIA.ID_PROVINCIA%TYPE,
p_id_regione CD_REGIONE.ID_REGIONE%TYPE,
p_id_prodotto_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE,
p_id_schermo CD_SCHERMO.ID_SCHERMO%TYPE,
p_data_inizio CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE,
p_data_fine CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE) RETURN C_SCHERMI_LIBERA IS
v_sale_return C_SCHERMI_LIBERA;
BEGIN
OPEN v_sale_return FOR
    SELECT /*+ RULE*/
    DISTINCT(ID_SCHERMO), DESC_TIPO_CINEMA, NOME_CINEMA, COMUNE, PROVINCIA, NOME_REGIONE, NOME_SALA AS DESC_SCHERMO, PASSAGGI, 0 as DISPONIBILITA, ID_SALA
   FROM
     (
     SELECT SC.ID_SCHERMO, TC.DESC_TIPO_CINEMA, CI.NOME_CINEMA, COM.COMUNE, PROV.ABBR AS PROVINCIA, REG.NOME_REGIONE, SA.NOME_SALA, COUNT(ID_BREAK) AS PASSAGGI, SA.ID_SALA
     FROM
      CD_COMUNE COM, CD_TIPO_CINEMA TC, CD_CINEMA CI, CD_SALA SA, CD_CIRCUITO_SCHERMO CIR_SC, CD_SCHERMO SC, CD_PROIEZIONE PR, CD_PROVINCIA PROV, CD_REGIONE REG,
     (SELECT CD_BREAK.ID_PROIEZIONE, CD_CIRCUITO.NOME_CIRCUITO, CD_BREAK.ID_BREAK
      FROM CD_BREAK, CD_CIRCUITO, CD_CIRCUITO_BREAK, CD_BREAK_VENDITA
      WHERE CD_BREAK_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
      AND CD_BREAK_VENDITA.FLG_ANNULLATO = 'N'
      AND CD_BREAK_VENDITA.ID_CIRCUITO_BREAK = CD_CIRCUITO_BREAK.ID_CIRCUITO_BREAK
      AND CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
      AND CD_CIRCUITO.FLG_ANNULLATO = 'N'
      AND CD_CIRCUITO_BREAK.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
      AND CD_CIRCUITO_BREAK.FLG_ANNULLATO = 'N'
      AND CD_CIRCUITO_BREAK.ID_BREAK = CD_BREAK.ID_BREAK
      AND   (p_data_inizio IS NULL OR CD_BREAK_VENDITA.DATA_EROGAZIONE >= p_data_inizio)
      AND   (p_data_fine IS NULL OR CD_BREAK_VENDITA.DATA_EROGAZIONE <= p_data_fine)) BRK
    WHERE BRK.ID_PROIEZIONE = PR.ID_PROIEZIONE
    AND PR.FLG_ANNULLATO = 'N'
    AND SC.ID_SCHERMO = PR.ID_SCHERMO
    AND SC.FLG_ANNULLATO = 'N'
    AND CIR_SC.ID_SCHERMO = SC.ID_SCHERMO
    AND CIR_SC.ID_CIRCUITO = p_id_circuito
    AND SA.ID_SALA = SC.ID_SALA
    AND SA.FLG_ANNULLATO = 'N'
    AND CI.ID_CINEMA = SA.ID_CINEMA
    AND CI.FLG_ANNULLATO = 'N'
    AND (p_id_cinema IS NULL OR CI.ID_CINEMA = p_id_cinema)
    AND CI.ID_TIPO_CINEMA = TC.ID_TIPO_CINEMA
    AND (p_id_tipo_cinema IS NULL OR CI.ID_TIPO_CINEMA = p_id_tipo_cinema)
    AND (p_id_schermo IS NULL OR SC.ID_SCHERMO = p_id_schermo)
    AND COM.ID_COMUNE = CI.ID_COMUNE
    AND (p_id_comune IS NULL OR COM.ID_COMUNE = p_id_comune)
    AND PROV.ID_PROVINCIA = COM.ID_PROVINCIA
    AND (p_id_provincia IS NULL OR PROV.ID_PROVINCIA = p_id_provincia)
    AND REG.ID_REGIONE = PROV.ID_REGIONE
    AND (p_id_regione IS NULL OR REG.ID_REGIONE = p_id_regione)
    GROUP BY
    SC.ID_SCHERMO,
    DESC_TIPO_CINEMA,
    NOME_CINEMA,
    COMUNE,
    ABBR,
    NOME_REGIONE,
    SA.NOME_SALA,
    SA.ID_SALA
    )
    ORDER BY NOME_CINEMA;
    RETURN v_sale_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
END FU_GET_SCHERMI_LIBERA;

FUNCTION FU_GET_SALE_CIRCUITO(p_id_circuito CD_PRODOTTO_VENDITA.ID_CIRCUITO%TYPE) RETURN C_SALE IS
v_sale_return C_SALE;
BEGIN
    OPEN v_sale_return FOR
    SELECT CD_CIRCUITO.NOME_CIRCUITO, CD_CINEMA.NOME_CINEMA, CD_SALA.NOME_SALA, CD_SALA.ID_SALA
    FROM CD_CIRCUITO, CD_CINEMA, CD_SALA, CD_CIRCUITO_CINEMA
    WHERE CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
    AND CD_CIRCUITO_CINEMA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
    AND CD_CIRCUITO_CINEMA.ID_CINEMA = CD_CINEMA.ID_CINEMA
    AND CD_SALA.ID_CINEMA = CD_CINEMA.ID_CINEMA;
    RETURN v_sale_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
END FU_GET_SALE_CIRCUITO;

FUNCTION FU_GET_SALE_LIBERA(p_id_circuito CD_PRODOTTO_VENDITA.ID_CIRCUITO%TYPE,p_id_cinema CD_CINEMA.ID_CINEMA%TYPE, p_id_comune CD_COMUNE.ID_COMUNE%TYPE, p_id_regione CD_REGIONE.ID_REGIONE%TYPE, p_id_prodotto_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE, p_data_inizio CD_SALA_VENDITA.DATA_EROGAZIONE%TYPE,p_data_fine CD_SALA_VENDITA.DATA_EROGAZIONE%TYPE, p_id_tipo_cinema CD_TARIFFA.ID_TIPO_CINEMA%TYPE) RETURN C_SALE IS
v_sale_return C_SALE;
BEGIN
    OPEN v_sale_return FOR
    SELECT DISTINCT CD_SALA.ID_SALA, CD_SALA.NOME_SALA, CD_CIRCUITO.NOME_CIRCUITO, CD_CINEMA.NOME_CINEMA || ' - ' || CD_COMUNE.COMUNE AS NOME_CINEMA
    FROM
     CD_REGIONE REG,
     CD_PROVINCIA PROV,
     CD_COMUNE,
     CD_CINEMA,
     CD_SALA,
     CD_SALA_VENDITA,
     CD_CIRCUITO_SALA,
     CD_CIRCUITO
    WHERE CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
    AND CD_CIRCUITO_SALA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
    AND CD_CIRCUITO_SALA.ID_SALA = CD_SALA.ID_SALA
    AND CD_SALA_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
    AND CD_SALA_VENDITA.ID_CIRCUITO_SALA = CD_CIRCUITO_SALA.ID_CIRCUITO_SALA
    AND   (p_data_inizio IS NULL OR CD_SALA_VENDITA.DATA_EROGAZIONE >= p_data_inizio)
    AND   (p_data_fine IS NULL OR CD_SALA_VENDITA.DATA_EROGAZIONE <= p_data_fine)
    AND CD_SALA.ID_CINEMA = CD_CINEMA.ID_CINEMA
    AND (p_id_cinema IS NULL OR CD_CINEMA.ID_CINEMA = p_id_cinema)
    AND (p_id_tipo_cinema IS NULL OR CD_CINEMA.ID_TIPO_CINEMA = p_id_tipo_cinema)
    AND CD_COMUNE.ID_COMUNE = CD_CINEMA.ID_COMUNE
    AND (p_id_comune IS NULL OR CD_COMUNE.ID_COMUNE = p_id_comune)
    AND PROV.ID_PROVINCIA = CD_COMUNE.ID_PROVINCIA
    AND REG.ID_REGIONE = PROV.ID_REGIONE
    AND (p_id_regione IS NULL OR REG.ID_REGIONE = p_id_regione)
    ORDER BY NOME_CINEMA;
--    AND CD_CIRCUITO_CINEMA.ID_CINEMA = CD_CINEMA.ID_CINEMA
--    AND CD_CIRCUITO_CINEMA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO;
    RETURN v_sale_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
END FU_GET_SALE_LIBERA;

FUNCTION FU_GET_CINEMA_LIBERA(p_id_circuito CD_PRODOTTO_VENDITA.ID_CIRCUITO%TYPE,p_id_comune CD_COMUNE.ID_COMUNE%TYPE, p_id_regione CD_REGIONE.ID_REGIONE%TYPE,p_id_prodotto_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE, p_data_inizio CD_SALA_VENDITA.DATA_EROGAZIONE%TYPE,p_data_fine CD_SALA_VENDITA.DATA_EROGAZIONE%TYPE, p_id_tipo_cinema CD_TARIFFA.ID_TIPO_CINEMA%TYPE) RETURN C_CINEMA IS
v_cinema_return C_CINEMA;
BEGIN
    OPEN v_cinema_return FOR
    SELECT DISTINCT CD_CINEMA.ID_CINEMA, CD_CINEMA.NOME_CINEMA || ' - ' || CD_COMUNE.COMUNE AS NOME_CINEMA, CD_CIRCUITO.NOME_CIRCUITO
    FROM
     CD_REGIONE REG,
     CD_PROVINCIA PROV,
     CD_COMUNE,
     CD_CIRCUITO,
     CD_CIRCUITO_CINEMA,
     CD_CINEMA_VENDITA,
     CD_CINEMA,
     CD_SALA
    WHERE CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
    AND CD_CIRCUITO.FLG_ANNULLATO = 'N'
    AND CD_CIRCUITO_CINEMA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
    AND CD_CIRCUITO_CINEMA.FLG_ANNULLATO = 'N'
    AND CD_CIRCUITO_CINEMA.ID_CINEMA = CD_CINEMA.ID_CINEMA
    --AND (p_id_cinema IS NULL OR CD_CINEMA.ID_TIPO_CINEMA = p_id_cinema)
    AND (p_id_tipo_cinema IS NULL OR CD_CINEMA.ID_TIPO_CINEMA = p_id_tipo_cinema)
    AND CD_CINEMA_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
    AND CD_CINEMA_VENDITA.FLG_ANNULLATO = 'N'
    AND CD_CINEMA_VENDITA.ID_CIRCUITO_CINEMA = CD_CIRCUITO_CINEMA.ID_CIRCUITO_CINEMA
    AND   (p_data_inizio IS NULL OR CD_CINEMA_VENDITA.DATA_EROGAZIONE >= p_data_inizio)
    AND   (p_data_fine IS NULL OR CD_CINEMA_VENDITA.DATA_EROGAZIONE <= p_data_fine)
    AND CD_CINEMA.FLG_ANNULLATO = 'N'
    AND NVL (CD_CINEMA.DATA_FINE_VALIDITA,p_data_inizio) >= p_data_inizio
    AND CD_CINEMA.FLG_VIRTUALE ='N'
    AND CD_CINEMA.ID_CINEMA = CD_SALA.ID_CINEMA
    AND CD_SALA.FLG_ARENA='N'
    AND CD_COMUNE.ID_COMUNE = CD_CINEMA.ID_COMUNE
    AND (p_id_comune IS NULL OR CD_COMUNE.ID_COMUNE = p_id_comune)
    AND PROV.ID_PROVINCIA = CD_COMUNE.ID_PROVINCIA
    AND REG.ID_REGIONE = PROV.ID_REGIONE
    AND (p_id_regione IS NULL OR REG.ID_REGIONE = p_id_regione)
    ORDER BY NOME_CINEMA;
    RETURN v_cinema_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
END FU_GET_CINEMA_LIBERA;

FUNCTION FU_GET_CINEMA_CIRCUITO(P_ID_CIRCUITO CD_PRODOTTO_VENDITA.ID_CIRCUITO%TYPE, P_ID_PRODOTTO_VENDITA CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE,P_DATA_INIZIO cd_proiezione.data_proiezione%type,P_DATA_FINE cd_proiezione.data_proiezione%type, p_id_ambito CD_LUOGO.ID_LUOGO%TYPE, p_id_comune CD_COMUNE.ID_COMUNE%TYPE, p_id_tipo_cinema CD_TARIFFA.ID_TIPO_CINEMA%TYPE) RETURN C_CINEMA IS
v_cinema_return C_CINEMA;
BEGIN
  IF p_id_ambito = 1 THEN
    OPEN v_cinema_return FOR
       SELECT /*+ RULE*/ DISTINCT CI.ID_CINEMA, NOME_CIRCUITO, CI.NOME_CINEMA || ' - ' || COM.COMUNE AS NOME_CINEMA
     FROM
      CD_COMUNE COM, CD_CINEMA CI, CD_SALA SA, CD_SCHERMO SC, CD_PROIEZIONE PR,
     (SELECT CD_BREAK.ID_PROIEZIONE, CD_CIRCUITO.NOME_CIRCUITO, CD_BREAK.ID_BREAK
      FROM CD_BREAK, CD_CIRCUITO, CD_CIRCUITO_BREAK, CD_BREAK_VENDITA
      WHERE CD_BREAK_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
      AND CD_BREAK_VENDITA.FLG_ANNULLATO = 'N'
      AND CD_BREAK_VENDITA.ID_CIRCUITO_BREAK = CD_CIRCUITO_BREAK.ID_CIRCUITO_BREAK
      AND CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
      AND CD_CIRCUITO.FLG_ANNULLATO = 'N'
      AND CD_CIRCUITO_BREAK.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
      AND CD_CIRCUITO_BREAK.FLG_ANNULLATO = 'N'
      AND CD_CIRCUITO_BREAK.ID_BREAK = CD_BREAK.ID_BREAK
      AND   (p_data_inizio IS NULL OR CD_BREAK_VENDITA.DATA_EROGAZIONE >= p_data_inizio)
      AND   (p_data_fine IS NULL OR CD_BREAK_VENDITA.DATA_EROGAZIONE <= p_data_fine)) BRK
    WHERE BRK.ID_PROIEZIONE = PR.ID_PROIEZIONE
    AND PR.FLG_ANNULLATO = 'N'
    AND SC.ID_SCHERMO = PR.ID_SCHERMO
    AND SC.FLG_ANNULLATO = 'N'
    AND SA.ID_SALA = SC.ID_SALA
    AND SA.FLG_ANNULLATO = 'N'
    AND CI.ID_CINEMA = SA.ID_CINEMA
    AND (p_id_tipo_cinema IS NULL OR CI.ID_TIPO_CINEMA = p_id_tipo_cinema)
    AND CI.FLG_ANNULLATO = 'N'
    AND COM.ID_COMUNE = CI.ID_COMUNE
    AND (p_id_comune IS NULL OR CI.ID_COMUNE = p_id_comune)
    ORDER BY NOME_CINEMA;
 ELSIF p_id_ambito = 2 THEN
    OPEN v_cinema_return FOR
       SELECT DISTINCT CI.ID_CINEMA, NOME_CIRCUITO, CI.NOME_CINEMA || ' - ' || COM.COMUNE AS NOME_CINEMA
     FROM
      CD_COMUNE COM, CD_CINEMA CI,
     (SELECT CD_CIRCUITO.NOME_CIRCUITO, CD_SALA.ID_CINEMA
      FROM CD_SALA, CD_CIRCUITO, CD_CIRCUITO_SALA, CD_SALA_VENDITA
      WHERE CD_SALA_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
      AND CD_SALA_VENDITA.FLG_ANNULLATO = 'N'
      AND CD_SALA_VENDITA.ID_CIRCUITO_SALA = CD_CIRCUITO_SALA.ID_CIRCUITO_SALA
      AND CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
      AND CD_CIRCUITO.FLG_ANNULLATO = 'N'
      AND CD_CIRCUITO_SALA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
      AND CD_CIRCUITO_SALA.FLG_ANNULLATO = 'N'
      AND CD_CIRCUITO_SALA.ID_SALA = CD_SALA.ID_SALA
      AND   (p_data_inizio IS NULL OR CD_SALA_VENDITA.DATA_EROGAZIONE >= p_data_inizio)
      AND   (p_data_fine IS NULL OR CD_SALA_VENDITA.DATA_EROGAZIONE <= p_data_fine)) SALA
    WHERE SALA.ID_CINEMA = CI.ID_CINEMA
    AND CI.FLG_ANNULLATO = 'N'
    AND (p_id_tipo_cinema IS NULL OR CI.ID_TIPO_CINEMA = p_id_tipo_cinema)
    AND COM.ID_COMUNE = CI.ID_COMUNE
    AND (p_id_comune IS NULL OR CI.ID_COMUNE = p_id_comune)
    ORDER BY NOME_CINEMA;
 ELSIF p_id_ambito = 3 THEN
    OPEN v_cinema_return FOR
       SELECT DISTINCT CI.ID_CINEMA, NOME_CIRCUITO, CI.NOME_CINEMA || ' - ' || COM.COMUNE AS NOME_CINEMA
     FROM
      CD_COMUNE COM, CD_CINEMA CI,
     (SELECT CD_CIRCUITO.NOME_CIRCUITO, CD_ATRIO.ID_CINEMA
      FROM CD_ATRIO, CD_CIRCUITO, CD_CIRCUITO_ATRIO, CD_ATRIO_VENDITA
      WHERE CD_ATRIO_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
      AND CD_ATRIO_VENDITA.FLG_ANNULLATO = 'N'
      AND CD_ATRIO_VENDITA.ID_CIRCUITO_ATRIO = CD_CIRCUITO_ATRIO.ID_CIRCUITO_ATRIO
      AND CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
      AND CD_CIRCUITO.FLG_ANNULLATO = 'N'
      AND CD_CIRCUITO_ATRIO.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
      AND CD_CIRCUITO_ATRIO.FLG_ANNULLATO = 'N'
      AND CD_CIRCUITO_ATRIO.ID_ATRIO = CD_ATRIO.ID_ATRIO
      AND   (p_data_inizio IS NULL OR CD_ATRIO_VENDITA.DATA_EROGAZIONE >= p_data_inizio)
      AND   (p_data_fine IS NULL OR CD_ATRIO_VENDITA.DATA_EROGAZIONE <= p_data_fine)) ATRIO
    WHERE ATRIO.ID_CINEMA = CI.ID_CINEMA
    AND CI.FLG_ANNULLATO = 'N'
    AND (p_id_tipo_cinema IS NULL OR CI.ID_TIPO_CINEMA = p_id_tipo_cinema)
    AND COM.ID_COMUNE = CI.ID_COMUNE
    AND (p_id_comune IS NULL OR CI.ID_COMUNE = p_id_comune)
    ORDER BY NOME_CINEMA;
 ELSIF p_id_ambito = 4 THEN
    OPEN v_cinema_return FOR
       SELECT DISTINCT CI.ID_CINEMA, NOME_CIRCUITO, CI.NOME_CINEMA || ' - ' || COM.COMUNE AS NOME_CINEMA
     FROM
      CD_COMUNE COM, CD_CINEMA CI, CD_SALA SA, CD_SCHERMO SC, CD_PROIEZIONE PR,
     (SELECT CD_BREAK.ID_PROIEZIONE, CD_CIRCUITO.NOME_CIRCUITO, CD_BREAK.ID_BREAK
      FROM CD_BREAK, CD_CIRCUITO, CD_CIRCUITO_BREAK, CD_BREAK_VENDITA
      WHERE CD_BREAK_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
      AND CD_BREAK_VENDITA.FLG_ANNULLATO = 'N'
      AND CD_BREAK_VENDITA.ID_CIRCUITO_BREAK = CD_CIRCUITO_BREAK.ID_CIRCUITO_BREAK
      AND CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
      AND CD_CIRCUITO.FLG_ANNULLATO = 'N'
      AND CD_CIRCUITO_BREAK.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
      AND CD_CIRCUITO_BREAK.FLG_ANNULLATO = 'N'
      AND CD_CIRCUITO_BREAK.ID_BREAK = CD_BREAK.ID_BREAK
      AND   (p_data_inizio IS NULL OR CD_BREAK_VENDITA.DATA_EROGAZIONE >= p_data_inizio)
      AND   (p_data_fine IS NULL OR CD_BREAK_VENDITA.DATA_EROGAZIONE <= p_data_fine)) BRK
    WHERE BRK.ID_PROIEZIONE = PR.ID_PROIEZIONE
    AND PR.FLG_ANNULLATO = 'N'
    AND SC.ID_SCHERMO = PR.ID_SCHERMO
    AND SC.FLG_ANNULLATO = 'N'
    AND SA.ID_SALA = SC.ID_SALA
    AND SA.FLG_ANNULLATO = 'N'
    AND CI.ID_CINEMA = SA.ID_CINEMA
    AND (p_id_tipo_cinema IS NULL OR CI.ID_TIPO_CINEMA = p_id_tipo_cinema)
    AND CI.FLG_ANNULLATO = 'N'
    AND COM.ID_COMUNE = CI.ID_COMUNE
    AND (p_id_comune IS NULL OR CI.ID_COMUNE = p_id_comune)
    ORDER BY NOME_CINEMA;
 END IF;
    /*
    OPEN v_cinema_return FOR
    SELECT DISTINCT(CD_CINEMA.ID_CINEMA), CD_CIRCUITO.NOME_CIRCUITO, CD_CINEMA.NOME_CINEMA
    FROM CD_CINEMA, CD_SALA, CD_SCHERMO, CD_CIRCUITO_SCHERMO, CD_CIRCUITO--,CD_BREAK_VENDITA,CD_CIRCUITO_BREAK,CD_BREAK,CD_PRODOTTO_VENDITA
    WHERE CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
    AND CD_CIRCUITO_SCHERMO.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
    AND CD_SCHERMO.ID_SCHERMO = CD_CIRCUITO_SCHERMO.ID_SCHERMO
    AND CD_SALA.ID_SALA = CD_SCHERMO.ID_SALA
    AND CD_CINEMA.ID_CINEMA = CD_SALA.ID_CINEMA;
    --AND CD_BREAK_VENDITA.ID_CIRCUITO_BREAK = CD_CIRCUITO_BREAK.ID_CIRCUITO_BREAK
    --AND CD_CIRCUITO.FLG_ANNULLATO = 'N';*/
    --AND CD_CIRCUITO_BREAK.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
    --AND CD_CIRCUITO_BREAK.FLG_ANNULLATO = 'N'
    --AND CD_CIRCUITO_BREAK.ID_BREAK = CD_BREAK.ID_BREAK
    --AND CD_PRODOTTO_VENDITA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO;
   -- AND CD_BREAK_VENDITA.DATA_EROGAZIONE >= :p_data_inizio
    --AND CD_BREAK_VENDITA.DATA_EROGAZIONE <= :p_data_fine))
    RETURN v_cinema_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
END FU_GET_CINEMA_CIRCUITO;



FUNCTION FU_GET_ATRII_CIRCUITO(p_id_circuito CD_PRODOTTO_VENDITA.ID_CIRCUITO%TYPE) RETURN C_ATRII IS
v_atrii_return C_ATRII;
BEGIN
    OPEN v_atrii_return FOR
    SELECT CD_CIRCUITO.NOME_CIRCUITO, CD_CINEMA.NOME_CINEMA, CD_ATRIO.DESC_ATRIO, CD_ATRIO.ID_ATRIO
    FROM CD_CIRCUITO, CD_CINEMA, CD_ATRIO, CD_CIRCUITO_CINEMA
    WHERE CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
    AND CD_CIRCUITO_CINEMA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
    AND CD_CIRCUITO_CINEMA.ID_CINEMA = CD_CINEMA.ID_CINEMA
    AND CD_ATRIO.ID_CINEMA = CD_CINEMA.ID_CINEMA;
    RETURN v_atrii_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
END FU_GET_ATRII_CIRCUITO;
/*
A.C. 10/06/2011 Modificata query di ricerca per tipo_cinema = 1
*/
FUNCTION FU_GET_ATRII_LIBERA(p_id_circuito CD_PRODOTTO_VENDITA.ID_CIRCUITO%TYPE,p_id_cinema CD_CINEMA.ID_CINEMA%TYPE, p_id_comune CD_COMUNE.ID_COMUNE%TYPE, p_id_regione CD_REGIONE.ID_REGIONE%TYPE, p_id_prodotto_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE, p_data_inizio CD_ATRIO_VENDITA.DATA_EROGAZIONE%TYPE,p_data_fine CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE,p_id_tipo_cinema CD_TARIFFA.ID_TIPO_CINEMA%TYPE) RETURN C_ATRII IS
v_atrii_return C_ATRII;
BEGIN
    OPEN v_atrii_return FOR
    SELECT DISTINCT CD_ATRIO.ID_ATRIO, CD_ATRIO.DESC_ATRIO, CD_CIRCUITO.NOME_CIRCUITO, CD_CINEMA.NOME_CINEMA || ' - ' || CD_COMUNE.COMUNE AS NOME_CINEMA
    FROM
     CD_REGIONE REG,
     CD_PROVINCIA PROV,
     CD_COMUNE,
     CD_CINEMA,
     CD_ATRIO,
     CD_ATRIO_VENDITA,
     CD_CIRCUITO_ATRIO,
     CD_CIRCUITO
    WHERE CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
    AND CD_CIRCUITO_ATRIO.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
    AND CD_CIRCUITO_ATRIO.ID_ATRIO = CD_ATRIO.ID_ATRIO
    AND CD_ATRIO_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
    AND CD_ATRIO_VENDITA.ID_CIRCUITO_ATRIO = CD_CIRCUITO_ATRIO.ID_CIRCUITO_ATRIO
    AND   (p_data_inizio IS NULL OR CD_ATRIO_VENDITA.DATA_EROGAZIONE >= p_data_inizio)
    AND   (p_data_fine IS NULL OR CD_ATRIO_VENDITA.DATA_EROGAZIONE <= p_data_fine)
    AND CD_ATRIO.ID_CINEMA = CD_CINEMA.ID_CINEMA
    AND (p_id_cinema IS NULL OR CD_CINEMA.ID_CINEMA = p_id_cinema)
    /*# A.C.*/
    AND (p_id_tipo_cinema IS NULL OR p_id_tipo_cinema = 1 OR CD_CINEMA.ID_TIPO_CINEMA = p_id_tipo_cinema)
    /*# A.C.*/
    AND CD_COMUNE.ID_COMUNE = CD_CINEMA.ID_COMUNE
    AND (p_id_comune IS NULL OR CD_COMUNE.ID_COMUNE = p_id_comune)
    AND PROV.ID_PROVINCIA = CD_COMUNE.ID_PROVINCIA
    AND REG.ID_REGIONE = PROV.ID_REGIONE
    AND (p_id_regione IS NULL OR REG.ID_REGIONE = p_id_regione)
    AND CD_ATRIO.FLG_ANNULLATO='N'
    ORDER BY NOME_CINEMA;
    RETURN v_atrii_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
END FU_GET_ATRII_LIBERA;

FUNCTION FU_COUNT_AMBITI_CIRCUITO(p_id_circuito CD_PRODOTTO_VENDITA.ID_CIRCUITO%TYPE, p_id_ambito CD_LUOGO.ID_LUOGO%TYPE) RETURN NUMBER IS
v_num_ambiti NUMBER;
BEGIN

    IF p_id_ambito = 1 THEN --Break
        SELECT COUNT(*) INTO v_num_ambiti
        FROM CD_CIRCUITO, CD_BREAK, CD_CIRCUITO_BREAK
        WHERE CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
        AND CD_CIRCUITO_BREAK.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
        AND CD_CIRCUITO_BREAK.ID_BREAK = CD_BREAK.ID_BREAK;
        ELSIF p_id_ambito = 2 THEN --Sala
        SELECT COUNT(*) INTO v_num_ambiti
        FROM CD_CIRCUITO, CD_CINEMA, CD_SALA, CD_CIRCUITO_CINEMA
        WHERE CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
        AND CD_CIRCUITO_CINEMA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
        AND CD_CIRCUITO_CINEMA.ID_CINEMA = CD_CINEMA.ID_CINEMA
        AND CD_SALA.ID_CINEMA = CD_CINEMA.ID_CINEMA;
    ELSIF p_id_ambito = 3 THEN --Atrio
        SELECT COUNT(*) INTO v_num_ambiti
        FROM CD_CIRCUITO, CD_CINEMA, CD_ATRIO, CD_CIRCUITO_CINEMA
        WHERE CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
        AND CD_CIRCUITO_CINEMA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
        AND CD_CIRCUITO_CINEMA.ID_CINEMA = CD_CINEMA.ID_CINEMA
        AND CD_ATRIO.ID_CINEMA = CD_CINEMA.ID_CINEMA;
    ELSIF p_id_ambito = 4 THEN --Cinema
        SELECT COUNT(*) INTO v_num_ambiti
        FROM CD_CIRCUITO, CD_CINEMA, CD_CIRCUITO_CINEMA
        WHERE CD_CIRCUITO.ID_CIRCUITO = p_id_circuito
        AND CD_CIRCUITO_CINEMA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
        AND CD_CIRCUITO_CINEMA.ID_CINEMA = CD_CINEMA.ID_CINEMA;
    END IF;
    RETURN v_num_ambiti;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
END FU_COUNT_AMBITI_CIRCUITO;

FUNCTION FU_GET_PERIODI(p_data_inizio CD_TARIFFA.DATA_INIZIO%TYPE,p_data_fine CD_TARIFFA.DATA_FINE%TYPE) RETURN C_PERIODO IS
v_periodi_return C_PERIODO;
v_num_giorni NUMBER;
v_num_mesi NUMBER;
v_mese_anno_inizio NUMBER;
v_mese_anno_fine NUMBER;

    BEGIN
    v_num_giorni := p_data_fine - p_data_inizio +1;
    SELECT MONTHS_BETWEEN(p_data_fine +1, p_data_inizio) INTO v_num_mesi FROM dual;
    SELECT TO_CHAR(p_data_inizio,'MM') INTO v_mese_anno_inizio FROM DUAL;
    SELECT TO_CHAR(p_data_fine,'MM') INTO v_mese_anno_fine FROM DUAL;
   -- dbms_output.put_line('Numero di giorni'|| v_num_giorni);
  --  dbms_output.put_line('Numero di mesi'|| v_num_mesi);
    OPEN v_periodi_return FOR
    SELECT U.ID_UNITA AS ID, U.DESC_UNITA AS DESCRIZIONE
    FROM CD_UNITA_MISURA_TEMP U
    WHERE (U.ID_UNITA = 1 AND v_num_giorni >= 1)--Giornaliera
    OR (U.ID_UNITA = 2 AND FU_IS_PERIODO_SETTIMANA(p_data_inizio, p_data_fine) = 1) --Settimanale
    OR (U.ID_UNITA = 3 AND FU_IS_PERIODO_QUINDICINALE(p_data_inizio, p_data_fine) = 1) --Quindicinale
    OR (U.ID_UNITA = 4 AND v_num_mesi >= 1) --Mensile
    OR (U.ID_UNITA = 5 AND v_num_mesi >= 2)  --Bimestrale
    OR (U.ID_UNITA = 6 AND v_num_mesi >= 3)  --Trimestrale
    OR (U.ID_UNITA = 7 AND v_num_mesi >= 4)  --Quadrimestrale
    OR (U.ID_UNITA = 8 AND v_num_mesi >= 6)  --Semestrale
    OR (U.ID_UNITA = 9 AND v_num_mesi >= 12)  --Annuale
    OR (U.ID_UNITA = 10 ) --Weekend
    ORDER BY U.ID_UNITA;
    RETURN v_periodi_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
END FU_GET_PERIODI;

FUNCTION FU_IS_PERIODO_SETTIMANA(p_data_inizio CD_TARIFFA.DATA_INIZIO%TYPE,p_data_fine CD_TARIFFA.DATA_FINE%TYPE) RETURN NUMBER IS
v_esito NUMBER;
v_giorno_settimana_inizio NUMBER;
v_data_inizio_settimana CD_TARIFFA.DATA_INIZIO%TYPE;
v_num_giorni_effettivi NUMBER;
v_data_inizio_settimana_char VARCHAR2(50);
BEGIN

    SELECT TO_CHAR(p_data_inizio, 'D') INTO v_giorno_settimana_inizio FROM DUAL;
    --dbms_output.put_line('Data inizio'||v_data_inizio_settimana_char);
    IF v_giorno_settimana_inizio <> 2 THEN
        --SELECT NEXT_DAY(p_data_inizio, 'MON') INTO v_data_inizio_settimana_char FROM DUAL;
        select (trunc(p_data_inizio + 1) + mod(abs(to_number(to_char(p_data_inizio + 1,'D')) - 7) + 2, 7)) INTO v_data_inizio_settimana from dual;
        --dbms_output.put_line('Data inizio settimana'||v_data_inizio_settimana_char);
        SELECT TO_DATE(v_data_inizio_settimana_char) INTO v_data_inizio_settimana FROM DUAL;
    ELSE
        v_data_inizio_settimana := p_data_inizio;
    END IF;
    v_num_giorni_effettivi := p_data_fine - v_data_inizio_settimana +1;
    IF v_num_giorni_effettivi >=7 THEN
        v_esito := 1;
    ELSE
        v_esito := -1;
    END IF;
    RETURN v_esito;
    -- EXCEPTION
    --  WHEN OTHERS THEN
     -- RAISE;
END FU_IS_PERIODO_SETTIMANA;

FUNCTION FU_IS_PERIODO_QUINDICINALE(p_data_inizio CD_TARIFFA.DATA_INIZIO%TYPE,p_data_fine CD_TARIFFA.DATA_FINE%TYPE) RETURN NUMBER IS
v_esito NUMBER;
v_giorno_mese_inizio NUMBER;
v_data_inizio_effettiva CD_TARIFFA.DATA_INIZIO%TYPE;
v_num_giorni_effettivi NUMBER;
v_giorni_temp NUMBER;
v_giorno_mese_inizio_effettivo NUMBER;
v_fine_mese CD_TARIFFA.DATA_FINE%TYPE;
BEGIN
    v_esito := 0;
    SELECT TO_CHAR(p_data_inizio, 'DD') INTO v_giorno_mese_inizio FROM DUAL;
    --dbms_output.put_line('Giorno inizio mese'|| v_giorno_mese_inizio);
    IF v_giorno_mese_inizio = 1 OR v_giorno_mese_inizio = 16 THEN
        v_data_inizio_effettiva := p_data_inizio;
    ELSIF v_giorno_mese_inizio > 1 AND v_giorno_mese_inizio < 16 THEN
        v_data_inizio_effettiva := p_data_inizio - v_giorno_mese_inizio + 16;
    ELSIF v_giorno_mese_inizio > 16 THEN
        SELECT LAST_DAY(p_data_inizio) + 1 INTO v_data_inizio_effettiva FROM DUAL;
    ELSE
        v_esito := -1;
    END IF;

    IF v_esito <> -1 THEN

        SELECT TO_CHAR(v_data_inizio_effettiva, 'DD') INTO v_giorno_mese_inizio_effettivo FROM DUAL;

        IF v_giorno_mese_inizio_effettivo = 1 THEN
            v_giorni_temp := p_data_fine - v_data_inizio_effettiva + 1;
         --dbms_output.put_line('Giorni effettivi'|| v_giorni_temp);
            IF v_giorni_temp >= 15 THEN
                    v_esito := 1;
                ELSE
                    v_esito := -1;
            END IF;
        ELSIF v_giorno_mese_inizio_effettivo = 16 THEN
            SELECT LAST_DAY(p_data_inizio) INTO v_fine_mese FROM DUAL;
            IF (p_data_fine >= v_fine_mese) THEN
                v_esito := 1;
            ELSE
                v_esito := -1;
            END IF;
        END IF;
    END IF;

    RETURN v_esito;
   -- EXCEPTION
    --  WHEN OTHERS THEN
    --  RAISE;
END FU_IS_PERIODO_QUINDICINALE;

--- --------------------------------------------------------------------------------------------
-- FUNZIONE    FU_GET_UNITA_PROD_VENDITA
--
-- DESCRIZIONE: Dato un prodotto di vendita restituisce tutti i tagli temporali collegati
--
-- OPERAZIONI:
--
-- INPUT:  p_id_prod_vendita Id del prodotto vendita
-- OUTPUT:
--
-- REALIZZATORE  Simone Bottani, Altran, Agosto 2009
--
--  MODIFICHE:
--
-- --------------------------------------------------------------------------------------------

FUNCTION FU_GET_UNITA_PROD_VENDITA(p_id_prod_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE) RETURN C_PERIODO IS
v_periodi C_PERIODO;
BEGIN
    OPEN v_periodi FOR
     SELECT U.ID_UNITA AS ID, U.DESC_UNITA AS DESCRIZIONE
     FROM CD_UNITA_MISURA_TEMP U, CD_MISURA_PRD_VENDITA MIS, CD_PRODOTTO_PUBB PUB, CD_PRODOTTO_VENDITA VEN
     WHERE VEN.ID_PRODOTTO_VENDITA = p_id_prod_vendita
     AND PUB.ID_PRODOTTO_PUBB = VEN.ID_PRODOTTO_PUBB
     AND MIS.ID_PRODOTTO_PUBB = PUB.ID_PRODOTTO_PUBB
     AND U.ID_UNITA = MIS.ID_UNITA;
RETURN v_periodi;
EXCEPTION
   WHEN OTHERS THEN
   RAISE;
END FU_GET_UNITA_PROD_VENDITA;

FUNCTION FU_GET_STATI_VENDITA(p_tipo VARCHAR2, p_stato_ven CD_PRODOTTO_ACQUISTATO.STATO_DI_VENDITA%TYPE) RETURN C_STATO_VENDITA_SELECT IS
    c_stati_return C_STATO_VENDITA_SELECT;
    BEGIN
    IF (p_tipo = 'RICHIESTA') THEN
        OPEN c_stati_return FOR
        SELECT ID_STATO_VENDITA AS ID, DESCRIZIONE AS VALUE, DESCR_BREVE FROM CD_STATO_DI_VENDITA
        WHERE FLG_INIZIALE = 'S';
    ELSIF (p_tipo = 'PROD_ACQ') THEN
        OPEN c_stati_return FOR
        SELECT ID_STATO_VENDITA AS ID, DESCRIZIONE AS VALUE, DESCR_BREVE FROM CD_STATO_DI_VENDITA
   WHERE INSTR((SELECT STATI_SUCCESSIVI FROM CD_STATO_DI_VENDITA
            WHERE DESCR_BREVE = p_stato_ven),ID_STATO_VENDITA) > 0;
    ELSIF (p_tipo = 'AFFOLLAMENTO') THEN
        OPEN c_stati_return FOR
        SELECT ID_STATO_VENDITA AS ID, DESCRIZIONE AS VALUE, DESCR_BREVE FROM CD_STATO_DI_VENDITA
        WHERE FLG_AFFOLLAMENTO = 'S';
    ELSIF (p_tipo = 'RICERCA_PIANO') THEN
        OPEN c_stati_return FOR
        SELECT ID_STATO_VENDITA AS ID, DESCRIZIONE, DESCR_BREVE AS VALUE FROM CD_STATO_DI_VENDITA
        WHERE STATI_SUCCESSIVI IS NOT NULL;
    ELSIF (p_tipo = 'TUTTI') THEN
        OPEN c_stati_return FOR
        SELECT ID_STATO_VENDITA AS ID, DESCRIZIONE, DESCR_BREVE AS VALUE FROM CD_STATO_DI_VENDITA;
    ELSE
      raise_application_error (-20051, 'Il parametro '||p_tipo||' non e gestito. Sono validi solo i valori RICHIESTA, PROD_ACQ e AFFOLLAMENTO');
    END IF;
    RETURN c_stati_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
  END FU_GET_STATI_VENDITA;

--- --------------------------------------------------------------------------------------------
-- FUNZIONE    FU_GET_STATI_VENDITA_PROD
--
-- DESCRIZIONE: Ritorna gli stati di vendita (descrizione breve e descrizione) del prodotto acquistato
--
-- REALIZZATORE  Michele Borgogno, Altran, Novembre 2009
--
--  MODIFICHE:
--
-- --------------------------------------------------------------------------------------------

FUNCTION FU_GET_STATI_VENDITA_PROD(p_tipo VARCHAR2, p_stato_ven CD_PRODOTTO_ACQUISTATO.STATO_DI_VENDITA%TYPE) RETURN C_STATO_VENDITA_PROD IS
    c_stati_return C_STATO_VENDITA_PROD;
    BEGIN
    IF (p_tipo = 'RICHIESTA') THEN
        OPEN c_stati_return FOR
        SELECT DESCR_BREVE AS ID, DESCRIZIONE AS VALUE FROM CD_STATO_DI_VENDITA
        WHERE FLG_INIZIALE = 'S';
    ELSIF (p_tipo = 'PROD_ACQ') THEN
        OPEN c_stati_return FOR
        SELECT DESCR_BREVE AS ID, DESCRIZIONE AS VALUE FROM CD_STATO_DI_VENDITA
   WHERE INSTR((SELECT STATI_SUCCESSIVI FROM CD_STATO_DI_VENDITA
            WHERE DESCR_BREVE = p_stato_ven),ID_STATO_VENDITA) > 0;
    ELSIF (p_tipo = 'AFFOLLAMENTO') THEN
        OPEN c_stati_return FOR
        SELECT DESCR_BREVE AS ID, DESCRIZIONE AS VALUE FROM CD_STATO_DI_VENDITA
        WHERE FLG_AFFOLLAMENTO = 'S';
    ELSE
      raise_application_error (-20051, 'Il parametro '||p_tipo||' non e gestito. Sono validi solo i valori RICHIESTA, PROD_ACQ e AFFOLLAMENTO');
    END IF;
    RETURN c_stati_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
  END FU_GET_STATI_VENDITA_PROD;

FUNCTION FU_GET_ATRII_DISPONIBILI(
                                  p_id_circuito CD_CIRCUITO.ID_CIRCUITO%TYPE,
                                  p_id_unita_temp CD_UNITA_MISURA_TEMP.ID_UNITA%TYPE,
                                  p_data_inizio CD_ATRIO_VENDITA.DATA_EROGAZIONE%TYPE,
                                  p_id_listino CD_CIRCUITO_ATRIO.ID_LISTINO%TYPE,
                                  p_id_prodotto_vendita CD_ATRIO_VENDITA.ID_PRODOTTO_VENDITA%TYPE)
                                   RETURN NUMBER IS
v_num_giorni NUMBER;
v_data_fine CD_PROIEZIONE.DATA_PROIEZIONE%TYPE;
v_num_atrii NUMBER;
    BEGIN
        v_num_giorni :=  PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio, p_id_unita_temp);
        v_data_fine := p_data_inizio + v_num_giorni -1;
        --dbms_output.put_line('Data Fine '||v_data_fine);
    SELECT COUNT(*)
    INTO v_num_atrii
    FROM CD_CIRCUITO_ATRIO, CD_ATRIO_VENDITA
    WHERE CD_ATRIO_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
    AND CD_ATRIO_VENDITA.DATA_EROGAZIONE BETWEEN p_data_inizio AND v_data_fine
    AND CD_ATRIO_VENDITA.FLG_ANNULLATO = 'N'
    AND CD_ATRIO_VENDITA.ID_CIRCUITO_ATRIO = CD_CIRCUITO_ATRIO.ID_CIRCUITO_ATRIO
    AND CD_CIRCUITO_ATRIO.ID_CIRCUITO = p_id_circuito
    AND CD_CIRCUITO_ATRIO.FLG_ANNULLATO = 'N'
    AND CD_CIRCUITO_ATRIO.ID_LISTINO = p_id_listino;
    RETURN v_num_atrii;
    EXCEPTION
      WHEN OTHERS THEN
      RAISE;
END FU_GET_ATRII_DISPONIBILI;


FUNCTION FU_GET_SALE_DISPONIBILI(
                                  p_id_circuito CD_CIRCUITO.ID_CIRCUITO%TYPE,
                                  p_id_unita_temp CD_UNITA_MISURA_TEMP.ID_UNITA%TYPE,
                                  p_data_inizio CD_SALA_VENDITA.DATA_EROGAZIONE%TYPE,
                                  p_id_listino CD_CIRCUITO_SALA.ID_LISTINO%TYPE,
                                  p_id_prodotto_vendita CD_SALA_VENDITA.ID_PRODOTTO_VENDITA%TYPE)
                                   RETURN NUMBER IS
v_num_giorni NUMBER;
v_data_fine CD_PROIEZIONE.DATA_PROIEZIONE%TYPE;
v_num_sale NUMBER;
    BEGIN
        SELECT PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio, p_id_unita_temp) INTO v_num_giorni FROM DUAL;
        v_data_fine := p_data_inizio + v_num_giorni -1;
    SELECT COUNT(*)
    INTO v_num_sale
    FROM CD_CIRCUITO_SALA, CD_SALA_VENDITA
    WHERE CD_SALA_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
    AND CD_SALA_VENDITA.DATA_EROGAZIONE BETWEEN p_data_inizio AND v_data_fine
    AND CD_SALA_VENDITA.FLG_ANNULLATO = 'N'
    AND CD_SALA_VENDITA.ID_CIRCUITO_SALA = CD_CIRCUITO_SALA.ID_CIRCUITO_SALA
    AND CD_CIRCUITO_SALA.ID_CIRCUITO = p_id_circuito
    AND CD_CIRCUITO_SALA.FLG_ANNULLATO = 'N'
    AND CD_CIRCUITO_SALA.ID_LISTINO = p_id_listino;
    RETURN v_num_sale;
    EXCEPTION
      WHEN OTHERS THEN
      RAISE;
END FU_GET_SALE_DISPONIBILI;

FUNCTION FU_GET_CINEMA_DISPONIBILI(
                                  p_id_circuito CD_CIRCUITO.ID_CIRCUITO%TYPE,
                                  p_id_unita_temp CD_UNITA_MISURA_TEMP.ID_UNITA%TYPE,
                                  p_data_inizio CD_CINEMA_VENDITA.DATA_EROGAZIONE%TYPE,
                                  p_id_listino CD_CIRCUITO_CINEMA.ID_LISTINO%TYPE,
                                  p_id_prodotto_vendita CD_CINEMA_VENDITA.ID_PRODOTTO_VENDITA%TYPE)
                                   RETURN NUMBER IS
v_num_giorni NUMBER;
v_data_fine CD_PROIEZIONE.DATA_PROIEZIONE%TYPE;
v_num_cinema NUMBER;
    BEGIN
        SELECT PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio, p_id_unita_temp) INTO v_num_giorni FROM DUAL;
        v_data_fine := p_data_inizio + v_num_giorni -1;
    SELECT COUNT(*)
    INTO v_num_cinema
    FROM CD_CIRCUITO_CINEMA, CD_CINEMA_VENDITA
    WHERE CD_CINEMA_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
    AND CD_CINEMA_VENDITA.DATA_EROGAZIONE BETWEEN p_data_inizio AND v_data_fine
    AND CD_CINEMA_VENDITA.FLG_ANNULLATO = 'N'
    AND CD_CINEMA_VENDITA.ID_CIRCUITO_CINEMA = CD_CIRCUITO_CINEMA.ID_CIRCUITO_CINEMA
    AND CD_CIRCUITO_CINEMA.ID_CIRCUITO = p_id_circuito
    AND CD_CIRCUITO_CINEMA.FLG_ANNULLATO = 'N'
    AND CD_CIRCUITO_CINEMA.ID_LISTINO = p_id_listino;
    RETURN v_num_cinema;
    EXCEPTION
      WHEN OTHERS THEN
      RAISE;
END FU_GET_CINEMA_DISPONIBILI;

--
--
-----------------------------------------------------------------------------------------------------
-- Funzione FU_GET_STATI_VEND_SUCC_VAL
--
-- DESCRIZIONE:  fonisce l'elenco degli stati di vendita (usato generalmente nelle combo)
-- aventi il campo "stati_successivi" valorizzato
--
-- OUTPUT: Resulset contenente i dati richiesti
--
-- REALIZZATORE: Daniela Spezia, Altran , Settembre 2009
--
--  MODIFICHE:
--
FUNCTION FU_GET_STATI_VEND_SUCC_VAL RETURN C_STATO_VENDITA_SELECT IS
    c_stati_return C_STATO_VENDITA_SELECT;
    BEGIN
    OPEN c_stati_return FOR
    SELECT DESCR_BREVE AS ID, DESCRIZIONE AS VALUE, DESCR_BREVE FROM CD_STATO_DI_VENDITA
        WHERE STATI_SUCCESSIVI IS NOT NULL;
    RETURN c_stati_return;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
         raise_application_error (-20028,
                                     'Funzione FU_GET_STATI_VEND_SUCC_VAL in errore: '
                                  || SQLERRM
                                 );
  END FU_GET_STATI_VEND_SUCC_VAL;
--

function fu_calcola_affollamento(p_tipo_affollamento in varchar2 ,p_id_prodotto_vendita  in cd_prodotto_acquistato.id_prodotto_vendita%type, p_stato_di_vendita in cd_prodotto_acquistato.stato_di_vendita%type,p_data_inizio cd_prodotto_acquistato.data_inizio%type, p_data_fine cd_prodotto_acquistato.data_fine%type) return R_DISPONIBILITA is
/******************************************************************************
   NAME:        fu_calcola_affollamento
   PURPOSE:     Calcola  l'affollamento  per:
                proiezione
                break
                break di vendita
                restituiece la disponibilita minima e massima.

   REVISIONS:
   Ver        Date        Author            Description
   ---------  ----------  ---------------   ---------------
   1.0        25/09/2009  Mauro Viel Altran  Settembre 2009

   Modifiche: 15/02/2010 (MV01) Mauro Viel Altran Febbraio 2010
                          Nel caso di break_vendita l'assegnato sul break di vendita
                          viene prelevato dal break perche nel break di vendita il campo
                          secondi assenati non ha mai un valore maggiore di zero.


             19/02/2010 Mauro Viel Altran Febbraio 2010.
             Annullata la precedente modifica del 15/02/2010
******************************************************************************/
v_disp R_DISPONIBILITA;
BEGIN

 if instr('BREAK_VENDITA, BREAK, PROIEZIONE', p_tipo_affollamento) > 0 then
    --Disponibilita break_vendita
    if  p_tipo_affollamento = 'BREAK_VENDITA' then
            select  min(fv_breakv.secondi_assegnati-sum(coef.durata)) as disponibilita_minima,
                    max(fv_breakv.secondi_assegnati-sum(coef.durata)) as disponibilita_massima
            into v_disp.a_disponibilita_minima,v_disp.a_disponibilita_massima
            from 
            cd_prodotto_acquistato pa1,
            cd_formato_acquistabile fa,
            cd_coeff_cinema coef,
            cd_comunicato com,
            (
                    --MV01
                    select id_break_vendita,secondi_assegnati--,id_prodotto_acquistato--,stato_di_vendita--,durata
                    from  
                    cd_prodotto_vendita pv,
                    cd_break_vendita brkv
                    where pv.id_prodotto_vendita =p_id_prodotto_vendita
                    and   brkv.id_prodotto_vendita =pv.id_prodotto_vendita
                    and brkv.FLG_ANNULLATO = 'N'
                    and brkv.data_erogazione between p_data_inizio and p_data_fine--*/


                    /*select brkv.id_break_vendita,br.secondi_nominali as secondi_assegnati
                    from  cd_break_vendita brkv ,
                    cd_prodotto_vendita pv,
                    cd_break br,
                    cd_circuito_break cir_bre
                    where   cir_bre.id_circuito_break =  brkv.id_circuito_break
                    and     brkv.FLG_ANNULLATO = 'N'
                    and     cir_bre.FLG_ANNULLATO = 'N'
                    and     br.id_break = cir_bre.id_break
                    and     br.FLG_ANNULLATO = 'N'
                    and     pv.id_prodotto_vendita =p_id_prodotto_vendita
                    and     brkv.id_prodotto_vendita =pv.id_prodotto_vendita
                    and brkv.data_erogazione between p_data_inizio and p_data_fine*/
                    --MV01


            )fv_breakv
            where com.id_break_vendita = fv_breakv.id_break_vendita
            and com.FLG_ANNULLATO = 'N'
            and com.FLG_SOSPESO = 'N'
            and com.COD_DISATTIVAZIONE IS NULL
            and   pa1.id_formato = fa.id_formato
            and   fa.id_coeff = coef.id_coeff
            and   pa1.id_prodotto_acquistato = com.id_prodotto_acquistato
            and   pa1.FLG_ANNULLATO = 'N'
            and   pa1.FLG_SOSPESO = 'N'
            and   pa1.COD_DISATTIVAZIONE IS NULL
            and   instr(p_stato_di_vendita, pa1.stato_di_vendita)>0
            group by fv_breakv.secondi_assegnati,fv_breakv.id_break_vendita;
            if v_disp.a_disponibilita_minima is null then

                --MV01

                select min(secondi_assegnati) as disponibilita_minima,
                max(secondi_assegnati) as disponibilita_massima
                into v_disp.a_disponibilita_minima,v_disp.a_disponibilita_massima
                from  cd_prodotto_vendita pv,
                cd_break_vendita brkv
                where pv.id_prodotto_vendita =p_id_prodotto_vendita
                and   brkv.id_prodotto_vendita =pv.id_prodotto_vendita
                and brkv.FLG_ANNULLATO = 'N'
                and brkv.data_erogazione between p_data_inizio and p_data_fine;--*/

                /*select min(br.secondi_nominali) disponibilita_minima,
                max(br.secondi_nominali) disponibilita_massima
                into v_disp.a_disponibilita_minima,v_disp.a_disponibilita_massima
                from  cd_break_vendita brkv ,
                cd_prodotto_vendita pv,
                cd_break br,
                cd_circuito_break cir_bre
                where   cir_bre.id_circuito_break =  brkv.id_circuito_break
                and     cir_bre.FLG_ANNULLATO = 'N'
                and     br.id_break = cir_bre.id_break
                and     br.FLG_ANNULLATO = 'N'
                and     pv.id_prodotto_vendita =p_id_prodotto_vendita
                and     brkv.id_prodotto_vendita =pv.id_prodotto_vendita
                and     brkv.FLG_ANNULLATO = 'N'
                and brkv.data_erogazione between p_data_inizio and p_data_fine; */

                --MV01


            end if;
   else
            --Effettuo il controllo sul break
            if  p_tipo_affollamento = 'BREAK' then
                select min(fv_break.secondi_nominali -sum(coef.durata)) disponibilita_minima,
                       max(fv_break.secondi_nominali -sum(coef.durata)) disponibilita_massima
                into v_disp.a_disponibilita_minima,v_disp.a_disponibilita_massima
                from cd_prodotto_acquistato pa1, cd_formato_acquistabile fa,cd_coeff_cinema coef,cd_comunicato com, 
                (
                        select brkv.id_break_vendita,br.secondi_nominali,br.id_break--id_prodotto_acquistato,stato_di_vendita
                        from 
                        cd_break br,
                        cd_circuito_break cir_bre,
                        cd_break_vendita brkv
                        where   brkv.id_prodotto_vendita =p_id_prodotto_vendita
                        and     brkv.data_erogazione between p_data_inizio and p_data_fine
                        and     brkv.FLG_ANNULLATO = 'N'
                        and     cir_bre.id_circuito_break =  brkv.id_circuito_break
                        and     cir_bre.FLG_ANNULLATO = 'N'
                        and     br.id_break = cir_bre.id_break
                        and     br.FLG_ANNULLATO = 'N'
                )fv_break
                where com.id_break = fv_break.id_break
                and com.FLG_ANNULLATO = 'N'
                and com.FLG_SOSPESO = 'N'
                and com.COD_DISATTIVAZIONE IS NULL
                and pa1.ID_PRODOTTO_ACQUISTATO = com.ID_PRODOTTO_ACQUISTATO
                and pa1.id_formato = fa.id_formato
                and pa1.FLG_ANNULLATO = 'N'
                and pa1.FLG_SOSPESO = 'N'
                and pa1.COD_DISATTIVAZIONE is null
                and   fa.id_coeff = coef.id_coeff
                and   instr(p_stato_di_vendita, pa1.stato_di_vendita)>0
                group by fv_break.id_break, fv_break.secondi_nominali;
                if v_disp.a_disponibilita_minima is null then
                    select min(br.secondi_nominali) disponibilita_minima,
                    max(br.secondi_nominali) disponibilita_massima
                    into v_disp.a_disponibilita_minima,v_disp.a_disponibilita_massima
                    from  
                    cd_prodotto_vendita pv,
                    cd_break br,
                    cd_break_vendita brkv ,
                    cd_circuito_break cir_bre
                    where   cir_bre.id_circuito_break =  brkv.id_circuito_break
                    and     cir_bre.FLG_ANNULLATO = 'N'
                    and     br.id_break = cir_bre.id_break
                    and     br.FLG_ANNULLATO = 'N'
                    and     pv.id_prodotto_vendita =p_id_prodotto_vendita
                    and     brkv.id_prodotto_vendita =pv.id_prodotto_vendita
                    and     brkv.FLG_ANNULLATO = 'N'
                    and brkv.data_erogazione between p_data_inizio and p_data_fine;
                end if;
            else
                --Effettuo il controllo sulla proiezione
                if  p_tipo_affollamento = 'PROIEZIONE' then
                    select min(brk.tempo_proiezione - sum(coef.durata)) as disponibilita_minima, max(brk.tempo_proiezione - sum(coef.durata)) as disponibilita_massima
                    into v_disp.a_disponibilita_minima,v_disp.a_disponibilita_massima
                    from
                        cd_prodotto_acquistato pa1, cd_formato_acquistabile fa,cd_coeff_cinema coef, cd_comunicato com, cd_break br,
                    (select sum(br1.secondi_nominali) as tempo_proiezione, br1.id_proiezione--, cir_bre1.id_circuito_break --coef.durata, br1.ID_PROIEZIONE
                        from
                        cd_break br1,
                        (
                        select br.id_proiezione,secondi_nominali
                        from  
                        cd_break br,
                        cd_circuito_break cir_bre,
                        cd_break_vendita brkv
                        where   brkv.id_prodotto_vendita = p_id_prodotto_vendita
                        and     brkv.data_erogazione between p_data_inizio and p_data_fine
                        and     brkv.FLG_ANNULLATO = 'N'
                        and     cir_bre.id_circuito_break =  brkv.id_circuito_break
                        and     cir_bre.FLG_ANNULLATO = 'N'
                        and     br.id_break = cir_bre.id_break
                        and     br.FLG_ANNULLATO = 'N'
                         )proiez
                        where br1.ID_PROIEZIONE = proiez.ID_PROIEZIONE
                        and   br1.FLG_ANNULLATO = 'N'
                        --    La durata dei break di tipo frame screen e top spot non vanno
                        --    sommati al tempo di proiezione
                        and   br1.ID_TIPO_BREAK != 4
                        and   br1.ID_TIPO_BREAK != 5
                        group by br1.ID_PROIEZIONE
                        ) brk
                        where br.ID_PROIEZIONE = brk.ID_PROIEZIONE
                        and   br.FLG_ANNULLATO = 'N'
                        and   com.id_break = br.id_break
                        and   com.FLG_ANNULLATO = 'N'
                        and   com.FLG_SOSPESO = 'N'
                        and   com.COD_DISATTIVAZIONE IS NULL
                        and   pa1.id_prodotto_acquistato = com.id_prodotto_acquistato
                        and   pa1.FLG_ANNULLATO = 'N'
                        and   pa1.FLG_SOSPESO = 'N'
                        and   pa1.COD_DISATTIVAZIONE IS NULL
                        and   pa1.id_formato = fa.id_formato
                        and   fa.id_coeff = coef.id_coeff
                        and   instr(p_stato_di_vendita, pa1.stato_di_vendita)>0
                        group by br.id_proiezione,tempo_proiezione;
                     --
                     if v_disp.a_disponibilita_minima is null then
                         select min(disp) as disponibilita_minima,
                         max(disp) as disponibilita_massima
                         into v_disp.a_disponibilita_minima,v_disp.a_disponibilita_massima
                            from(
                            select sum(secondi_nominali) as disp
                                from cd_break,(select id_proiezione
                                     from  
                                     cd_break br,
                                     cd_break_vendita brkv,
                                     cd_circuito_break cir_bre
                                     where   cir_bre.id_circuito_break =  brkv.id_circuito_break
                                     and     cir_bre.FLG_ANNULLATO = 'N'
                                     and     br.id_break = cir_bre.id_break
                                     and     br.FLG_ANNULLATO = 'N'
                                     and     brkv.id_prodotto_vendita =p_id_prodotto_vendita
                                     and     brkv.FLG_ANNULLATO = 'N'
                                     --and     pv.id_prodotto_vendita   =brkv.id_prodotto_vendita
                                     and     brkv.data_erogazione between p_data_inizio and p_data_fine
                                )fv_break
                            where cd_break.ID_PROIEZIONE = fv_break.id_proiezione
                            group by cd_break.ID_PROIEZIONE
                        );
                    end if;
                end if;
            end if;
   end if;
 else
    raise_application_error (-20050,'Il parametro p_tipo_affollamento puo essere associato  solo ai  valori "BREAK_VENDITA", "BREAK", "PROIEZIONE"');
 end if;
 return v_disp;
 EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RAISE;
     WHEN OTHERS THEN
       RAISE;
END fu_calcola_affollamento;



function fu_verifica_affollamento(p_id_prodotto_acquistato cd_prodotto_acquistato.id_prodotto_acquistato%type, p_stato_di_vendita cd_prodotto_acquistato.stato_di_vendita%type )  return number is
/******************************************************************************
   NAME:        fu_verifica_affollamento
   PURPOSE:     Verifica l'affollamento verificandolo per:
                proiezione
                break
                break di vendita
                se e stato sforato l'affollamento di proiezione termina i controlli  e restituisce il valore 1
                altrimenti verifica l'affollamento per  i break
                se sfora il diponibile per break termina i controlli  e restituisce il valore 2
               altrimenti verifica l'affollamento per i prodotti di vendita
               se sfora il diponibile allora i controlli e solleva e restituisce il valore 3
               Altrimenti se esite disponibilita 0


   REVISIONS:
   Ver        Date        Author            Description
   ---------  ----------  ---------------   ---------------
   1.0        25/09/2009  Mauro Viel Altran  Settembre 2009


******************************************************************************/

v_disp_minima_break_vendita number;
v_disp_minima_break number;
v_disp_minima_proiezione number;
v_id_prodotto_vendita cd_prodotto_vendita.id_prodotto_vendita%type;
v_durata number;
v_max_durata cd_coeff_cinema.DURATA%type;
v_return number := 0;
BEGIN

    select pa.id_prodotto_vendita,coef.durata
    into v_id_prodotto_vendita,v_durata
    from cd_prodotto_acquistato pa,cd_formato_acquistabile fa,cd_coeff_cinema coef
    where pa.id_prodotto_acquistato = p_id_prodotto_acquistato
    and   pa.id_formato = fa.id_formato
    and   fa.id_coeff = coef.id_coeff;

    select max(durata)
    into  v_max_durata
    from cd_coeff_cinema;


    --Disponibilita break_vendita
    select  min(fv_breakv.secondi_assegnati-sum(coef.durata)) as disponibilita_minima into v_disp_minima_break_vendita--, max(fv_breakv.secondi_vendibili-sum(coef.durata)) as disponibilita_massima-- diponibilita_break_vendita--,fv_breakv.id_break_vendita
    from cd_prodotto_acquistato pa,
    cd_formato_acquistabile fa,
    cd_coeff_cinema coef,
    cd_comunicato com,
    (

            select id_break_vendita,secondi_assegnati--,durata
            from  
            cd_prodotto_vendita pv,
            cd_break_vendita brkv
            where brkv.id_prodotto_vendita = v_id_prodotto_vendita
            and   brkv.id_prodotto_vendita = pv.id_prodotto_vendita


    )fv_breakv
    where com.id_break_vendita = fv_breakv.id_break_vendita
    and   pa.id_formato = fa.id_formato
    and   fa.id_coeff = coef.id_coeff
    and   pa.id_prodotto_acquistato = com.id_prodotto_acquistato
    and   instr(p_stato_di_vendita, pa.stato_di_vendita)>0
    group by fv_breakv.secondi_assegnati,fv_breakv.id_break_vendita;


    if nvl(v_disp_minima_break_vendita,v_max_durata)-v_durata < 0 then  --esiste almeno un break di vendita senza disponibilita
         --Effettuo il controllo sul break

            select min(fv_break.secondi_nominali -sum(coef.durata)) disponibilita_minima into v_disp_minima_break
            from cd_prodotto_acquistato pa, cd_formato_acquistabile fa,cd_coeff_cinema coef,cd_comunicato com,
            (
                    select id_break_vendita,br.secondi_nominali,br.id_break
                    from
                    cd_prodotto_vendita pv,
                    cd_break br,
                    cd_circuito_break cir_bre,
                    cd_break_vendita brkv 
                    where   cir_bre.id_circuito_break =  brkv.id_circuito_break
                    and     br.id_break = cir_bre.id_break
                    and     brkv.id_prodotto_vendita =v_id_prodotto_vendita
            )fv_break
            where com.id_break_vendita = fv_break.id_break_vendita
            and   pa.id_formato = fa.id_formato
            and   fa.id_coeff = coef.id_coeff
            and   pa.id_prodotto_acquistato = com.id_prodotto_acquistato
            and   instr(p_stato_di_vendita, pa.stato_di_vendita)>0
            group by fv_break.secondi_nominali,fv_break.id_break;
          if nvl(v_disp_minima_break,v_max_durata)-v_durata <=0 then--esiste almeno un break  senza disponibilita
            --Effettuo il controllo sulla proiezione
               select min(disponibilita) as disponibilita_minima into v_disp_minima_proiezione
               from
               (
                    select sum(secondi_nominali)-sum(disponibilita) as disponibilita from  --,id_proiezionefrom
                    (
                        select br1.secondi_nominali, sum(coef.durata) disponibilita ,br1.id_proiezione
                        from cd_prodotto_acquistato pa1, cd_formato_acquistabile fa,cd_coeff_cinema coef,cd_break br1, cd_comunicato com,
                        (
                                select id_break_vendita,br.secondi_nominali,br.id_proiezione
                                from  
                                cd_prodotto_acquistato pa,
                                cd_prodotto_vendita pv,
                                cd_break br,
                                cd_circuito_break cir_bre,
                                cd_break_vendita brkv
                                where   cir_bre.id_circuito_break =  brkv.id_circuito_break
                                and     br.id_break = cir_bre.id_break
                                and     brkv.id_prodotto_vendita =v_id_prodotto_vendita
                                --and     pa.id_prodotto_vendita   =v_id_prodotto_vendita
                        )fv_break
                        where com.id_break_vendita = fv_break.id_break_vendita
                        and   pa1.id_formato = fa.id_formato
                        and   fa.id_coeff = coef.id_coeff
                        and   pa1.id_prodotto_acquistato = com.id_prodotto_acquistato
                        and   instr(p_stato_di_vendita, pa1.stato_di_vendita)>0
                        and   fv_break.id_proiezione = br1.id_proiezione
                        group by br1.secondi_nominali,br1.id_proiezione--,coef.durata
                )
                group by id_proiezione
            );


            if nvl(v_disp_minima_proiezione,v_max_durata)-v_durata < 0 then
                 v_return := 3;
            else
                v_return := 2;
            end if;
          else
                v_return := 1;
          end if;
    end if;
    return v_return;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RAISE;
     WHEN OTHERS THEN
       RAISE;
END fu_verifica_affollamento;

function fu_affollamento(p_tipo_affollamento in varchar2 ,p_id_prodotto_vendita  in cd_prodotto_acquistato.id_prodotto_vendita%type, p_stato_di_vendita in cd_prodotto_acquistato.stato_di_vendita%type, p_data_inizio cd_prodotto_acquistato.data_inizio%type, p_data_fine cd_prodotto_acquistato.data_fine%type) return VARCHAR2 is
--v_disp C_DISPONIBILITA;
v_disp_record R_DISPONIBILITA;
BEGIN
    v_disp_record := fu_calcola_affollamento(p_tipo_affollamento,p_id_prodotto_vendita, p_stato_di_vendita,p_data_inizio, p_data_fine);

     RETURN v_disp_record.a_disponibilita_minima||'|'||v_disp_record.a_disponibilita_massima;
   EXCEPTION
     WHEN OTHERS THEN
       RAISE;
end fu_affollamento;

FUNCTION FU_GET_ID_STATO_VENDITA(p_descr_breve CD_STATO_DI_VENDITA.DESCR_BREVE%TYPE) RETURN CD_STATO_DI_VENDITA.ID_STATO_VENDITA%TYPE IS

id_stato CD_STATO_DI_VENDITA.ID_STATO_VENDITA%TYPE;

BEGIN

    SELECT ID_STATO_VENDITA INTO id_stato
        FROM CD_STATO_DI_VENDITA
        WHERE DESCR_BREVE = p_descr_breve;

RETURN id_stato;
END FU_GET_ID_STATO_VENDITA;

-----------------------------------------------------------------------------------------------------
-- Function FU_GET_NUM_SCHERMI
--
-- DESCRIZIONE: Restituisce il numero di schermi su cui esistono break di vendita nel periodo indicato
--
-- OPERAZIONI:
--
-- INPUT:  p_id_prodotto_vendita: Id del prodotto di vendita
--         p_data_inizio: Data di inizio del periodo di vendita
--         p_data_fine: Data di fine del periodo di vendita
--         p_id_tipo_break: Tipo di break cercato
-- OUTPUT: Numero di schermi
--
-- REALIZZATORE: Simone Bottani, Altran, Ottobre 2009
--
--  MODIFICHE: Mauro Viel Altran, Febbraio 2011 inserita la condizione  AND (P_VEN.FLG_SEGUI_IL_FILM ='N' OR CIN.FLG_VIRTUALE = 'S');
--                                  per la gestione di segui il fillm
--
-------------------------------------------------------------------------------------------------

FUNCTION FU_GET_NUM_SCHERMI(p_id_prodotto_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE, p_data_inizio CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE, p_data_fine CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE) RETURN NUMBER IS
v_num_schermi NUMBER;
 BEGIN
    --dbms_output.PUT_LINE('FU_GET_NUM_SCHERMI');
    SELECT COUNT(DISTINCT(SC.ID_SCHERMO))
    INTO v_num_schermi
    FROM  CD_PRODOTTO_VENDITA P_VEN, CD_CINEMA CIN, CD_SALA S, CD_SCHERMO SC, CD_PROIEZIONE PR, CD_BREAK BRK, CD_CIRCUITO_BREAK C_BRK, CD_BREAK_VENDITA BRK_V
    WHERE  BRK_V.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
    AND BRK_V.FLG_ANNULLATO = 'N'
    AND BRK_V.DATA_EROGAZIONE BETWEEN p_data_inizio AND p_data_fine
    AND P_VEN.ID_PRODOTTO_VENDITA = BRK_V.ID_PRODOTTO_VENDITA
    AND c_brk.ID_CIRCUITO_BREAK = BRK_V.ID_CIRCUITO_BREAK
    AND c_brk.FLG_ANNULLATO='N'
    AND brk.ID_BREAK = c_brk.ID_BREAK
    AND BRK.FLG_ANNULLATO = 'N'
    and brk.FLG_ANNULLATO = 'N'
    AND PR.ID_PROIEZIONE = BRK.ID_PROIEZIONE
    AND PR.FLG_ANNULLATO = 'N'
    and sc.id_schermo = pr.ID_SCHERMO
    and sc.FLG_ANNULLATO = 'N'
    AND S.ID_SALA = SC.ID_SALA
    AND S.FLG_ANNULLATO = 'N'
    AND S.FLG_VISIBILE = 'S'
    AND CIN.ID_CINEMA = S.ID_CINEMA
    AND CIN.FLG_ANNULLATO = 'N'
    AND (P_VEN.ID_TARGET IS NULL OR CIN.FLG_VIRTUALE = 'S')
    AND (P_VEN.FLG_SEGUI_IL_FILM ='N' OR CIN.FLG_VIRTUALE = 'S');
    RETURN v_num_schermi;
EXCEPTION
        WHEN OTHERS THEN
		RAISE_APPLICATION_ERROR(-20001, 'FUNZIONE FU_GET_NUM_SCHERMI: ERRORE '||SQLERRM);
END FU_GET_NUM_SCHERMI;

--  MODIFICHE: Mauro Viel Altran, Febbraio 2011 inserita la condizione  AND (P_VEN.FLG_SEGUI_IL_FILM ='N' OR CIN.FLG_VIRTUALE = 'S');
--  

FUNCTION FU_GET_NUM_AMBIENTI(p_id_prodotto_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE, p_data_inizio CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE, p_data_fine CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE) RETURN NUMBER IS
v_num_schermi NUMBER;
v_num_ambienti NUMBER;
v_luogo CD_LUOGO.ID_LUOGO%TYPE;
 BEGIN

   BEGIN
   SELECT CD_LUOGO.ID_LUOGO
   INTO v_luogo
     FROM CD_LUOGO, CD_LUOGO_TIPO_PUBB, CD_PRODOTTO_VENDITA, CD_PRODOTTO_PUBB
     WHERE CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
     AND CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB = CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
     AND CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
     AND CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO;
   EXCEPTION
       WHEN NO_DATA_FOUND THEN
       v_luogo := 6;
   END;      
    --
    IF v_luogo = 1 THEN
        SELECT COUNT(DISTINCT(SC.ID_SCHERMO))
        INTO v_num_ambienti
        FROM  CD_CINEMA CIN, CD_SALA S, CD_SCHERMO SC, CD_PRODOTTO_VENDITA P_VEN, CD_PROIEZIONE PR, CD_BREAK_VENDITA BRK_V, CD_BREAK BRK, CD_CIRCUITO_BREAK C_BRK
        WHERE BRK_V.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
        AND BRK_V.DATA_EROGAZIONE BETWEEN p_data_inizio AND p_data_fine
        AND BRK_V.FLG_ANNULLATO = 'N'
        AND c_brk.ID_CIRCUITO_BREAK = BRK_V.ID_CIRCUITO_BREAK
        AND c_brk.FLG_ANNULLATO='N'
        AND brk.ID_BREAK = c_brk.ID_BREAK
        and brk.FLG_ANNULLATO = 'N'
        AND PR.ID_PROIEZIONE = BRK.ID_PROIEZIONE
        AND PR.FLG_ANNULLATO = 'N'
        AND P_VEN.ID_PRODOTTO_VENDITA = BRK_V.ID_PRODOTTO_VENDITA
        AND P_VEN.FLG_ANNULLATO = 'N'
        AND sc.id_schermo = pr.ID_SCHERMO
        AND sc.FLG_ANNULLATO = 'N'
        AND s.ID_SALA = sc.ID_SALA
        AND s.FLG_ANNULLATO = 'N'
        AND s.FLG_VISIBILE = 'S'
        AND CIN.ID_CINEMA = S.ID_CINEMA
        AND CIN.FLG_ANNULLATO = 'N'
        AND (P_VEN.ID_TARGET IS NULL OR CIN.FLG_VIRTUALE = 'S')
        AND (P_VEN.FLG_SEGUI_IL_FILM ='N' OR CIN.FLG_VIRTUALE = 'S');
    ELSIF v_luogo = 2 THEN
        SELECT COUNT(DISTINCT(S.ID_SALA))
        INTO v_num_ambienti
        FROM  CD_SALA S, CD_PRODOTTO_VENDITA PV,CD_SALA_VENDITA SV, CD_CIRCUITO_SALA CS
        WHERE PV.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
        AND PV.FLG_ANNULLATO = 'N'
        AND SV.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
        AND SV.FLG_ANNULLATO = 'N'
        AND SV.DATA_EROGAZIONE BETWEEN p_data_inizio AND p_data_fine
        AND CS.ID_CIRCUITO_SALA = SV.ID_CIRCUITO_SALA
        AND CS.FLG_ANNULLATO = 'N'
        AND S.ID_SALA = CS.ID_SALA
        AND S.FLG_ANNULLATO='N'
        AND S.FLG_VISIBILE = 'S';
    ELSIF v_luogo = 3 THEN
        SELECT COUNT(DISTINCT(S.ID_ATRIO))
        INTO v_num_ambienti
        FROM  CD_ATRIO S, CD_PRODOTTO_VENDITA PV,CD_ATRIO_VENDITA AV, CD_CIRCUITO_ATRIO CS
        WHERE PV.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
        AND PV.FLG_ANNULLATO = 'N'
        AND AV.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
        AND AV.FLG_ANNULLATO = 'N'
        AND AV.DATA_EROGAZIONE BETWEEN p_data_inizio AND p_data_fine
        AND CS.ID_CIRCUITO_ATRIO = AV.ID_CIRCUITO_ATRIO
        AND CS.FLG_ANNULLATO = 'N'
        AND S.ID_ATRIO = CS.ID_ATRIO
        AND S.FLG_ANNULLATO='N';
    ELSIF v_luogo = 4 THEN
        SELECT COUNT(DISTINCT(S.ID_CINEMA))
        INTO v_num_ambienti
        FROM  CD_CINEMA S, CD_PRODOTTO_VENDITA PV,CD_CINEMA_VENDITA CV, CD_CIRCUITO_CINEMA CS
        WHERE PV.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
        AND PV.FLG_ANNULLATO = 'N'
        AND CV.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
        AND CV.FLG_ANNULLATO = 'N'
        AND CV.DATA_EROGAZIONE BETWEEN p_data_inizio AND p_data_fine
        AND CS.ID_CIRCUITO_CINEMA = CV.ID_CIRCUITO_CINEMA
        AND CS.FLG_ANNULLATO = 'N'
        AND S.ID_CINEMA = CS.ID_CINEMA
        AND S.FLG_ANNULLATO='N';
    ELSIF v_luogo = 6 THEN
        v_num_ambienti := 1;
    END IF;
    RETURN v_num_ambienti;    
EXCEPTION
        WHEN OTHERS THEN
		RAISE_APPLICATION_ERROR(-20001, 'FUNZIONE FU_GET_NUM_SCHERMI: ERRORE '||SQLERRM);
END FU_GET_NUM_AMBIENTI;

FUNCTION FU_GET_NUM_AMBIENTI_LIBERA(p_id_prodotto_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE, p_data_inizio CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE, p_data_fine CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE, p_ambienti VARCHAR2) RETURN NUMBER IS
v_num_schermi NUMBER;
v_num_ambienti NUMBER;
v_luogo CD_LUOGO.ID_LUOGO%TYPE;
 BEGIN

   BEGIN
   SELECT CD_LUOGO.ID_LUOGO
   INTO v_luogo
     FROM CD_LUOGO, CD_LUOGO_TIPO_PUBB, CD_PRODOTTO_VENDITA, CD_PRODOTTO_PUBB
     WHERE CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
     AND CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB = CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
     AND CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
     AND CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO;
   EXCEPTION
       WHEN NO_DATA_FOUND THEN
       v_luogo := 6;
   END;      
    --
    IF v_luogo = 1 THEN
        SELECT COUNT(DISTINCT(SC.ID_SCHERMO))
        INTO v_num_ambienti
        FROM  CD_SCHERMO SC, CD_PROIEZIONE PR, CD_PRODOTTO_VENDITA P_VEN, CD_BREAK_VENDITA BRK_V, CD_BREAK BRK, CD_CIRCUITO_BREAK C_BRK
        WHERE P_VEN.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
        AND P_VEN.FLG_ANNULLATO = 'N'
        AND BRK_V.ID_PRODOTTO_VENDITA = P_VEN.ID_PRODOTTO_VENDITA
        AND BRK_V.FLG_ANNULLATO = 'N'
        AND BRK_V.DATA_EROGAZIONE BETWEEN p_data_inizio AND p_data_fine
        AND BRK.FLG_ANNULLATO = 'N'
        AND c_brk.ID_CIRCUITO_BREAK = BRK_V.ID_CIRCUITO_BREAK
        AND c_brk.FLG_ANNULLATO='N'
        AND brk.ID_BREAK = c_brk.ID_BREAK
        and brk.FLG_ANNULLATO = 'N'
        AND PR.ID_PROIEZIONE = BRK.ID_PROIEZIONE
        AND PR.FLG_ANNULLATO = 'N'
        AND sc.id_schermo = pr.ID_SCHERMO
        AND sc.FLG_ANNULLATO = 'N'
        AND instr ('|'||p_ambienti||'|','|'||LPAD(SC.ID_SCHERMO,5,'0')||'|') >= 1;
    ELSIF v_luogo = 2 THEN
        SELECT COUNT(DISTINCT(S.ID_SALA))
        INTO v_num_ambienti
        FROM  CD_SALA S, CD_PRODOTTO_VENDITA PV,CD_SALA_VENDITA SV, CD_CIRCUITO_SALA CS
        WHERE PV.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
        AND PV.FLG_ANNULLATO = 'N'
        AND SV.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
        AND SV.FLG_ANNULLATO = 'N'
        AND SV.DATA_EROGAZIONE BETWEEN p_data_inizio AND p_data_fine
        AND CS.ID_CIRCUITO_SALA = SV.ID_CIRCUITO_SALA
        AND CS.FLG_ANNULLATO = 'N'
        AND S.ID_SALA = CS.ID_SALA
        AND S.FLG_ANNULLATO='N'
        AND instr ('|'||p_ambienti||'|','|'||LPAD(S.ID_SALA,5,'0')||'|') >= 1;
    ELSIF v_luogo = 3 THEN
        SELECT COUNT(DISTINCT(A.ID_ATRIO))
        INTO v_num_ambienti
        FROM  CD_ATRIO A, CD_PRODOTTO_VENDITA PV,CD_ATRIO_VENDITA AV, CD_CIRCUITO_ATRIO CS
        WHERE PV.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
        AND PV.FLG_ANNULLATO = 'N'
        AND AV.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
        AND AV.FLG_ANNULLATO = 'N'
        AND AV.DATA_EROGAZIONE BETWEEN p_data_inizio AND p_data_fine
        AND CS.ID_CIRCUITO_ATRIO = AV.ID_CIRCUITO_ATRIO
        AND CS.FLG_ANNULLATO = 'N'
        AND A.ID_ATRIO = CS.ID_ATRIO
        AND A.FLG_ANNULLATO='N'
        AND instr ('|'||p_ambienti||'|','|'||LPAD(A.ID_ATRIO,5,'0')||'|') >= 1;
    ELSIF v_luogo = 4 THEN
        SELECT COUNT(DISTINCT(C.ID_CINEMA))
        INTO v_num_ambienti
        FROM  CD_CINEMA C, CD_PRODOTTO_VENDITA PV,CD_CINEMA_VENDITA CV, CD_CIRCUITO_CINEMA CS
        WHERE PV.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
        AND PV.FLG_ANNULLATO = 'N'
        AND CV.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
        AND CV.FLG_ANNULLATO = 'N'
        AND CV.DATA_EROGAZIONE BETWEEN p_data_inizio AND p_data_fine
        AND CS.ID_CIRCUITO_CINEMA = CV.ID_CIRCUITO_CINEMA
        AND CS.FLG_ANNULLATO = 'N'
        AND C.ID_CINEMA = CS.ID_CINEMA
        AND C.FLG_ANNULLATO='N'
        AND instr ('|'||p_ambienti||'|','|'||LPAD(C.ID_CINEMA,5,'0')||'|') >= 1;
    ELSIF v_luogo = 6 THEN
        v_num_ambienti := 1;
    END IF;
    RETURN v_num_ambienti;    
EXCEPTION
        WHEN OTHERS THEN
		RAISE_APPLICATION_ERROR(-20001, 'FUNZIONE FU_GET_NUM_AMBIENTI_LIBERA: ERRORE '||SQLERRM);
END FU_GET_NUM_AMBIENTI_LIBERA;

-----------------------------------------------------------------------------------------------------
-- Function FU_GET_AREA_NIELSEN
--
-- DESCRIZIONE: Restituisce le aree nielsen presenti
--
-- OPERAZIONI:
--
-- INPUT:
-- OUTPUT: recordset con le aree nielsen trovate
--
-- REALIZZATORE: Simone Bottani, Altran, Novembre 2009
--
--  MODIFICHE:
--
-------------------------------------------------------------------------------------------------
FUNCTION FU_GET_AREE_NIELSEN(p_id_prodotto_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE, p_id_circuito CD_PRODOTTO_VENDITA.ID_CIRCUITO%TYPE,p_data_inizio CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE, p_data_fine CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE) RETURN C_AREA_NIELSEN IS
v_aree_nielsen C_AREA_NIELSEN;
BEGIN

   --SELECT NOME_REGIONE FROM CD_REGIONE WHERE
   OPEN v_aree_nielsen FOR
      SELECT ID_AREA_NIELSEN, DESC_AREA,
      FU_GET_NUM_SCHERMI_NIELSEN(ID_AREA_NIELSEN, p_id_prodotto_vendita, p_id_circuito, p_data_inizio, p_data_fine) AS NUM_SCHERMI,
      FU_GET_REGIONI_NIELSEN(ID_AREA_NIELSEN) AS REGIONI
      FROM CD_AREA_NIELSEN;
   RETURN  v_aree_nielsen;
EXCEPTION
        WHEN OTHERS THEN
		RAISE_APPLICATION_ERROR(-20001, 'FUNZIONE FU_GET_AREA_NIELSEN: ERRORE '||SQLERRM);
END FU_GET_AREE_NIELSEN;

-----------------------------------------------------------------------------------------------------
-- Function FU_GET_NUM_SCHERMI_NIELSEN
--
-- DESCRIZIONE: Restituisce il numero di schermi per un'area nielsen
--
-- OPERAZIONI:
--
-- INPUT:  p_id_area_nielsen: area nielsen
-- OUTPUT: numero di schermi
--
-- REALIZZATORE: Simone Bottani, Altran, Novembre 2009
--
--  MODIFICHE:
--
-------------------------------------------------------------------------------------------------
FUNCTION FU_GET_NUM_SCHERMI_NIELSEN(p_id_area_nielsen CD_AREA_NIELSEN.ID_AREA_NIELSEN%TYPE, p_id_prodotto_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE, p_id_circuito CD_PRODOTTO_VENDITA.ID_CIRCUITO%TYPE,p_data_inizio CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE, p_data_fine CD_BREAK_VENDITA.DATA_EROGAZIONE%TYPE) RETURN NUMBER IS
v_num_schermi NUMBER;
BEGIN
SELECT COUNT(DISTINCT(SC.ID_SCHERMO))
     INTO v_num_schermi
     FROM
     CD_PROIEZIONE PR,
     CD_SCHERMO SC,
     CD_CIRCUITO_SCHERMO CIR_S,
     CD_BREAK_VENDITA BRK_V,
     CD_BREAK BRK,
     CD_CIRCUITO_BREAK CIR_B
     WHERE CIR_S.ID_CIRCUITO = p_id_circuito
     AND CIR_S.FLG_ANNULLATO = 'N'
     AND SC.ID_SCHERMO = CIR_S.ID_SCHERMO
     AND SC.FLG_ANNULLATO = 'N'
     AND PR.ID_SCHERMO = SC.ID_SCHERMO
     AND PR.FLG_ANNULLATO = 'N'
     AND PR.DATA_PROIEZIONE BETWEEN p_data_inizio AND p_data_fine
     AND BRK.ID_PROIEZIONE = PR.ID_PROIEZIONE
     AND BRK.FLG_ANNULLATO = 'N'
     AND BRK.ID_BREAK = CIR_B.ID_BREAK
     AND CIR_B.FLG_ANNULLATO = 'N'
     AND BRK_V.ID_CIRCUITO_BREAK = CIR_B.ID_CIRCUITO_BREAK
     AND BRK_V.FLG_ANNULLATO = 'N'
     AND BRK_V.ID_PRODOTTO_VENDITA = p_id_prodotto_vendita
     AND SC.ID_SALA IN
           (SELECT ID_SALA FROM CD_SALA
           WHERE FLG_ANNULLATO = 'N'
           AND ID_CINEMA IN
               (SELECT ID_CINEMA FROM CD_CINEMA
               WHERE FLG_ANNULLATO = 'N'
               AND ID_COMUNE IN
                   (SELECT ID_COMUNE FROM CD_COMUNE WHERE ID_PROVINCIA IN
                       (SELECT ID_PROVINCIA FROM CD_PROVINCIA WHERE ID_REGIONE IN
                            (SELECT ID_REGIONE FROM CD_REGIONE WHERE ID_REGIONE IN
                                  (SELECT ID_REGIONE FROM CD_NIELSEN_REGIONE WHERE ID_AREA_NIELSEN = p_id_area_nielsen))))));
RETURN v_num_schermi;
END FU_GET_NUM_SCHERMI_NIELSEN;
-----------------------------------------------------------------------------------------------------
-- Function FU_GET_REGIONI_NIELSEN
--
-- DESCRIZIONE: Restituisce le regioni di un'area nielsen
--
-- OPERAZIONI:
--
-- INPUT:  p_id_area_nielsen: area nielsen
-- OUTPUT: regioni dell'area richiesta
--
-- REALIZZATORE: Simone Bottani, Altran, Novembre 2009
--
--  MODIFICHE:
--
-------------------------------------------------------------------------------------------------
FUNCTION FU_GET_REGIONI_NIELSEN(p_id_area_nielsen CD_AREA_NIELSEN.ID_AREA_NIELSEN%TYPE) RETURN VARCHAR2 IS
v_regioni VARCHAR2(255);
    BEGIN
    FOR TEMP IN (SELECT NOME_REGIONE FROM CD_REGIONE REG, CD_NIELSEN_REGIONE NREG, CD_AREA_NIELSEN AR_N
             WHERE AR_N.ID_AREA_NIELSEN = p_id_area_nielsen
             AND AR_N.ID_AREA_NIELSEN = NREG.ID_AREA_NIELSEN
             AND REG.ID_REGIONE = NREG.ID_REGIONE
             )LOOP
        v_regioni := v_regioni || TEMP.NOME_REGIONE || ', ';
    END LOOP;
    v_regioni := SUBSTR(v_regioni,1,LENGTH(v_regioni)-2);
    RETURN v_regioni;
END FU_GET_REGIONI_NIELSEN;

----------------------------------------------------------------------------------------------------
-- Function FU_GET_SCONTO_STAGIONALE
--
-- DESCRIZIONE: Restituisce lo sconto stagionale applicato ad un prodotto di vendita
--              in un determinato lasso di tempo
--
-- OPERAZIONI:
--
-- INPUT:  p_id_prodotto_vendita: Id del prodotto di vendita
--         p_data_inizio:         data di inizio del periodo richiesto
--         p_data_fine:           data di fine del periodo richiesto
--         p_id_formato:          formato del prodotto richiesto
-- OUTPUT: Percentuale di sconto applicata
--
-- REALIZZATORE: Simone Bottani, Altran, Novembre 2009
--
--  MODIFICHE:
--
-------------------------------------------------------------------------------------------------
FUNCTION FU_GET_SCONTO_STAGIONALE(p_id_prodotto_vendita CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA%TYPE, p_data_inizio CD_TARIFFA.DATA_INIZIO%TYPE, p_data_fine CD_TARIFFA.DATA_FINE%TYPE,p_id_formato CD_TARIFFA.ID_FORMATO%TYPE, p_misura_temp CD_TARIFFA.ID_MISURA_PRD_VE%TYPE) RETURN CD_SCONTO_STAGIONALE.PERC_SCONTO%TYPE IS
v_sconto_stagionale CD_SCONTO_STAGIONALE.PERC_SCONTO%TYPE;
    BEGIN
        BEGIN
            SELECT CD_SCONTO_STAGIONALE.PERC_SCONTO
             INTO v_sconto_stagionale
             FROM CD_TARIFFA, CD_SCONTO_STAGIONALE
             WHERE CD_TARIFFA.ID_PRODOTTO_VENDITA  = p_id_prodotto_vendita
             AND   CD_TARIFFA.ID_LISTINO  = CD_SCONTO_STAGIONALE.ID_LISTINO
             AND   CD_TARIFFA.ID_MISURA_PRD_VE = p_misura_temp
             AND   CD_TARIFFA.FLG_STAGIONALE = 'S'
             AND   (CD_TARIFFA.ID_TIPO_TARIFFA = 1 OR p_id_formato IS NULL OR CD_TARIFFA.ID_FORMATO = p_id_formato)
             AND   (p_data_inizio IS NULL OR cd_sconto_stagionale.DATA_INIZIO <= p_data_inizio)
             AND   (p_data_fine IS NULL OR cd_sconto_stagionale.DATA_FINE >= p_data_fine)
             AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
             AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE >= p_data_fine);
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            v_sconto_stagionale :=0;
         END;
    RETURN v_sconto_stagionale;
    EXCEPTION
        WHEN OTHERS THEN
		RAISE_APPLICATION_ERROR(-20001, 'FUNZIONE FU_GET_SCONTO_STAGIONALE: ERRORE '||SQLERRM);
END FU_GET_SCONTO_STAGIONALE;

FUNCTION FU_GET_SCONTO_STAGIONALE(p_id_listino CD_LISTINO.ID_LISTINO%TYPE, p_data_inizio CD_TARIFFA.DATA_INIZIO%TYPE, p_data_fine CD_TARIFFA.DATA_FINE%TYPE) RETURN CD_SCONTO_STAGIONALE.PERC_SCONTO%TYPE IS
v_sconto_stagionale CD_SCONTO_STAGIONALE.PERC_SCONTO%TYPE;
    BEGIN
        BEGIN
            SELECT SCONTO.PERC_SCONTO
             INTO v_sconto_stagionale
             FROM CD_SCONTO_STAGIONALE SCONTO
             WHERE SCONTO.ID_LISTINO = p_id_listino
             AND   SCONTO.DATA_INIZIO <= p_data_inizio
             AND   SCONTO.DATA_FINE >= p_data_fine;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            v_sconto_stagionale :=0;
         END;
    RETURN v_sconto_stagionale;
    EXCEPTION
        WHEN OTHERS THEN
		RAISE_APPLICATION_ERROR(-20001, 'FUNZIONE FU_GET_SCONTO_STAGIONALE: ERRORE '||SQLERRM);
END FU_GET_SCONTO_STAGIONALE;
---

/******************************************************************************
   NAME:        FU_GET_AFFOLLAMENTO_PRODOTTO
   PURPOSE:     Calcola  l'affollamento  per un prodotto sulla
                proiezione
                break
                restituiece 1 se non vi e disponibilita sulla proiezione
                2 sul break. Zero altrimenti.

   REVISIONS:
   Ver        Date        Author            Description
   ---------  ----------  ---------------   ---------------
   1.0       15/02/2010   Mauro Viel Altran  Febbraio 2010
******************************************************************************/


FUNCTION FU_GET_AFFOLLAMENTO_PRODOTTO(p_id_prodotto_acquistato cd_prodotto_acquistato.id_prodotto_acquistato%TYPE,p_id_formato cd_prodotto_acquistato.ID_FORMATO%TYPE) RETURN NUMBER IS


v_dispon_min_break  number;
v_dispon_min_proiezione  number;
v_durata  cd_coeff_cinema.DURATA%type;

BEGIN


select durata
into v_durata
from cd_formato_acquistabile fa, cd_coeff_cinema cc
where fa.ID_FORMATO = p_id_formato
and   cc.ID_COEFF = fa.ID_COEFF;

-----------------------proiezione--------------------

select min(brk.tempo_proiezione - sum(coef.durata)) as disponibilita_minima--, max(brk.tempo_proiezione - sum(coef.durata)) as disponibilita_massima
into v_dispon_min_proiezione
from cd_prodotto_acquistato pa1, cd_formato_acquistabile fa,cd_coeff_cinema coef, cd_comunicato com,cd_break br,
     (
          select sum(br1.secondi_nominali) as tempo_proiezione, br1.id_proiezione
          from
          cd_break br1,
          (
                select pr.id_proiezione, br.secondi_nominali
             --   select brkv.id_break_vendita,br.secondi_nominali,br.id_break
                from  
                cd_proiezione pr,
                cd_break br,
                --cd_break_vendita brkv ,
                --cd_circuito_break cir_bre,
                cd_comunicato com
                where com.ID_PRODOTTO_ACQUISTATO = P_ID_PRODOTTO_ACQUISTATO
                and   com.FLG_ANNULLATO = 'N'
                and   com.FLG_SOSPESO = 'N'
                and   com.COD_DISATTIVAZIONE IS NULL                
                /*and   brkv.ID_BREAK_VENDITA = com.ID_BREAK_VENDITA
                and   brkv.FLG_ANNULLATO = 'N'
                and   cir_bre.ID_CIRCUITO_BREAK = brkv.ID_CIRCUITO_BREAK
                and   cir_bre.FLG_ANNULLATO = 'N'
                and   br.id_break = cir_bre.id_break*/
                and   br.ID_BREAK = com.ID_BREAK
                and   br.FLG_ANNULLATO = 'N'
                and   pr.ID_PROIEZIONE = br.ID_PROIEZIONE
                and   pr.FLG_ANNULLATO = 'N'
              )proiez
              where br1.ID_PROIEZIONE = proiez.ID_PROIEZIONE
              and   br1.FLG_ANNULLATO = 'N'
              --    La durata dei break di tipo frame screen e top spot non vanno
              --    sommati al tempo di proiezione
              and   br1.ID_TIPO_BREAK != 4
              and   br1.ID_TIPO_BREAK != 5
              group by br1.ID_PROIEZIONE
      )brk
      where br.ID_PROIEZIONE = brk.id_proiezione
      and   br.FLG_ANNULLATO = 'N'
      and   com.id_break = br.id_break
      and   com.FLG_ANNULLATO = 'N'
      and   com.FLG_SOSPESO = 'N'
      and   com.COD_DISATTIVAZIONE IS NULL
      and   pa1.id_prodotto_acquistato = com.id_prodotto_acquistato
      and   pa1.FLG_ANNULLATO = 'N'
      and   pa1.FLG_SOSPESO = 'N'
      and   pa1.COD_DISATTIVAZIONE IS NULL
      and   pa1.id_formato = fa.id_formato
      and   fa.id_coeff = coef.id_coeff
      and   pa1.STATO_DI_VENDITA = 'PRE'
      and   pa1.ID_PRODOTTO_ACQUISTATO != P_ID_PRODOTTO_ACQUISTATO
      group by br.id_proiezione,tempo_proiezione;


      if v_dispon_min_proiezione is not null and  (v_dispon_min_proiezione - v_durata)< 0  then
      --if nvl(v_dispon_min_proiezione,0) < 0 then
        return 1;
      else
            --------------------------break---------------------
            select min(fv_break.secondi_nominali -sum(coef.durata)) disponibilita_minima
            into v_dispon_min_break
            from cd_prodotto_acquistato pa1, cd_formato_acquistabile fa,cd_coeff_cinema coef,cd_comunicato com,
            (
                    select br.ID_BREAK, br.secondi_nominali
                 --   select brkv.id_break_vendita,br.secondi_nominali,br.id_break
                    from  
                    cd_break br,
                    --cd_break_vendita brkv ,
                    --cd_circuito_break cir_bre,
                    cd_comunicato com
                    where com.ID_PRODOTTO_ACQUISTATO = P_ID_PRODOTTO_ACQUISTATO
                    and   com.FLG_ANNULLATO = 'N'
                    and   com.FLG_SOSPESO = 'N'
                    and   com.COD_DISATTIVAZIONE IS NULL
                    /*and   brkv.ID_BREAK_VENDITA = com.ID_BREAK_VENDITA
                    and   brkv.FLG_ANNULLATO = 'N'
                    and   cir_bre.ID_CIRCUITO_BREAK = brkv.ID_CIRCUITO_BREAK
                    and   cir_bre.FLG_ANNULLATO = 'N'
                    and   br.id_break = cir_bre.id_break*/
                    and br.ID_BREAK = com.ID_BREAK
                    and   br.FLG_ANNULLATO = 'N'
            )fv_break
            where com.id_break = fv_break.id_break
            and pa1.ID_PRODOTTO_ACQUISTATO = com.ID_PRODOTTO_ACQUISTATO
            and pa1.id_formato = fa.id_formato
            and pa1.FLG_ANNULLATO = 'N'
            and pa1.FLG_SOSPESO = 'N'
            and pa1.COD_DISATTIVAZIONE is null
            and fa.id_coeff = coef.id_coeff
            and pa1.STATO_DI_VENDITA = 'PRE'
            and pa1.ID_PRODOTTO_ACQUISTATO != P_ID_PRODOTTO_ACQUISTATO
            group by fv_break.id_break, fv_break.secondi_nominali;
            if v_dispon_min_break is not null and (v_dispon_min_break - v_durata) <0 then
                return 2;
            else
                return 0;
            end if;
      end if;
   EXCEPTION
        WHEN OTHERS THEN
		RAISE_APPLICATION_ERROR(-20001, 'FUNZIONE FU_GET_AFFOLLAMENTO_PRODOTTO: ERRORE '||SQLERRM);
END FU_GET_AFFOLLAMENTO_PRODOTTO;

/******************************************************************************
   NAME:        fu_affollamento_circuito
   PURPOSE:     Calcola  l'affollamento  per:
                proiezione
                break
                break di vendita
                restituiece la disponibilita minima e massima.

   REVISIONS:
   Ver        Date        Author            Description
   ---------  ----------  ---------------   ---------------
   1.0        25/10/2010  Michele Borgogno Altran  
******************************************************************************/
FUNCTION FU_AFFOLLAMENTO_CIRCUITO(p_tipo_affollamento varchar2, p_id_circuito cd_circuito.id_circuito%type, p_stato_di_vendita CD_STATO_DI_VENDITA.id_stato_vendita%type, p_data_inizio cd_prodotto_acquistato.data_inizio%type, p_data_fine cd_prodotto_acquistato.data_fine%type) return C_AFFOLL_CIRCUITO is
v_disp C_AFFOLL_CIRCUITO;
v_descr_stato_vendita CD_STATO_DI_VENDITA.DESCR_BREVE%TYPE;
BEGIN

    IF p_stato_di_vendita IS NOT NULL AND p_stato_di_vendita <> -1 THEN
     SELECT DESCR_BREVE
     INTO v_descr_stato_vendita
     FROM CD_STATO_DI_VENDITA
     WHERE ID_STATO_VENDITA = p_stato_di_vendita;
    END IF;

 if instr('BREAK_VENDITA, BREAK, PROIEZIONE', p_tipo_affollamento) > 0 then
    --Disponibilita break_vendita
    if  p_tipo_affollamento = 'BREAK_VENDITA' then
        OPEN v_disp FOR
--            SELECT id_circuito, nome_circuito, null as id_tipo_break, null as desc_tipo_break, MIN(disponibilita_minima) disponibilita_minima, MIN(disponibilita_massima) disponibilita_massima
--            FROM (
            select id_circuito,nome_circuito, null as id_tipo_break, null as desc_tipo_break, min(disp_min) AS disponibilita_minima ,min(disp_max) AS disponibilita_massima from
            (
            select  fv_breakv.id_circuito, 
                    fv_breakv.nome_circuito,   
                    fv_breakv.secondi_assegnati-sum(coef.durata) as disp_min,
                    fv_breakv.secondi_assegnati-sum(coef.durata) as disp_max
                    from 
                        cd_prodotto_acquistato pa1,
                        cd_formato_acquistabile fa,
                        cd_coeff_cinema coef,
                        cd_comunicato com,
                        (select cir.id_circuito, cir.nome_circuito, brkv.id_break_vendita, brkv.secondi_assegnati
                        from 
                             cd_break_vendita brkv,
                             cd_circuito_break cir_bre,
                             cd_circuito cir
                        where (p_id_circuito is null or cir.ID_CIRCUITO = p_id_circuito)
                        and     cir_bre.ID_CIRCUITO = cir.ID_CIRCUITO
                        and     brkv.id_circuito_break = cir_bre.id_circuito_break
                        and     brkv.FLG_ANNULLATO = 'N'
                        and     cir.FLG_ANNULLATO = 'N'
                        and     brkv.data_erogazione between p_data_inizio and p_data_fine
                        order by cir.id_circuito, brkv.id_break_vendita
                    )fv_breakv
                    where com.id_break_vendita = fv_breakv.id_break_vendita
                    and com.FLG_ANNULLATO = 'N'
                    and com.FLG_SOSPESO = 'N'
                    and com.COD_DISATTIVAZIONE IS NULL
                    and   pa1.id_formato = fa.id_formato
                    and   fa.id_coeff = coef.id_coeff
                    and   pa1.id_prodotto_acquistato = com.id_prodotto_acquistato
                    and   pa1.FLG_ANNULLATO = 'N'
                    and   pa1.FLG_SOSPESO = 'N'
                    and   pa1.COD_DISATTIVAZIONE IS NULL
                    and   instr(v_descr_stato_vendita, pa1.stato_di_vendita)>0        
                    group by  fv_breakv.id_circuito , fv_breakv.nome_circuito,
                             fv_breakv.id_break_vendita,fv_breakv.secondi_assegnati
             )          
             group by id_circuito,nome_circuito;
--            union 
--            select id_circuito,nome_circuito,sum(disponibilita_minima) disponibilita_minima,sum(disponibilita_massima) disponibilita_massima
--            from
--            (
--            select cir.id_circuito,cir.nome_circuito, min(secondi_nominali) as disponibilita_minima, max(secondi_nominali) as disponibilita_massima from 
--            cd_circuito cir ,
--            cd_circuito_break cirb,
--            cd_break br,
--            cd_break_vendita brkv
--            where (p_id_circuito is null or cir.ID_CIRCUITO = p_id_circuito) 
--            and   cir.ID_CIRCUITO = cirb.ID_CIRCUITO
--            and   cir.FLG_ANNULLATO  ='N'
--            and   br.ID_TIPO_BREAK in (1,2,3)
--            and   cirb.FLG_ANNULLATO ='N'
--            and   cirb.ID_BREAK = br.ID_BREAK
--            and   br.FLG_ANNULLATO ='N'
--            and   brkv.ID_CIRCUITO_BREAK = cirb.ID_CIRCUITO_BREAK
--            and   brkv.FLG_ANNULLATO='N'
--            and   brkv.data_erogazione between p_data_inizio and p_data_fine
--            group by cir.id_circuito,cir.nome_circuito,br.ID_TIPO_BREAK
--            )
--            group by id_circuito,nome_circuito
--            )
--            group by id_circuito,nome_circuito;
    else
            --Effettuo il controllo sul break
            if  p_tipo_affollamento = 'BREAK' then    
            OPEN v_disp FOR 
 --          SELECT id_circuito, nome_circuito, id_tipo_break, desc_tipo_break, MIN(disponibilita_minima) disponibilita_minima, MIN(disponibilita_massima) disponibilita_massima
 --               FROM (                     
                      select id_circuito, nome_circuito, id_tipo_break, desc_tipo_break, min(disp_min) disponibilita_minima, max(disp_max) disponibilita_massima
                      from 
                      (          
                        select fv_break.id_circuito id_circuito, 
                                fv_break.nome_circuito nome_circuito, 
                                fv_break.id_tipo_break id_tipo_break, 
                                fv_break.desc_tipo_break desc_tipo_break,  
                                fv_break.secondi_nominali -sum(coef.durata) disp_min,
                                fv_break.secondi_nominali -sum(coef.durata) disp_max                
                        from cd_prodotto_acquistato pa1, cd_formato_acquistabile fa, cd_coeff_cinema coef,cd_comunicato com, 
                        (
                            select distinct br.id_break, cir.id_circuito, cir.nome_circuito, br.id_tipo_break, tbr.desc_tipo_break, br.secondi_nominali--id_prodotto_acquistato,stato_di_vendita
                            from 
                                cd_break br,
                                cd_tipo_break tbr,
                                cd_break_vendita brkv ,
                                cd_circuito_break cir_bre,
                                cd_circuito cir
                            where  (p_id_circuito is null or cir.ID_CIRCUITO = p_id_circuito)                       
                            and     cir_bre.ID_CIRCUITO = cir.ID_CIRCUITO
                            and     brkv.id_circuito_break = cir_bre.id_circuito_break
                            and     brkv.FLG_ANNULLATO = 'N'
                            and     cir_bre.FLG_ANNULLATO = 'N'
                            and     br.id_break = cir_bre.id_break
                            and     br.id_tipo_break = tbr.ID_TIPO_BREAK
                            and     br.ID_TIPO_BREAK in (1,2)
                            and     tbr.FLG_ANNULLATO = 'N'
                            and     br.FLG_ANNULLATO = 'N'
                            and     cir.FLG_ANNULLATO = 'N'
                            and     brkv.data_erogazione between p_data_inizio and p_data_fine
                            order by cir.id_circuito--, cir.NOME_CIRCUITO, pv.ID_PRODOTTO_VENDITA
                        )fv_break
                        where com.id_break = fv_break.id_break
                        and pa1.ID_PRODOTTO_ACQUISTATO = com.ID_PRODOTTO_ACQUISTATO
                        and pa1.id_formato = fa.id_formato
                        and pa1.FLG_ANNULLATO = 'N'
                        and pa1.FLG_SOSPESO = 'N'
                        and pa1.COD_DISATTIVAZIONE is null
                        and   fa.id_coeff = coef.id_coeff
                        and   instr(v_descr_stato_vendita, pa1.stato_di_vendita)>0           
                        group by fv_break.id_circuito,fv_break.nome_circuito, fv_break.id_tipo_break, fv_break.desc_tipo_break, fv_break.id_break, fv_break.secondi_nominali                
                        ) affollamento  
                group by id_circuito, nome_circuito, id_tipo_break, desc_tipo_break;               
--                union                 
--                select id_circuito,nome_circuito,id_tipo_break, desc_tipo_break, sum(disponibilita_minima) disponibilita_minima,sum(disponibilita_massima) disponibilita_massima
--                from
--                (               
--                select max(secondi_nominali) as disponibilita_massima ,min(secondi_nominali) as disponibilita_minima,cir.id_circuito,cir.nome_circuito, br.id_tipo_break, tbr.desc_tipo_break from 
--                cd_circuito cir ,
--                cd_circuito_break cirb,
--                cd_break br,
--                cd_tipo_break tbr,
--                cd_break_vendita brkv
--                where (p_id_circuito is null or cir.ID_CIRCUITO = p_id_circuito) 
--                and   cir.ID_CIRCUITO = cirb.ID_CIRCUITO
--                and   cir.FLG_ANNULLATO  ='N'
--                and   br.ID_TIPO_BREAK in (1,2)
--                and   br.id_tipo_break = tbr.ID_TIPO_BREAK
--                and   tbr.FLG_ANNULLATO = 'N'
--                and   cirb.FLG_ANNULLATO ='N'
--                and   cirb.ID_BREAK = br.ID_BREAK
--                and   br.FLG_ANNULLATO ='N'
--                and   brkv.ID_CIRCUITO_BREAK = cirb.ID_CIRCUITO_BREAK
--                and   brkv.FLG_ANNULLATO='N'
--                and   brkv.data_erogazione between p_data_inizio and p_data_fine
--                group by cir.id_circuito,cir.nome_circuito,br.ID_TIPO_BREAK, tbr.desc_tipo_break                
--                )
--                group by id_circuito,nome_circuito, id_tipo_break, desc_tipo_break               
--                )               
--                group by id_circuito,nome_circuito,id_tipo_break, desc_tipo_break;



--                SELECT id_circuito, nome_circuito, MIN(disponibilita_minima) disponibilita_minima, MIN(disponibilita_massima) disponibilita_massima
--                FROM
--                (      
--                      select id_circuito, nome_circuito, min(disp_min) disponibilita_minima, max(disp_max) disponibilita_massima
--                      from 
--                      (
--                        select fv_break.id_circuito id_circuito, 
--                                fv_break.nome_circuito nome_circuito,    
--                                fv_break.secondi_nominali -sum(coef.durata) disp_min,
--                                fv_break.secondi_nominali -sum(coef.durata) disp_max                
--                        from cd_prodotto_acquistato pa1, cd_formato_acquistabile fa, cd_coeff_cinema coef,vi_cd_comunicato_sala com, 
--                        (
--                            select cir.id_circuito, cir.nome_circuito, brkv.id_break_vendita,br.secondi_nominali,br.id_break--id_prodotto_acquistato,stato_di_vendita
--                            from 
--                                cd_break br,
--                                cd_break_vendita brkv ,
--                                cd_circuito_break cir_bre,
--                                cd_circuito cir
--                            where  (p_id_circuito is null or cir.ID_CIRCUITO = p_id_circuito) 
--                            and     cir_bre.ID_CIRCUITO = cir.ID_CIRCUITO
--                            and     brkv.id_circuito_break = cir_bre.id_circuito_break
--                            and     brkv.FLG_ANNULLATO = 'N'
--                            and     cir_bre.FLG_ANNULLATO = 'N'
--                            and     br.id_break = cir_bre.id_break
--                            and     br.FLG_ANNULLATO = 'N'
--                            and     cir.FLG_ANNULLATO = 'N'
--                            and     brkv.data_erogazione between p_data_inizio and p_data_fine
--                            order by cir.id_circuito--, cir.NOME_CIRCUITO, pv.ID_PRODOTTO_VENDITA
--                        )fv_break
--                        where com.id_break = fv_break.id_break
--                        and pa1.ID_PRODOTTO_ACQUISTATO = com.ID_PRODOTTO_ACQUISTATO
--                        and pa1.id_formato = fa.id_formato
--                        and pa1.FLG_ANNULLATO = 'N'
--                        and pa1.FLG_SOSPESO = 'N'
--                        and pa1.COD_DISATTIVAZIONE is null
--                        and   fa.id_coeff = coef.id_coeff
--                        and   instr(v_descr_stato_vendita, pa1.stato_di_vendita)>0           
--                        group by fv_break.id_circuito,fv_break.nome_circuito, fv_break.id_break, fv_break.secondi_nominali) affollamento  
--                group by id_circuito, nome_circuito     
--                union 
--                select id_circuito,nome_circuito,sum(disponibilita_minima) disponibilita_minima,sum(disponibilita_massima) disponibilita_massima
--                from
--                (
--                select max(secondi_nominali) as disponibilita_massima ,min(secondi_nominali) as disponibilita_minima,cir.id_circuito,cir.nome_circuito from 
--                cd_circuito cir ,
--                cd_circuito_break cirb,
--                cd_break br,
--                cd_break_vendita brkv
--                where (p_id_circuito is null or cir.ID_CIRCUITO = p_id_circuito) 
--                and   cir.ID_CIRCUITO = cirb.ID_CIRCUITO
--                and   cir.FLG_ANNULLATO  ='N'
--                and   br.ID_TIPO_BREAK in (1,2)
--                and   cirb.FLG_ANNULLATO ='N'
--                and   cirb.ID_BREAK = br.ID_BREAK
--                and   br.FLG_ANNULLATO ='N'
--                and   brkv.ID_CIRCUITO_BREAK = cirb.ID_CIRCUITO_BREAK
--                and   brkv.FLG_ANNULLATO='N'
--                and   brkv.data_erogazione between p_data_inizio and p_data_fine
--                group by cir.id_circuito,cir.nome_circuito,br.ID_TIPO_BREAK
--                )
--                group by id_circuito,nome_circuito
--                )
--                group by id_circuito,nome_circuito;
    else
                --Effettuo il controllo sulla proiezione
          if  p_tipo_affollamento = 'PROIEZIONE' then
                OPEN v_disp FOR
             --       select id_circuito, nome_circuito, id_tipo_break, desc_tipo_break, min(disponibilita_minima) disponibilita_minima , min(disponibilita_massima) disponibilita_massima from
             --       ( 
                        select id_circuito, nome_circuito, id_tipo_break, desc_tipo_break, min(disponibilita) disponibilita_minima , max(disponibilita) disponibilita_massima
                        from
                        (
                            select b.SECONDI_NOMINALI - coef.durata disponibilita,  b.ID_BREAK, b.id_tipo_break, tbr.desc_tipo_break, c.ID_CIRCUITO,c.NOME_CIRCUITO--, coef.durata
                            from cd_proiezione p, 
                                 cd_break b,
                                 cd_tipo_break tbr,
                                 --cd_circuito_break cb,
                                 cd_circuito  c,
                                 cd_prodotto_acquistato pa,
                                 --cd_break_vendita bv,
                                 cd_comunicato com,
                                 cd_formato_acquistabile fo,
                                 cd_coeff_cinema coef
                            where (p_id_circuito is null or c.ID_CIRCUITO = p_id_circuito)
                            and p.DATA_PROIEZIONE between p_data_inizio and p_data_fine
                            --and cb.ID_CIRCUITO = c.ID_CIRCUITO  
                            and b.ID_BREAK = com.ID_BREAK
                            and b.id_tipo_break = tbr.ID_TIPO_BREAK
                            and b.ID_TIPO_BREAK in (1,2)
                            and tbr.FLG_ANNULLATO = 'N'
                            and b.ID_PROIEZIONE = p.ID_PROIEZIONE
                            --and bv.DATA_EROGAZIONE between p_data_inizio and p_data_fine
                            and b.id_tipo_break in (1,2)                            
                            --and bv.ID_CIRCUITO_BREAK = cb.ID_CIRCUITO_BREAK
                            --and bv.ID_BREAK_VENDITA = com.ID_BREAK_VENDITA
                            and b.FLG_ANNULLATO = 'N'
                            and p.FLG_ANNULLATO ='N'
                            --and cb.FLG_ANNULLATO ='N'
                            and c.FLG_ANNULLATO ='N'
                            --and bv.FLG_ANNULLATO ='N'
                            and pa.FLG_ANNULLATO ='N'
                            and pa.FLG_SOSPESO ='N'
                            and pa.ID_PRODOTTO_ACQUISTATO = com.ID_PRODOTTO_ACQUISTATO 
                            and com.FLG_ANNULLATO ='N'
                            and com.FLG_SOSPESO ='N'
                            and com.COD_DISATTIVAZIONE is null
                            and pa.COD_DISATTIVAZIONE is null
                            and fo.ID_FORMATO = pa.ID_FORMATO
                            and coef.ID_COEFF = fo.ID_COEFF
                            and   instr(v_descr_stato_vendita, pa.stato_di_vendita)>0
                            group by b.id_break, c.ID_CIRCUITO,c.NOME_CIRCUITO, b.secondi_nominali,durata, b.id_tipo_break, tbr.desc_tipo_break
                        )
                        group by id_circuito, nome_circuito, id_tipo_break, desc_tipo_break;
                        
--                        union
--                        select id_circuito,nome_circuito, id_tipo_break, desc_tipo_break, min(disp) disponibilita_minima ,max(disp)  disponibilita_massima
--                        from
--                        (select sum(secondi_nominali)disp, id_circuito,nome_circuito,id_tipo_break, desc_tipo_break
--                        from
--                        (  
--                          select 
--                            b.SECONDI_NOMINALI, c.ID_CIRCUITO,c.NOME_CIRCUITO, b.id_tipo_break, tbr.desc_tipo_break
--                            from cd_proiezione p, 
--                                 cd_break b,
--                                 cd_tipo_break tbr,
--                                 cd_circuito_break cb,
--                                 cd_circuito  c
--                            where (p_id_circuito is null or c.ID_CIRCUITO = p_id_circuito)
--                            and cb.ID_CIRCUITO = c.ID_CIRCUITO
--                            and b.ID_BREAK = cb.ID_BREAK 
--                            and b.ID_PROIEZIONE = p.ID_PROIEZIONE
--                            and p.DATA_PROIEZIONE between p_data_inizio and p_data_fine
--                            and b.id_tipo_break = tbr.ID_TIPO_BREAK
--                            and b.ID_TIPO_BREAK in (1,2)
--                            and tbr.FLG_ANNULLATO = 'N'                          
--                            and b.FLG_ANNULLATO = 'N'
--                            and p.FLG_ANNULLATO ='N'
--                            and cb.FLG_ANNULLATO ='N'
--                            and c.FLG_ANNULLATO ='N'
--                            group  by b.SECONDI_NOMINALI,  c.ID_CIRCUITO,c.NOME_CIRCUITO, b.id_tipo_break, tbr.desc_tipo_break
--                        ) 
--                        group by id_circuito,nome_circuito,id_tipo_break, desc_tipo_break
--                        )
--                        group by id_circuito,nome_circuito,id_tipo_break, desc_tipo_break
--                    )
--                    group by id_circuito,nome_circuito,id_tipo_break, desc_tipo_break;
                    
                    
                    
--                    select id_circuito, nome_circuito, min(disponibilita_minima) disponibilita_minima , min(disponibilita_massima) disponibilita_massima from
--                    ( 
--                        select id_circuito, nome_circuito, min(disponibilita) disponibilita_minima , max(disponibilita) disponibilita_massima
--                        from
--                        (
--                            select b.SECONDI_NOMINALI - coef.durata disponibilita,  b.ID_BREAK, c.ID_CIRCUITO,c.NOME_CIRCUITO--, coef.durata
--                            from cd_proiezione p, 
--                                 cd_break b,
--                                 cd_circuito_break cb,
--                                 cd_circuito  c,
--                                 cd_prodotto_acquistato pa,
--                                 cd_break_vendita bv,
--                                 cd_comunicato com,
--                                 cd_formato_acquistabile fo,
--                                 cd_coeff_cinema coef
--                            where (p_id_circuito is null or c.ID_CIRCUITO = p_id_circuito) 
--                            and cb.ID_CIRCUITO = c.ID_CIRCUITO  
--                            and b.ID_BREAK = cb.ID_BREAK
--                            and b.ID_PROIEZIONE = p.ID_PROIEZIONE
--                            and bv.DATA_EROGAZIONE between p_data_inizio and p_data_fine
--                            and b.id_tipo_break in (1,2)                            
--                            and bv.ID_CIRCUITO_BREAK = cb.ID_CIRCUITO_BREAK
--                            and bv.ID_BREAK_VENDITA = com.ID_BREAK_VENDITA
--                            and b.FLG_ANNULLATO = 'N'
--                            and p.FLG_ANNULLATO ='N'
--                            and cb.FLG_ANNULLATO ='N'
--                            and c.FLG_ANNULLATO ='N'
--                            and bv.FLG_ANNULLATO ='N'
--                            and pa.FLG_ANNULLATO ='N'
--                            and pa.FLG_SOSPESO ='N'
--                            and pa.ID_PRODOTTO_ACQUISTATO = com.ID_PRODOTTO_ACQUISTATO 
--                            and com.FLG_ANNULLATO ='N'
--                            and com.FLG_SOSPESO ='N'
--                            and com.COD_DISATTIVAZIONE is null
--                            and pa.COD_DISATTIVAZIONE is null
--                            and fo.ID_FORMATO = pa.ID_FORMATO
--                            and coef.ID_COEFF = fo.ID_COEFF
--                            and   instr(v_descr_stato_vendita, pa.stato_di_vendita)>0
--                            group by b.id_break, c.ID_CIRCUITO,c.NOME_CIRCUITO, b.secondi_nominali,durata
--                        )
--                        group by id_circuito, nome_circuito
--                        union
--                        select id_circuito,nome_circuito, min(disp) disponibilita_minima ,max(disp)  disponibilita_massima
--                        from
--                        (select sum(secondi_nominali)disp, id_circuito,nome_circuito
--                        from
--                        (  
--                          select 
--                            b.SECONDI_NOMINALI, c.ID_CIRCUITO,c.NOME_CIRCUITO
--                            from cd_proiezione p, 
--                                 cd_break b,
--                                 cd_circuito_break cb,
--                                 cd_circuito  c
--                            where (p_id_circuito is null or c.ID_CIRCUITO = p_id_circuito) 
--                            and cb.ID_CIRCUITO = c.ID_CIRCUITO
--                            and b.ID_BREAK = cb.ID_BREAK 
--                            and b.ID_PROIEZIONE = p.ID_PROIEZIONE
--                            and p.DATA_PROIEZIONE between p_data_inizio and p_data_fine
--                            and b.id_tipo_break in (1,2)                           
--                            and b.FLG_ANNULLATO = 'N'
--                            and p.FLG_ANNULLATO ='N'
--                            and cb.FLG_ANNULLATO ='N'
--                            and c.FLG_ANNULLATO ='N'
--                            group  by b.SECONDI_NOMINALI,  c.ID_CIRCUITO,c.NOME_CIRCUITO
--                        ) 
--                        group by id_circuito,nome_circuito
--                        )
--                        group by id_circuito,nome_circuito
--                    )
--                    group by id_circuito,nome_circuito;
                end if;
            end if;
   end if;
 else
    raise_application_error (-20050,'Il parametro p_tipo_affollamento puo essere associato  solo ai  valori "BREAK_VENDITA", "BREAK", "PROIEZIONE"');
 end if;
 return v_disp;
 EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RAISE;
     WHEN OTHERS THEN
       RAISE;
END FU_AFFOLLAMENTO_CIRCUITO;

/******************************************************************************
   NAME:        FU_AFFOLLAMENTO_SALA_STATO
   PURPOSE:     Calcola  la disponibilita sulla proiezione, in base allo stato fornito, in  una sala
                restituisce la disponibilita minima

   REVISIONS:
   Ver        Date        Author            Description
   ---------  ----------  ---------------   ---------------
   1.0        29/10/2010  Simone Bottani    Altran  
******************************************************************************/
FUNCTION FU_AFFOLLAMENTO_SALA_STATO(p_data_inizio CD_COMUNICATO.DATA_EROGAZIONE_PREV%TYPE, p_data_fine CD_COMUNICATO.DATA_EROGAZIONE_PREV%TYPE, p_id_sala CD_SALA.ID_SALA%TYPE, p_id_circuito CD_CIRCUITO.ID_CIRCUITO%TYPE,p_descr_breve CD_STATO_DI_VENDITA.DESCR_BREVE%type) RETURN NUMBER IS
v_affollamento NUMBER := 0;
BEGIN
    --v_affollamento :=0;
    --dbms_output.PUT_LINE('FU_AFFOLLAMENTO_SALA_STATO');
    select min(secondi_proiezione - durata_comunicati)
    into v_affollamento
    from
    (
    select durata_comunicati, id_proiez,
    (select sum(durata_secondi) from cd_tipo_break tb, cd_break br
                where br.id_proiezione = id_proiez
                and br.flg_annullato = 'N'
                and tb.id_tipo_break = br.id_tipo_break
                and tb.id_tipo_break not in (4,5)) as secondi_proiezione
    from
    (
    select sum(durata) as durata_comunicati, b.id_proiezione as id_proiez
    from  cd_coeff_cinema coef,cd_formato_acquistabile fa,
    cd_prodotto_vendita pv, cd_prodotto_acquistato pa,
     cd_break b, 
     --cd_circuito_break cb, cd_break_vendita bv,
     cd_comunicato c
    where c.ID_SALA = p_id_sala
    and c.data_erogazione_prev between p_data_inizio and p_data_fine
    and c.FLG_ANNULLATO = 'N'
    and c.FLG_SOSPESO = 'N'
    and c.COD_DISATTIVAZIONE IS NULL
    --
    /*and bv.ID_BREAK_VENDITA = c.ID_BREAK_VENDITA
    and bv.FLG_ANNULLATO = 'N'
    and cb.ID_CIRCUITO_BREAK = bv.ID_CIRCUITO_BREAK
    and cb.FLG_ANNULLATO = 'N'
    and b.ID_BREAK = cb.ID_BREAK
    and b.FLG_ANNULLATO = 'N'*/
    --
    and b.ID_BREAK = c.ID_BREAK
    and b.FLG_ANNULLATO = 'N'
    and pa.ID_PRODOTTO_ACQUISTATO = c.ID_PRODOTTO_ACQUISTATO
    and pa.FLG_ANNULLATO = 'N'
    and pa.FLG_SOSPESO = 'N'
    and pa.COD_DISATTIVAZIONE is null
    and instr(p_descr_breve, pa.stato_di_vendita)>0
    and pv.ID_PRODOTTO_VENDITA = pa.ID_PRODOTTO_VENDITA
    and pv.ID_CIRCUITO = NVL(p_id_circuito, pv.ID_CIRCUITO)
    and fa.ID_FORMATO = pa.ID_FORMATO
    and coef.ID_COEFF = fa.ID_COEFF
    group by id_proiezione));
    if --nvl(v_affollamento,0) = 0 then
        v_affollamento is null then
        select min(sum(durata_secondi)) 
        into v_affollamento
        from cd_tipo_break tb, cd_break br, cd_schermo sc, cd_proiezione pr
        where pr.DATA_PROIEZIONE between p_data_inizio and p_data_fine
        and pr.FLG_ANNULLATO = 'N'
        and sc.ID_SCHERMO = pr.ID_SCHERMO
        and sc.FLG_ANNULLATO = 'N'
        and sc.ID_SALA = p_id_sala
        and br.id_proiezione = pr.id_proiezione
        and br.flg_annullato = 'N'
        and tb.id_tipo_break = br.id_tipo_break
        and tb.id_tipo_break not in (4,5)
        group by pr.id_proiezione;
    end if;
RETURN v_affollamento;
END FU_AFFOLLAMENTO_SALA_STATO;

-- --------------------------------------------------------------------------------------------
-- FUNZIONE FU_AFFOLLAMENTO_SALA_STATO_NEW
-- --------------------------------------------------------------------------------------------
-- INPUT:  
--      p_data_inizio       data inizio ricerca     OBBLIGATORIO
--      p_data_fine         data fine ricerca       OBBLIGATORIO
--      p_id_sala           identificativo sala     OBBLIGATORIO
--      p_id_circuito       identificativo circuito OPZIONALE
--      p_stato_vendita     stato di vendita        OPZIONALE
--
-- OUTPUT: Restituisce la disponibilita minima per sala all'interno di un
--          intervallo di tempo specificato da parametri
--          VALUTARE SE E' IL CASO DI INSERIRE NELLA RICERCA ANCHE I PARAMETRI
--          P_ID_CIRCUITO - P_STATO_VENDITA
--          DA UNA PRIMA ANALISI SEMBREREBBE POSSANO ESSERE IGNORATI
--
-- REALIZZATORE  Antonio Colucci, TeoresiGroup srl, Febbraio 2011
-- MODIFICHE     Mauro Viel Altran Italia, Dicembre 2011 sostituito il conteggio dei secondi nominali del break con la somma nominale del break #MV01  
--
-- --------------------------------------------------------------------------------------------
FUNCTION FU_AFFOLLAMENTO_SALA_STATO_NEW(
                                        p_data_inizio CD_COMUNICATO.DATA_EROGAZIONE_PREV%TYPE, 
                                        p_data_fine CD_COMUNICATO.DATA_EROGAZIONE_PREV%TYPE, 
                                        p_id_sala CD_SALA.ID_SALA%TYPE--, 
                                        --p_id_circuito CD_CIRCUITO.ID_CIRCUITO%TYPE,
                                        --p_descr_breve CD_STATO_DI_VENDITA.DESCR_BREVE%type
                                        ) RETURN NUMBER IS
v_affollamento NUMBER := 0;
v_durata_break number:= 540; ----#MV01

BEGIN
        select sum(durata_secondi) into
        v_durata_break
        from  cd_tipo_break
        where id_tipo_break in (1,2);  --#MV01
    --v_affollamento :=0;
    --dbms_output.PUT_LINE('FU_AFFOLLAMENTO_SALA_STATO');
    select DISTINCT min(disponibilita) over (partition by id_sala) as affollamento
    INTO v_affollamento
    from
    (
    select   distinct
             cd_comunicato.id_sala,
             (v_durata_break--(sum(distinct cd_tipo_break.durata_secondi) over (partition by cd_break.id_proiezione) #MV01
             - 
             sum (cd_coeff_cinema.durata) over (partition by cd_break.id_proiezione)) as disponibilita
    from    cd_comunicato,
            cd_prodotto_acquistato,
            --cd_prodotto_vendita,
            cd_formato_acquistabile,
            cd_coeff_cinema,
            cd_tipo_break,
            cd_break 
    where   --(p_id_sala is null or id_sala = p_id_sala)
            id_sala = p_id_sala
    and     cd_comunicato.flg_annullato = 'N'
    and     cd_comunicato.cod_disattivazione is null
    and     cd_comunicato.flg_sospeso = 'N'
    and     cd_comunicato.data_erogazione_prev between p_data_inizio and p_data_fine
    and     cd_comunicato.id_prodotto_acquistato = cd_prodotto_acquistato.id_prodotto_acquistato
    --and     instr(p_stato_vendita, cd_prodotto_acquistato.stato_di_vendita)>0
    and     cd_prodotto_acquistato.stato_di_vendita = 'PRE'
    --and     cd_prodotto_acquistato.id_prodotto_vendita = cd_prodotto_vendita.id_prodotto_vendita
    --and     cd_prodotto_vendita.id_circuito = nvl(p_id_circuito,cd_prodotto_vendita.id_circuito)
    and     cd_prodotto_acquistato.id_formato = cd_formato_acquistabile.id_formato
    and     cd_formato_acquistabile.id_coeff = cd_coeff_cinema.id_coeff
    and     cd_comunicato.id_break = cd_break.id_break
    and     cd_break.id_tipo_break = cd_tipo_break.id_tipo_break
    and     cd_tipo_break.flg_annullato = 'N'
    and     (cd_tipo_break.data_fine is null or cd_tipo_break.data_fine> trunc(sysdate))
    and     cd_tipo_break.id_tipo_break  in (1,2)
    union
    --select id_sala,540 as disponibilita
    select id_sala,v_durata_break as disponibilita --#MV01
	from
		cd_sala,
        cd_cinema
    where
        cd_sala.id_cinema = cd_cinema.id_cinema
    and cd_cinema.flg_virtuale = 'N'
    and cd_sala.id_sala = p_id_sala
    );
 RETURN v_affollamento;
    EXCEPTION
      WHEN OTHERS THEN
      RAISE;
--RETURN v_affollamento;
END FU_AFFOLLAMENTO_SALA_STATO_NEW;

FUNCTION FU_AFFOLLAMENTO_SALA(p_data_inizio CD_COMUNICATO.DATA_EROGAZIONE_PREV%TYPE, p_data_fine CD_COMUNICATO.DATA_EROGAZIONE_PREV%TYPE, p_id_sala CD_SALA.ID_SALA%TYPE, p_id_circuito CD_CIRCUITO.ID_CIRCUITO%TYPE) RETURN NUMBER is
begin
    return FU_AFFOLLAMENTO_SALA_STATO(p_data_inizio,p_data_fine,p_id_sala,p_id_circuito,'PRE');
end FU_AFFOLLAMENTO_SALA; 
--
FUNCTION FU_GET_AREA_NIELSEN_SALA(p_id_sala CD_SALA.ID_SALA%TYPE) RETURN CD_AREA_NIELSEN.ID_AREA_NIELSEN%TYPE IS 
p_id_area CD_AREA_NIELSEN.ID_AREA_NIELSEN%TYPE;
BEGIN
    SELECT RN.ID_AREA_NIELSEN 
    INTO p_id_area
    FROM  CD_NIELSEN_REGIONE RN, 
    CD_PROVINCIA PR, CD_COMUNE COM, CD_CINEMA CIN, CD_SALA SA
    WHERE SA.ID_SALA = p_id_sala
    AND CIN.ID_CINEMA = SA.ID_CINEMA
    AND COM.ID_COMUNE = CIN.ID_COMUNE
    AND PR.ID_PROVINCIA = COM.ID_COMUNE
    AND RN.ID_REGIONE = PR.ID_REGIONE;
END FU_GET_AREA_NIELSEN_SALA;










FUNCTION ELENCO_PRODOTTI_VENDITA_IS_NEW(p_categoria_prodotto CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO%TYPE,p_id_mod_vendita CD_PRODOTTO_VENDITA.ID_MOD_VENDITA%TYPE, p_stato_vendita CD_PRODOTTO_ACQUISTATO.STATO_DI_VENDITA%TYPE, p_data_inizio CD_LISTINO.DATA_INIZIO%TYPE, p_data_fine CD_LISTINO.DATA_FINE%TYPE) RETURN C_LISTA_VENDITA_IS_NEW IS--, p_luogo cd_luogo.desc_luogo%type ) RETURN C_LISTA_VENDITA_IS_NEW IS
v_lista_vendita C_LISTA_VENDITA_IS_NEW;
v_sconto_stagionale CD_SCONTO_STAGIONALE.PERC_SCONTO%TYPE;
p_id_formato CD_TARIFFA.ID_FORMATO%TYPE;
BEGIN

OPEN v_lista_vendita FOR
       SELECT
         ID_CIRCUITO,
         ID_PRODOTTO_VENDITA,
          CIRCUITO,
          PRODOTTO_PUBBLICITARIO,
          ID_LISTINO,
          NUMERO_COMUNICATI,
          NUMERO_AMBIENTI,
          DISPONIBILITA,
          PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS TARIFFA,
          ID_TARIFFA,
          SCONTO_STAGIONALE,
          AMBITO,
          ID_UNITA,
          DESC_UNITA,
          ID_FORMATO,
          DESC_FORMATO,
          ID_TIPO_CINEMA,
          DESC_TIPO_CINEMA,
          DURATA_IN_GIORNI,
          DURATA_PERIODO
         FROM
         (
          SELECT 
          CD_CIRCUITO.ID_CIRCUITO,
          CD_TARIFFA.ID_PRODOTTO_VENDITA,
          CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
          CD_PRODOTTO_PUBB.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
          CD_TARIFFA.ID_LISTINO,
          0 AS NUMERO_COMUNICATI,--FU_GET_SALE_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio, CD_TARIFFA.ID_LISTINO, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_COMUNICATI,
          COUNT(DISTINCT ID_SALA) AS NUMERO_AMBIENTI,
          FU_GET_DISPONIBILITA_IS(CD_CIRCUITO_SALA.ID_CIRCUITO,
          CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,p_data_inizio,p_data_fine) AS DISPONIBILITA,
          CD_TARIFFA.IMPORTO,
          CD_TARIFFA.ID_TARIFFA,
          CD_TARIFFA.ID_TIPO_CINEMA,
          CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
          FU_GET_SCONTO_STAGIONALE(CD_TARIFFA.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine, p_id_formato,CD_TARIFFA.ID_MISURA_PRD_VE) AS SCONTO_STAGIONALE,
          2 AS AMBITO,
          CD_UNITA_MISURA_TEMP.ID_UNITA,
          CD_UNITA_MISURA_TEMP.DESC_UNITA,
          CD_FORMATO_ACQUISTABILE.ID_FORMATO,
          CD_FORMATO_ACQUISTABILE.DESCRIZIONE AS DESC_FORMATO,
          PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) as DURATA_IN_GIORNI,
          p_data_fine - p_data_inizio +1  AS DURATA_PERIODO
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_PRODOTTO_VENDITA,
     CD_CIRCUITO ,
     CD_TARIFFA ,
     CD_PRODOTTO_PUBB,
     CD_CIRCUITO_SALA,
     CD_SALA_VENDITA,
     CD_FORMATO_ACQUISTABILE,
     CD_LISTINO,
     CD_LUOGO_TIPO_PUBB,
     CD_LUOGO,
     CD_TIPO_CINEMA
WHERE   (p_id_mod_vendita IS NULL OR CD_PRODOTTO_VENDITA.ID_MOD_VENDITA = p_id_mod_vendita)
AND   CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB IS NOT NULL
AND   CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB =CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
AND   CD_PRODOTTO_VENDITA.FLG_ANNULLATO = 'N'
AND   CD_CIRCUITO_SALA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_CIRCUITO.FLG_ANNULLATO = 'N'
AND   CD_CIRCUITO_SALA.ID_CIRCUITO_SALA = CD_SALA_VENDITA.ID_CIRCUITO_SALA
AND   CD_CIRCUITO_SALA.FLG_ANNULLATO = 'N'
AND   CD_SALA_VENDITA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_CIRCUITO_SALA.ID_LISTINO = CD_LISTINO.ID_LISTINO
AND   CD_LISTINO.ID_LISTINO = CD_TARIFFA.ID_LISTINO
AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE   >=p_data_fine)
AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_PRODOTTO_VENDITA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_TARIFFA.ID_MISURA_PRD_VE = CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE
AND   CD_TARIFFA.ID_TIPO_CINEMA = CD_TIPO_CINEMA.ID_TIPO_CINEMA
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = CD_TARIFFA.ID_FORMATO
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
AND   CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO
AND   CD_LUOGO.DESC_LUOGO = 'Sala'
--AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1
GROUP BY CD_CIRCUITO.ID_CIRCUITO,
         CD_TARIFFA.ID_PRODOTTO_VENDITA,
         CD_CIRCUITO.NOME_CIRCUITO,
         CD_TARIFFA.ID_LISTINO,
         CD_TARIFFA.IMPORTO,
         CD_TARIFFA.ID_TARIFFA,
         CD_TARIFFA.ID_TIPO_CINEMA,
         CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
         CD_PRODOTTO_PUBB.DESC_PRODOTTO,
         CD_CIRCUITO_SALA.ID_CIRCUITO,
         CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,
         CD_LUOGO.ID_LUOGO,
         CD_TARIFFA.ID_MISURA_PRD_VE,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CD_FORMATO_ACQUISTABILE.ID_FORMATO,
         CD_FORMATO_ACQUISTABILE.DESCRIZIONE)
UNION
       SELECT
          ID_CIRCUITO,
          ID_PRODOTTO_VENDITA,
          CIRCUITO,
          PRODOTTO_PUBBLICITARIO,
          ID_LISTINO,
          NUMERO_COMUNICATI,
          NUMERO_AMBIENTI,
          DISPONIBILITA,
          PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS TARIFFA,
          ID_TARIFFA,
          SCONTO_STAGIONALE,
          AMBITO,
          ID_UNITA,
          DESC_UNITA,
          ID_FORMATO,
          DESC_FORMATO,
          ID_TIPO_CINEMA,
          DESC_TIPO_CINEMA,
          DURATA_IN_GIORNI,
          DURATA_PERIODO
         FROM(
SELECT
CD_CIRCUITO.ID_CIRCUITO,
CD_TARIFFA.ID_PRODOTTO_VENDITA,
CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
CD_PRODOTTO_PUBB.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
CD_TARIFFA.ID_LISTINO,
0 AS NUMERO_COMUNICATI,-- FU_GET_ATRII_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio, CD_TARIFFA.ID_LISTINO, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_COMUNICATI,
 COUNT(DISTINCT ID_ATRIO) AS NUMERO_AMBIENTI,
 FU_GET_DISPONIBILITA_IS(CD_CIRCUITO_ATRIO.ID_CIRCUITO,CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,p_data_inizio,p_data_fine) AS DISPONIBILITA,
 CD_TARIFFA.IMPORTO,CD_TARIFFA.ID_TARIFFA,CD_TARIFFA.ID_TIPO_CINEMA,CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
 FU_GET_SCONTO_STAGIONALE(CD_TARIFFA.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine, p_id_formato,CD_TARIFFA.ID_MISURA_PRD_VE) AS SCONTO_STAGIONALE,
  3 AS AMBITO,
  CD_UNITA_MISURA_TEMP.ID_UNITA,
  CD_UNITA_MISURA_TEMP.DESC_UNITA,
  CD_FORMATO_ACQUISTABILE.ID_FORMATO,
  CD_FORMATO_ACQUISTABILE.DESCRIZIONE AS DESC_FORMATO,
  PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) as DURATA_IN_GIORNI,
  p_data_fine - p_data_inizio +1  AS DURATA_PERIODO
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_PRODOTTO_VENDITA,
     CD_CIRCUITO,
     CD_TARIFFA,
     CD_PRODOTTO_PUBB,
     CD_CIRCUITO_ATRIO,
     CD_ATRIO_VENDITA,
     CD_FORMATO_ACQUISTABILE,
     CD_LISTINO,
     CD_LUOGO_TIPO_PUBB,
     CD_LUOGO,
     CD_TIPO_CINEMA
WHERE   (p_id_mod_vendita IS NULL OR CD_PRODOTTO_VENDITA.ID_MOD_VENDITA = p_id_mod_vendita)
AND   CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB IS NOT NULL
AND   CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB =CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
AND   CD_PRODOTTO_VENDITA.FLG_ANNULLATO = 'N'
AND   CD_CIRCUITO_ATRIO.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_CIRCUITO_ATRIO.ID_CIRCUITO_ATRIO = CD_ATRIO_VENDITA.ID_CIRCUITO_ATRIO
AND   CD_ATRIO_VENDITA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_CIRCUITO_ATRIO.ID_LISTINO = CD_LISTINO.ID_LISTINO
AND   CD_LISTINO.ID_LISTINO = CD_TARIFFA.ID_LISTINO
AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE   >=p_data_fine)
AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_PRODOTTO_VENDITA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_TARIFFA.ID_MISURA_PRD_VE = CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE
AND   CD_TARIFFA.ID_TIPO_CINEMA = CD_TIPO_CINEMA.ID_TIPO_CINEMA
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = CD_TARIFFA.ID_FORMATO
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
AND   CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO
AND   CD_LUOGO.DESC_LUOGO = 'Atrio'
--AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1
GROUP BY CD_CIRCUITO.ID_CIRCUITO,
         CD_TARIFFA.ID_PRODOTTO_VENDITA,
         CD_CIRCUITO.NOME_CIRCUITO,
         CD_TARIFFA.ID_LISTINO,
         CD_TARIFFA.IMPORTO,
         CD_TARIFFA.ID_TARIFFA,
         CD_TARIFFA.ID_TIPO_CINEMA,
         CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
         CD_PRODOTTO_PUBB.DESC_PRODOTTO,
         CD_CIRCUITO.ID_CIRCUITO,
         CD_CIRCUITO_ATRIO.ID_CIRCUITO,
         CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,
         CD_LUOGO.ID_LUOGO,
         CD_TARIFFA.ID_MISURA_PRD_VE,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CD_FORMATO_ACQUISTABILE.ID_FORMATO,
         CD_FORMATO_ACQUISTABILE.DESCRIZIONE)
UNION
       SELECT
         ID_CIRCUITO,
         ID_PRODOTTO_VENDITA,
          CIRCUITO,
          PRODOTTO_PUBBLICITARIO,
          ID_LISTINO,
          NUMERO_COMUNICATI,
          NUMERO_AMBIENTI,
          DISPONIBILITA,
          PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS TARIFFA,
          ID_TARIFFA,
          SCONTO_STAGIONALE,
          AMBITO,
          ID_UNITA,
          DESC_UNITA,
          ID_FORMATO,
          DESC_FORMATO,
          ID_TIPO_CINEMA,
          DESC_TIPO_CINEMA,
          DURATA_IN_GIORNI,
          DURATA_PERIODO
         FROM(
SELECT CD_CIRCUITO.ID_CIRCUITO,
    CD_TARIFFA.ID_PRODOTTO_VENDITA,
    CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
    CD_PRODOTTO_PUBB.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
    CD_TARIFFA.ID_LISTINO,
    --FU_GET_CINEMA_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio, CD_TARIFFA.ID_LISTINO, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_COMUNICATI,
    0 AS NUMERO_COMUNICATI,
    COUNT(DISTINCT ID_CINEMA) AS NUMERO_AMBIENTI,
    FU_GET_DISPONIBILITA_IS(CD_CIRCUITO_CINEMA.ID_CIRCUITO,
    CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,p_data_inizio,p_data_fine) AS DISPONIBILITA,
    CD_TARIFFA.IMPORTO,
    CD_TARIFFA.ID_TARIFFA,
    CD_TARIFFA.ID_TIPO_CINEMA,
    CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
    FU_GET_SCONTO_STAGIONALE(CD_TARIFFA.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine, p_id_formato,CD_TARIFFA.ID_MISURA_PRD_VE) AS SCONTO_STAGIONALE,
    4 AS AMBITO,
    CD_UNITA_MISURA_TEMP.ID_UNITA,
    CD_UNITA_MISURA_TEMP.DESC_UNITA,
    CD_FORMATO_ACQUISTABILE.ID_FORMATO,
    CD_FORMATO_ACQUISTABILE.DESCRIZIONE AS DESC_FORMATO,
    PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) as DURATA_IN_GIORNI,
    p_data_fine - p_data_inizio +1  AS DURATA_PERIODO
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_PRODOTTO_VENDITA,
     CD_CIRCUITO ,
     CD_TARIFFA ,
     CD_PRODOTTO_PUBB,
     CD_CIRCUITO_CINEMA,
     CD_CINEMA_VENDITA,
     CD_FORMATO_ACQUISTABILE,
     CD_LISTINO,
     CD_LUOGO_TIPO_PUBB,
     CD_LUOGO,
     CD_TIPO_CINEMA
WHERE   (p_id_mod_vendita IS NULL OR CD_PRODOTTO_VENDITA.ID_MOD_VENDITA = p_id_mod_vendita)
AND   CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB IS NOT NULL
AND   CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB =CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
AND   CD_PRODOTTO_VENDITA.FLG_ANNULLATO = 'N'
AND   CD_CIRCUITO_CINEMA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_CIRCUITO_CINEMA.ID_CIRCUITO_CINEMA = CD_CINEMA_VENDITA.ID_CIRCUITO_CINEMA
AND   CD_CINEMA_VENDITA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_CIRCUITO_CINEMA.ID_LISTINO = CD_LISTINO.ID_LISTINO
AND   CD_LISTINO.ID_LISTINO = CD_TARIFFA.ID_LISTINO
AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE   >=p_data_fine)
AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_TARIFFA.ID_TIPO_CINEMA = CD_TIPO_CINEMA.ID_TIPO_CINEMA
AND   CD_PRODOTTO_VENDITA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_TARIFFA.ID_MISURA_PRD_VE = CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = CD_TARIFFA.ID_FORMATO
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
AND   CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO
AND   CD_LUOGO.DESC_LUOGO = 'Cinema'
--AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1
GROUP BY CD_CIRCUITO.ID_CIRCUITO,
         CD_TARIFFA.ID_PRODOTTO_VENDITA,
         CD_CIRCUITO.NOME_CIRCUITO,
         CD_PRODOTTO_PUBB.DESC_PRODOTTO,
         CD_TARIFFA.ID_LISTINO,
         CD_TARIFFA.IMPORTO,
         CD_TARIFFA.ID_TARIFFA,
         CD_TARIFFA.ID_TIPO_CINEMA,
         CD_TIPO_CINEMA.DESC_TIPO_CINEMA,
         CD_CIRCUITO.ID_CIRCUITO,
         CD_CIRCUITO_CINEMA.ID_CIRCUITO,
         CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,
         CD_LUOGO.ID_LUOGO,
         CD_TARIFFA.ID_MISURA_PRD_VE,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CD_FORMATO_ACQUISTABILE.ID_FORMATO,
         CD_FORMATO_ACQUISTABILE.DESCRIZIONE)
UNION
--Sponsorizzazioni
       SELECT
         ID_CIRCUITO,
         ID_PRODOTTO_VENDITA,
          CIRCUITO,
          PRODOTTO_PUBBLICITARIO,
          ID_LISTINO,
          0 AS NUMERO_COMUNICATI,
          1 AS NUMERO_AMBIENTI,
          'S' AS DISPONIBILITA,
          PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS TARIFFA,
          ID_TARIFFA,
          SCONTO_STAGIONALE,
          AMBITO,
          ID_UNITA,
          DESC_UNITA,
          ID_FORMATO,
          DESC_FORMATO,
          NULL AS ID_TIPO_CINEMA,
          NULL As DESC_TIPO_CINEMA,
          DURATA_IN_GIORNI,
          DURATA_PERIODO
         FROM(
SELECT CD_CIRCUITO.ID_CIRCUITO,
  CD_TARIFFA.ID_PRODOTTO_VENDITA,
  CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
  CD_PRODOTTO_PUBB.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
  CD_TARIFFA.ID_LISTINO,
 -- FU_GET_ATRII_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio, CD_TARIFFA.ID_LISTINO, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_COMUNICATI,
 -- FU_GET_DISPONIBILITA_IS(CD_CIRCUITO_ATRIO.ID_CIRCUITO,CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,p_data_inizio,p_data_fine) AS DISPONIBILITA,
  0,0,'S',
  CD_TARIFFA.IMPORTO, CD_TARIFFA.ID_TARIFFA,CD_TARIFFA.ID_TIPO_CINEMA,
  FU_GET_SCONTO_STAGIONALE(CD_TARIFFA.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine, p_id_formato,CD_TARIFFA.ID_MISURA_PRD_VE) AS SCONTO_STAGIONALE,
  NULL AS AMBITO,
  CD_UNITA_MISURA_TEMP.ID_UNITA,
  CD_UNITA_MISURA_TEMP.DESC_UNITA,
  CD_FORMATO_ACQUISTABILE.ID_FORMATO,
  CD_FORMATO_ACQUISTABILE.DESCRIZIONE AS DESC_FORMATO,
  PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) as DURATA_IN_GIORNI,
  p_data_fine - p_data_inizio +1  AS DURATA_PERIODO
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_PRODOTTO_VENDITA,
     CD_CIRCUITO ,
     CD_TARIFFA ,
     CD_PRODOTTO_PUBB,
     CD_LISTINO,
     CD_FORMATO_ACQUISTABILE
WHERE   (p_id_mod_vendita IS NULL OR CD_PRODOTTO_VENDITA.ID_MOD_VENDITA = p_id_mod_vendita)
AND   CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB IS NULL
AND   CD_PRODOTTO_VENDITA.ID_PRODOTTO_PUBB = CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB
AND   CD_PRODOTTO_VENDITA.FLG_ANNULLATO = 'N'
AND   CD_LISTINO.ID_LISTINO = CD_TARIFFA.ID_LISTINO
AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE   >=p_data_fine)
AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA
AND   CD_PRODOTTO_VENDITA.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
AND   CD_TARIFFA.ID_MISURA_PRD_VE = CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_TARIFFA.ID_FORMATO = CD_FORMATO_ACQUISTABILE.ID_FORMATO
--AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_incizio +1
--AND   CD_PRODOTTO_PUBB.COD_TIPO_PUBB = CD_LUOGO_TIPO_PUBB.COD_TIPO_PUBB
--AND   CD_LUOGO.ID_LUOGO = CD_LUOGO_TIPO_PUBB.ID_LUOGO
--AND   CD_LUOGO.DESC_LUOGO = 'Cinema'
GROUP BY CD_CIRCUITO.ID_CIRCUITO,
         CD_TARIFFA.ID_PRODOTTO_VENDITA,
         CD_CIRCUITO.NOME_CIRCUITO,
         CD_PRODOTTO_PUBB.DESC_PRODOTTO,
         CD_TARIFFA.ID_LISTINO,
         CD_TARIFFA.IMPORTO,
         CD_TARIFFA.ID_TARIFFA,
         CD_TARIFFA.ID_TIPO_CINEMA,
         CD_CIRCUITO.ID_CIRCUITO,
         CD_PRODOTTO_VENDITA.ID_PRODOTTO_VENDITA,
       --  CD_LUOGO.ID_LUOGO,
         CD_TARIFFA.ID_MISURA_PRD_VE,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CD_FORMATO_ACQUISTABILE.ID_FORMATO,
         CD_FORMATO_ACQUISTABILE.DESCRIZIONE);
RETURN v_lista_vendita;
  EXCEPTION
      WHEN NO_DATA_FOUND THEN
      RAISE;
      WHEN OTHERS THEN
      RAISE;
  END ELENCO_PRODOTTI_VENDITA_IS_NEW;






-----------------------------------------------------------------------------------------------------
-- Function ELENCO_PRODOTTI_VEN_SPEC_TAB
--
-- DESCRIZIONE:  Elenca i prodotti di vendita di tipo tabellare per i peridodi speciali. 
--               Consente di individuare prodotti aventi  tariffe a cavallo di 2 listini. 
--               Seleziona il prodotto della tariffa piu vecchia.
--
--
--
-- REALIZZATORE:  Mauro Viel , Altran, Aprile 2011
--
--  
--
-------------------------------------------------------------------------------------------------

FUNCTION ELENCO_PRODOTTI_VEN_SPEC_TAB(p_categoria_prodotto CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO%TYPE, p_id_mod_vendita CD_PRODOTTO_VENDITA.ID_MOD_VENDITA%TYPE, p_stato_vendita CD_PRODOTTO_ACQUISTATO.STATO_DI_VENDITA%TYPE, p_data_inizio CD_LISTINO.DATA_INIZIO%TYPE, p_data_fine CD_LISTINO.DATA_FINE%TYPE, p_id_formato CD_FORMATO_ACQUISTABILE.ID_FORMATO%TYPE, p_tipo_disp VARCHAR2) RETURN C_LISTA_VENDITA_TAB IS
v_lista_vendita C_LISTA_VENDITA_TAB;
v_descr_stato_vendita CD_STATO_DI_VENDITA.DESCR_BREVE%TYPE;
BEGIN
--
   IF p_stato_vendita IS NOT NULL AND p_stato_vendita <> -1 THEN
    SELECT DESCR_BREVE
    INTO v_descr_stato_vendita
    FROM CD_STATO_DI_VENDITA
    WHERE ID_STATO_VENDITA = p_stato_vendita;
   END IF;
--
OPEN v_lista_vendita FOR
select
ID_CIRCUITO,
ID_PRODOTTO_VENDITA,
CIRCUITO,
PRODOTTO_PUBBLICITARIO,
TIPOLOGIA_BREAK,
DURATA_BREAK,
ID_LISTINO,
NUMERO_BREAK,
NUM_SCHERMI,
PA_CD_UTILITY.FU_CALCOLA_IMPORTO(PA_CD_TARIFFA.FU_GET_TARIFFA_RIPARAMETRATA(ID_TARIFFA, p_id_formato),SCONTO_STAGIONALE) AS TARIFFA,
PA_CD_UTILITY.FU_CALCOLA_IMPORTO(PA_CD_TARIFFA.FU_GET_IMPORTO(id_tariffa),SCONTO_STAGIONALE)AS IMPORTO_ORIGINALE,
id_tariffa,
ID_TIPO_TARIFFA,
ID_UNITA,
DESC_UNITA,
SCONTO_STAGIONALE,
ID_TIPO_CINEMA,
disponibilita_minima,
disponibilita_massima,
FLG_SEGUI_IL_FILM
FROM
(
        SELECT  distinct ID_CIRCUITO,
               ID_PRODOTTO_VENDITA,
               CIRCUITO,
               PRODOTTO_PUBBLICITARIO,
               TIPOLOGIA_BREAK,
               DURATA_BREAK,
               --ID_LISTINO,
               min(ID_LISTINO) over (partition by  id_prodotto_vendita) as ID_LISTINO,
               NUMERO_BREAK,
               NUM_SCHERMI,
               --min(PA_CD_UTILITY.FU_CALCOLA_IMPORTO(PA_CD_TARIFFA.FU_GET_TARIFFA_RIPARAMETRATA(ID_TARIFFA, p_id_formato),SCONTO_STAGIONALE))over (partition by  id_circuito) AS TARIFFA,
               --min(PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE)) over (partition by  id_circuito) AS IMPORTO_ORIGINALE,
               min(ID_TARIFFA) over (partition by  id_prodotto_vendita) as id_tariffa,
               ID_TIPO_TARIFFA,
               ID_UNITA,
               DESC_UNITA,
               SCONTO_STAGIONALE,
               ID_TIPO_CINEMA,
               0 as disponibilita_minima,
               0 as disponibilita_massima,
               FLG_SEGUI_IL_FILM
               --SUBSTR(disp,1,INSTR(disp,'|',1,1) -1) as disponibilita_minima,
               --SUBSTR(disp,INSTR(disp,'|',1,1) +1,length(disp)) as disponibilita_massima
        FROM(
        SELECT CD_CIRCUITO.ID_CIRCUITO,
        BRK.ID_PRODOTTO_VENDITA,
        CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
        DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
        CD_TIPO_BREAK.DESC_TIPO_BREAK AS TIPOLOGIA_BREAK,
        CD_TIPO_BREAK.DURATA_SECONDI AS DURATA_BREAK,
        BRK.ID_LISTINO,
        BRK.IMPORTO,
        --PA_CD_ESTRAZIONE_PROD_VENDITA.FU_GET_BREAK_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio,CD_PRODOTTO_VENDITA.ID_TIPO_BREAK, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_BREAK,
        0 AS NUMERO_BREAK,
        FU_GET_NUM_SCHERMI(BRK.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine) AS NUM_SCHERMI,
         BRK.ID_TARIFFA,
         BRK.ID_TIPO_TARIFFA,
         BRK.ID_TIPO_CINEMA,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
         CASE 
         WHEN FLG_STAGIONALE = 'S'
          THEN FU_GET_SCONTO_STAGIONALE(BRK.ID_LISTINO, p_data_inizio, p_data_fine)
         ELSE 0
         END AS SCONTO_STAGIONALE,
         --'0|0' as disp(SELECT fu_affollamento(p_tipo_disp,CD_TARIFFA.ID_PRODOTTO_VENDITA, v_descr_stato_vendita,p_data_inizio, p_data_fine) FROM DUAL) disp
         --fu_calcola_affollamento('BREAK_VENDITA',CD_TARIFFA.ID_PRODOTTO_VENDITA, 'TVE',p_data_inizio, p_data_fine) as disponibilita
         FLG_SEGUI_IL_FILM
        FROM CD_UNITA_MISURA_TEMP,
             CD_MISURA_PRD_VENDITA,
             CD_CIRCUITO,
             --CD_FORMATO_ACQUISTABILE,
             --CD_COEFF_CINEMA,
             CD_LISTINO,
             CD_TIPO_BREAK,
             (SELECT 
             PV.ID_PRODOTTO_VENDITA,
             PV.ID_CIRCUITO, PV.ID_TIPO_BREAK,
             PV.FLG_SEGUI_IL_FILM,
             PUBB.DESC_PRODOTTO,
             TAR.ID_TARIFFA,
             TAR.ID_MISURA_PRD_VE, 
             TAR.ID_FORMATO,
             TAR.ID_LISTINO,
             TAR.ID_TIPO_TARIFFA,
             TAR.ID_TIPO_CINEMA,
             TAR.IMPORTO,
             TAR.FLG_STAGIONALE
             FROM
             CD_TARIFFA TAR,
             CD_PRODOTTO_PUBB PUBB,
             CD_PRODOTTO_VENDITA PV
            WHERE PV.ID_MOD_VENDITA = p_id_mod_vendita
            AND   PV.FLG_ANNULLATO = 'N'
            AND   PUBB.ID_PRODOTTO_PUBB = PV.ID_PRODOTTO_PUBB
            AND   PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
            --AND   (p_categoria_prodotto IS NULL OR CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto)
            AND   TAR.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
            AND   (TAR.ID_TIPO_TARIFFA = 1 OR TAR.ID_FORMATO = p_id_formato)
            AND  ((p_data_inizio between TAR.DATA_INIZIO  and TAR.DATA_FINE ) or (p_data_fine between TAR.DATA_INIZIO  and TAR.DATA_FINE))
            AND EXISTS(SELECT B.ID_BREAK FROM CD_BREAK B, CD_CIRCUITO_BREAK CB, CD_BREAK_VENDITA BV
                       WHERE BV.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
                       AND   BV.DATA_EROGAZIONE = p_data_inizio 
                       AND   BV.FLG_ANNULLATO = 'N'
                       AND   CB.ID_CIRCUITO_BREAK = BV.ID_CIRCUITO_BREAK
                       AND   CB.FLG_ANNULLATO = 'N'
                       AND   B.ID_BREAK = CB.ID_BREAK
                       AND   B.FLG_ANNULLATO = 'N'
                       AND ROWNUM = 1)
            AND EXISTS(SELECT B.ID_BREAK FROM CD_BREAK B, CD_CIRCUITO_BREAK CB, CD_BREAK_VENDITA BV
                       WHERE BV.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
                       AND   BV.DATA_EROGAZIONE = p_data_fine
                       AND   BV.FLG_ANNULLATO = 'N'
                       AND   CB.ID_CIRCUITO_BREAK = BV.ID_CIRCUITO_BREAK
                       AND   CB.FLG_ANNULLATO = 'N'
                       AND   B.ID_BREAK = CB.ID_BREAK
                       AND   B.FLG_ANNULLATO = 'N'
                       AND ROWNUM = 1)                        
             ) BRK
        WHERE CD_CIRCUITO.ID_CIRCUITO = BRK.ID_CIRCUITO
        AND   CD_TIPO_BREAK.ID_TIPO_BREAK = BRK.ID_TIPO_BREAK
        --AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = BRK.ID_FORMATO
        --AND   CD_COEFF_CINEMA.ID_COEFF = CD_FORMATO_ACQUISTABILE.ID_COEFF
        AND   CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE = BRK.ID_MISURA_PRD_VE
        AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
        AND   CD_LISTINO.ID_LISTINO = BRK.ID_LISTINO
        AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1)
        ORDER BY ID_CIRCUITO, TIPOLOGIA_BREAK
);
RETURN v_lista_vendita;
--  EXCEPTION
 --     WHEN NO_DATA_FOUND THEN
 --     RAISE;
 --     WHEN OTHERS THEN
 --     RAISE;
END ELENCO_PRODOTTI_VEN_SPEC_TAB;






-----------------------------------------------------------------------------------------------------
-- Function LISTA_PROD_VEND_SPEC_TAB_RIC
--
-- DESCRIZIONE:  Elenca i prodotti di vendita richiesti di tipo tabellare nel caso di peridodi speciali
--               Consente di individuare prodotti aventi  tariffe a cavallo di 2 listini. 
--               Seleziona il prodotto della tariffa piu vecchia.
--
--
-- REALIZZATORE: Mauro Viel , Altran, Aprile 2011
--
--  MODIFICHE:
--
-------------------------------------------------------------------------------------------------
FUNCTION LISTA_PROD_VEND_SPEC_TAB_RIC(p_categoria_prodotto CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO%TYPE, p_id_mod_vendita CD_PRODOTTO_VENDITA.ID_MOD_VENDITA%TYPE, p_data_inizio CD_LISTINO.DATA_INIZIO%TYPE, p_data_fine CD_LISTINO.DATA_FINE%TYPE, p_id_formato CD_FORMATO_ACQUISTABILE.ID_FORMATO%TYPE) RETURN C_LISTA_VENDITA_TAB IS
v_lista_vendita C_LISTA_VENDITA_TAB;
BEGIN
--
OPEN v_lista_vendita FOR
select 
ID_CIRCUITO,
ID_PRODOTTO_VENDITA,
CIRCUITO,
PRODOTTO_PUBBLICITARIO,
TIPOLOGIA_BREAK,
DURATA_BREAK,
ID_LISTINO,
NUMERO_BREAK,
NUM_SCHERMI,
PA_CD_UTILITY.FU_CALCOLA_IMPORTO(PA_CD_TARIFFA.FU_GET_TARIFFA_RIPARAMETRATA(ID_TARIFFA, p_id_formato),SCONTO_STAGIONALE) AS TARIFFA,
PA_CD_UTILITY.FU_CALCOLA_IMPORTO(PA_CD_TARIFFA.FU_GET_IMPORTO(ID_TARIFFA),SCONTO_STAGIONALE)  AS IMPORTO_ORIGINALE,
id_tariffa,
ID_TIPO_TARIFFA,
ID_UNITA,
DESC_UNITA,
SCONTO_STAGIONALE,
ID_TIPO_CINEMA,
disponibilita_minima,
disponibilita_massima,
FLG_SEGUI_IL_FILM
from
(
        SELECT distinct ID_CIRCUITO,
               ID_PRODOTTO_VENDITA,
               CIRCUITO,
               PRODOTTO_PUBBLICITARIO,
               TIPOLOGIA_BREAK,
               DURATA_BREAK,
               --ID_LISTINO,
                min(ID_LISTINO) over (partition by  id_prodotto_vendita) as ID_LISTINO,
               NUMERO_BREAK,
               NUM_SCHERMI,
               --min(PA_CD_UTILITY.FU_CALCOLA_IMPORTO(PA_CD_TARIFFA.FU_GET_TARIFFA_RIPARAMETRATA(ID_TARIFFA, p_id_formato),SCONTO_STAGIONALE))over (partition by  id_circuito) AS TARIFFA,
               --min(PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE)) over (partition by  id_circuito) AS IMPORTO_ORIGINALE,
               --ID_TARIFFA,
               min(ID_TARIFFA) over (partition by  id_prodotto_vendita) as id_tariffa,
               ID_TIPO_TARIFFA,
               ID_UNITA,
               DESC_UNITA,
               SCONTO_STAGIONALE,
               ID_TIPO_CINEMA,
               0 as disponibilita_minima,
               0 as disponibilita_massima,
               FLG_SEGUI_IL_FILM
        FROM(
        SELECT CD_CIRCUITO.ID_CIRCUITO,
        BRK.ID_PRODOTTO_VENDITA,
        CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
        BRK.DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
        CD_TIPO_BREAK.DESC_TIPO_BREAK AS TIPOLOGIA_BREAK,
        CD_TIPO_BREAK.DURATA_SECONDI AS DURATA_BREAK,
        BRK.ID_LISTINO,
        BRK.IMPORTO,
        --PA_CD_ESTRAZIONE_PROD_VENDITA.FU_GET_BREAK_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,p_data_inizio,CD_PRODOTTO_VENDITA.ID_TIPO_BREAK, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_BREAK,
        0 as NUMERO_BREAK,
        FU_GET_NUM_SCHERMI(BRK.ID_PRODOTTO_VENDITA, p_data_inizio, p_data_fine) AS NUM_SCHERMI,
         PA_CD_TARIFFA.FU_GET_TARIFFA_RIPARAMETRATA(BRK.ID_TARIFFA, p_id_formato) AS TARIFFA,
         BRK.IMPORTO AS IMPORTO_ORIGINALE,
         BRK.ID_TARIFFA,
         BRK.ID_TIPO_TARIFFA,
         BRK.ID_TIPO_CINEMA,
         CD_UNITA_MISURA_TEMP.ID_UNITA,
         CD_UNITA_MISURA_TEMP.DESC_UNITA,
          CASE 
         WHEN FLG_STAGIONALE = 'S'
          THEN FU_GET_SCONTO_STAGIONALE(BRK.ID_LISTINO, p_data_inizio, p_data_fine)
         ELSE 0
         END AS SCONTO_STAGIONALE,
         FLG_SEGUI_IL_FILM
          --(SELECT fu_affollamento(p_tipo_disp,CD_TARIFFA.ID_PRODOTTO_VENDITA, v_descr_stato_vendita,p_data_inizio, p_data_fine) FROM DUAL) disp
         --null as disponibilita
         --fu_calcola_affollamento('BREAK_VENDITA',CD_TARIFFA.ID_PRODOTTO_VENDITA, 'TVE',p_data_inizio, p_data_fine) as disponibilita
        FROM CD_UNITA_MISURA_TEMP,
             CD_MISURA_PRD_VENDITA,
             CD_CIRCUITO,
             --CD_FORMATO_ACQUISTABILE,
             --CD_COEFF_CINEMA,
             CD_LISTINO,
             CD_TIPO_BREAK,
             (SELECT PV.ID_PRODOTTO_VENDITA,
             PV.ID_CIRCUITO, PV.ID_TIPO_BREAK,PV.FLG_SEGUI_IL_FILM,
             CD_PRODOTTO_PUBB.DESC_PRODOTTO,
             CD_TARIFFA.ID_TARIFFA,
             CD_TARIFFA.ID_MISURA_PRD_VE, 
             CD_TARIFFA.ID_FORMATO,
             CD_TARIFFA.ID_LISTINO,
             CD_TARIFFA.ID_TIPO_TARIFFA,
             CD_TARIFFA.ID_TIPO_CINEMA,
             CD_TARIFFA.IMPORTO,
             CD_TARIFFA.FLG_STAGIONALE
             FROM
             CD_TARIFFA,
             CD_PRODOTTO_PUBB,
             CD_PRODOTTO_VENDITA PV
            WHERE   (p_id_mod_vendita is null or PV.ID_MOD_VENDITA = p_id_mod_vendita)
            AND   PV.FLG_ANNULLATO = 'N'
            AND   CD_PRODOTTO_PUBB.ID_PRODOTTO_PUBB = PV.ID_PRODOTTO_PUBB
            AND   (p_categoria_prodotto IS NULL OR CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto)
            AND   CD_TARIFFA.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
            AND   (CD_TARIFFA.ID_TIPO_TARIFFA = 1 OR CD_TARIFFA.ID_FORMATO = p_id_formato)
            --AND   (p_data_inizio IS NULL OR CD_TARIFFA.DATA_INIZIO <= p_data_inizio)
            --AND   (p_data_fine IS NULL OR CD_TARIFFA.DATA_FINE >= p_data_fine)
            AND  ((p_data_inizio between CD_TARIFFA.DATA_INIZIO  and CD_TARIFFA.DATA_FINE ) or (p_data_fine between CD_TARIFFA.DATA_INIZIO  and CD_TARIFFA.DATA_FINE))
            AND   PV.FLG_DEFINITO_A_LISTINO = 'S'
            AND EXISTS(SELECT CD_BREAK.ID_BREAK FROM CD_BREAK, Cd_CIRCUITO_BREAK, CD_BREAK_VENDITA
                       WHERE CD_BREAK_VENDITA.DATA_EROGAZIONE = p_data_inizio
                       AND   CD_BREAK_VENDITA.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
                       AND   CD_BREAK_VENDITA.FLG_ANNULLATO = 'N'
                       AND   CD_CIRCUITO_BREAK.ID_CIRCUITO_BREAK = CD_BREAK_VENDITA.ID_CIRCUITO_BREAK
                       AND   CD_CIRCUITO_BREAK.FLG_ANNULLATO = 'N'
                       AND   CD_BREAK.ID_BREAK = CD_CIRCUITO_BREAK.ID_BREAK
                       AND   CD_BREAK.FLG_ANNULLATO = 'N'
                       AND ROWNUM = 1)
            AND EXISTS(SELECT CD_BREAK.ID_BREAK FROM CD_BREAK, Cd_CIRCUITO_BREAK, CD_BREAK_VENDITA
                       WHERE CD_BREAK_VENDITA.DATA_EROGAZIONE = p_data_fine
                       AND   CD_BREAK_VENDITA.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
                       AND   CD_BREAK_VENDITA.FLG_ANNULLATO = 'N'
                       AND   CD_CIRCUITO_BREAK.ID_CIRCUITO_BREAK = CD_BREAK_VENDITA.ID_CIRCUITO_BREAK
                       AND   CD_CIRCUITO_BREAK.FLG_ANNULLATO = 'N'
                       AND   CD_BREAK.ID_BREAK = CD_CIRCUITO_BREAK.ID_BREAK
                       AND   CD_BREAK.FLG_ANNULLATO = 'N'
                       AND ROWNUM = 1)               
             ) BRK
        WHERE BRK.ID_CIRCUITO = CD_CIRCUITO.ID_CIRCUITO
        AND   BRK.ID_TIPO_BREAK = CD_TIPO_BREAK.ID_TIPO_BREAK
        --AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = BRK.ID_FORMATO
        --AND   CD_COEFF_CINEMA.ID_COEFF = CD_FORMATO_ACQUISTABILE.ID_COEFF
        AND   CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE = BRK.ID_MISURA_PRD_VE
        AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
        AND   CD_LISTINO.ID_LISTINO = BRK.ID_LISTINO
        AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1
        ORDER BY ID_CIRCUITO, TIPOLOGIA_BREAK
        /*GROUP BY CD_CIRCUITO.ID_CIRCUITO,
                 CD_TARIFFA.ID_PRODOTTO_VENDITA,
                 CD_CIRCUITO.NOME_CIRCUITO,
                 CD_PRODOTTO_PUBB.DESC_PRODOTTO,
                 CD_TIPO_BREAK.DESC_TIPO_BREAK,
                 CD_TIPO_BREAK.DURATA_SECONDI,
                 CD_TARIFFA.ID_LISTINO,
                 CD_TARIFFA.IMPORTO,
                 CD_TARIFFA.ID_TARIFFA,
                 CD_TARIFFA.ID_TIPO_TARIFFA,
                 CD_TARIFFA.ID_TIPO_CINEMA,
                 CD_TARIFFA.ID_MISURA_PRD_VE,
                 CD_UNITA_MISURA_TEMP.ID_UNITA,
                 CD_UNITA_MISURA_TEMP.DESC_UNITA,
                 CD_PRODOTTO_VENDITA.ID_TIPO_BREAK*/)
                  p_ven
);
RETURN v_lista_vendita;
--  EXCEPTION
 --     WHEN NO_DATA_FOUND THEN
 --     RAISE;
 --     WHEN OTHERS THEN
 --     RAISE;
  END LISTA_PROD_VEND_SPEC_TAB_RIC;

--Mauro Viel 19/07/2011 crerata la procedura partendo ELENCO_PRODOTTI_VENDITA_TAB ma eliminando 
--      la fu_get_num_schermi
--Mauro Viel 25/07/2011
--Eliminata la chiamata PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI perche sono sicuro di errere 
--nel caso giorni nello specifico
--della settimana perche i periodi speciali sono gestiti dalla ELENCO_PRODOTTI_VEN_SPEC_TAB

FUNCTION ELENCO_PRODOTTI_VENDITA_TABNEW(p_categoria_prodotto CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO%TYPE, p_id_mod_vendita CD_PRODOTTO_VENDITA.ID_MOD_VENDITA%TYPE, p_stato_vendita CD_PRODOTTO_ACQUISTATO.STATO_DI_VENDITA%TYPE, p_data_inizio CD_LISTINO.DATA_INIZIO%TYPE, p_data_fine CD_LISTINO.DATA_FINE%TYPE, p_id_formato CD_FORMATO_ACQUISTABILE.ID_FORMATO%TYPE, p_tipo_disp VARCHAR2) RETURN C_LISTA_VENDITA_TAB IS
v_lista_vendita C_LISTA_VENDITA_TAB;
v_descr_stato_vendita CD_STATO_DI_VENDITA.DESCR_BREVE%TYPE;
BEGIN
--
   IF p_stato_vendita IS NOT NULL AND p_stato_vendita <> -1 THEN
    SELECT DESCR_BREVE
    INTO v_descr_stato_vendita
    FROM CD_STATO_DI_VENDITA
    WHERE ID_STATO_VENDITA = p_stato_vendita;
   END IF;
--
OPEN v_lista_vendita FOR
SELECT ID_CIRCUITO,
       ID_PRODOTTO_VENDITA,
       CIRCUITO,
       PRODOTTO_PUBBLICITARIO,
       TIPOLOGIA_BREAK,
       DURATA_BREAK,
       ID_LISTINO,
       NUMERO_BREAK,
       NUM_SCHERMI,
       PA_CD_UTILITY.FU_CALCOLA_IMPORTO(PA_CD_TARIFFA.FU_GET_TARIFFA_RIPARAMETRATA(ID_TARIFFA, p_id_formato),SCONTO_STAGIONALE) AS TARIFFA,
       PA_CD_UTILITY.FU_CALCOLA_IMPORTO(IMPORTO,SCONTO_STAGIONALE) AS IMPORTO_ORIGINALE,
       ID_TARIFFA,
       ID_TIPO_TARIFFA,
       ID_UNITA,
       DESC_UNITA,
       SCONTO_STAGIONALE,
       ID_TIPO_CINEMA,
       0 as disponibilita_minima,
       0 as disponibilita_massima,
       FLG_SEGUI_IL_FILM
       --SUBSTR(disp,1,INSTR(disp,'|',1,1) -1) as disponibilita_minima,
       --SUBSTR(disp,INSTR(disp,'|',1,1) +1,length(disp)) as disponibilita_massima
FROM(
SELECT CD_CIRCUITO.ID_CIRCUITO,
BRK.ID_PRODOTTO_VENDITA,
CD_CIRCUITO.NOME_CIRCUITO AS CIRCUITO,
DESC_PRODOTTO AS PRODOTTO_PUBBLICITARIO,
CD_TIPO_BREAK.DESC_TIPO_BREAK AS TIPOLOGIA_BREAK,
CD_TIPO_BREAK.DURATA_SECONDI AS DURATA_BREAK,
BRK.ID_LISTINO,
BRK.IMPORTO,
--PA_CD_ESTRAZIONE_PROD_VENDITA.FU_GET_BREAK_DISPONIBILI(CD_CIRCUITO.ID_CIRCUITO,CD_UNITA_MISURA_TEMP.ID_UNITA,:p_data_inizio,CD_PRODOTTO_VENDITA.ID_TIPO_BREAK, CD_TARIFFA.ID_PRODOTTO_VENDITA) AS NUMERO_BREAK,
 0 AS NUMERO_BREAK,
 SCHERMI_PRODOTTO.NUM_SCHERMI,--PA_CD_ESTRAZIONE_PROD_VENDITA.FU_GET_NUM_SCHERMI(BRK.ID_PRODOTTO_VENDITA, :p_data_inizio, :p_data_fine) AS NUM_SCHERMI,
 BRK.ID_TARIFFA,
 BRK.ID_TIPO_TARIFFA,
 BRK.ID_TIPO_CINEMA,
 CD_UNITA_MISURA_TEMP.ID_UNITA,
 CD_UNITA_MISURA_TEMP.DESC_UNITA,
 CASE 
 WHEN FLG_STAGIONALE = 'S'
  THEN FU_GET_SCONTO_STAGIONALE(BRK.ID_LISTINO, p_data_inizio, p_data_fine)
 ELSE 0
 END AS SCONTO_STAGIONALE,
 --'0|0' as disp(SELECT fu_affollamento(:p_tipo_disp,CD_TARIFFA.ID_PRODOTTO_VENDITA, v_descr_stato_vendita,:p_data_inizio, :p_data_fine) FROM DUAL) disp
 --fu_calcola_affollamento('BREAK_VENDITA',CD_TARIFFA.ID_PRODOTTO_VENDITA, 'TVE',:p_data_inizio, :p_data_fine) as disponibilita
 FLG_SEGUI_IL_FILM
FROM CD_UNITA_MISURA_TEMP,
     CD_MISURA_PRD_VENDITA,
     CD_CIRCUITO,
     --CD_FORMATO_ACQUISTABILE,
     --CD_COEFF_CINEMA,
     CD_LISTINO,
     CD_TIPO_BREAK,
     (
         SELECT PV.ID_PRODOTTO_VENDITA,
         PV.ID_CIRCUITO, PV.ID_TIPO_BREAK,PV.FLG_SEGUI_IL_FILM,
         PUBB.DESC_PRODOTTO,
         TAR.ID_TARIFFA,
         TAR.ID_MISURA_PRD_VE, 
         TAR.ID_FORMATO,
         TAR.ID_LISTINO,
         TAR.ID_TIPO_TARIFFA,
         TAR.ID_TIPO_CINEMA,
         TAR.IMPORTO,
         TAR.FLG_STAGIONALE
         FROM
         CD_TARIFFA TAR,
         CD_PRODOTTO_PUBB PUBB,
         CD_PRODOTTO_VENDITA PV
        WHERE PV.ID_MOD_VENDITA = p_id_mod_vendita
        AND   PV.FLG_ANNULLATO = 'N'
        AND   PUBB.ID_PRODOTTO_PUBB = PV.ID_PRODOTTO_PUBB
        AND   PUBB.COD_CATEGORIA_PRODOTTO=p_categoria_prodotto
        --AND   (:p_categoria_prodotto IS NULL OR CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO=:p_categoria_prodotto)
        AND   TAR.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
        AND   (TAR.ID_TIPO_TARIFFA = 1 OR TAR.ID_FORMATO = p_id_formato)
        AND   (TAR.DATA_INIZIO <= p_data_inizio) --or TAR.DATA_INIZIO >= :p_data_inizio)
        AND   TAR.DATA_FINE >= p_data_fine
        AND EXISTS(SELECT B.ID_BREAK FROM CD_BREAK B, CD_CIRCUITO_BREAK CB, CD_BREAK_VENDITA BV
                   WHERE BV.ID_PRODOTTO_VENDITA = PV.ID_PRODOTTO_VENDITA
                   AND   BV.DATA_EROGAZIONE BETWEEN p_data_inizio AND p_data_fine
                   AND   BV.FLG_ANNULLATO = 'N'
                   AND   CB.ID_CIRCUITO_BREAK = BV.ID_CIRCUITO_BREAK
                   AND   CB.FLG_ANNULLATO = 'N'
                   AND   B.ID_BREAK = CB.ID_BREAK
                   AND   B.FLG_ANNULLATO = 'N'
                   AND ROWNUM = 1)
     ) BRK,
     (
        SELECT distinct  COUNT(distinct SC.ID_SCHERMO) over (partition by BRK_V.ID_PRODOTTO_VENDITA) num_schermi, BRK_V.ID_PRODOTTO_VENDITA
        FROM  CD_PRODOTTO_VENDITA P_VEN, 
              CD_CINEMA CIN, 
              CD_SALA S, 
              CD_SCHERMO SC, 
              CD_PROIEZIONE PR, 
              CD_BREAK BRK, 
              CD_CIRCUITO_BREAK C_BRK, 
              CD_BREAK_VENDITA BRK_V
        WHERE BRK_V.FLG_ANNULLATO = 'N'
        AND BRK_V.DATA_EROGAZIONE BETWEEN p_data_inizio AND p_data_fine
        AND P_VEN.ID_PRODOTTO_VENDITA = BRK_V.ID_PRODOTTO_VENDITA
        AND c_brk.ID_CIRCUITO_BREAK = BRK_V.ID_CIRCUITO_BREAK
        AND c_brk.FLG_ANNULLATO='N'
        AND brk.ID_BREAK = c_brk.ID_BREAK
        AND BRK.FLG_ANNULLATO = 'N'
        and brk.FLG_ANNULLATO = 'N'
        AND PR.ID_PROIEZIONE = BRK.ID_PROIEZIONE
        AND PR.FLG_ANNULLATO = 'N'
        AND PR.ID_FASCIA=1
        and sc.id_schermo = pr.ID_SCHERMO
        and sc.FLG_ANNULLATO = 'N'
        AND S.ID_SALA = SC.ID_SALA
        AND S.FLG_ANNULLATO = 'N'
        AND S.FLG_VISIBILE = 'S'
        AND CIN.ID_CINEMA = S.ID_CINEMA
        AND CIN.FLG_ANNULLATO = 'N'
        AND (P_VEN.ID_TARGET IS NULL OR CIN.FLG_VIRTUALE = 'S')
        AND (P_VEN.FLG_SEGUI_IL_FILM ='N' OR CIN.FLG_VIRTUALE = 'S')
     )SCHERMI_PRODOTTO
WHERE SCHERMI_PRODOTTO.ID_PRODOTTO_VENDITA = BRK.ID_PRODOTTO_VENDITA
AND   CD_CIRCUITO.ID_CIRCUITO = BRK.ID_CIRCUITO
AND   CD_TIPO_BREAK.ID_TIPO_BREAK = BRK.ID_TIPO_BREAK
--AND   CD_FORMATO_ACQUISTABILE.ID_FORMATO = BRK.ID_FORMATO
--AND   CD_COEFF_CINEMA.ID_COEFF = CD_FORMATO_ACQUISTABILE.ID_COEFF
AND   CD_MISURA_PRD_VENDITA.ID_MISURA_PRD_VE = BRK.ID_MISURA_PRD_VE
AND   CD_UNITA_MISURA_TEMP.ID_UNITA = CD_MISURA_PRD_VENDITA.ID_UNITA
AND   CD_LISTINO.ID_LISTINO = BRK.ID_LISTINO
--AND   PA_CD_TARIFFA.FU_GET_GIORNI_TRASCORSI(p_data_inizio,CD_UNITA_MISURA_TEMP.ID_UNITA) = p_data_fine - p_data_inizio +1)
AND  p_data_fine-p_data_inizio + 1 = CD_UNITA_MISURA_TEMP.numero_di_giorni)
ORDER BY ID_CIRCUITO, TIPOLOGIA_BREAK;
RETURN v_lista_vendita;
--  EXCEPTION
 --     WHEN NO_DATA_FOUND THEN
 --     RAISE;
 --     WHEN OTHERS THEN
 --     RAISE;
  END ELENCO_PRODOTTI_VENDITA_TABNEW;
  
  
-- Mauro Viel 28/07/2011 creata la procedura partendo ELENCO_PRODOTTI_VENDITA_TAB utilizzando delle from view 
 
FUNCTION ELENCO_PRODOTTI_VENDITA_TABNE2(p_categoria_prodotto CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO%TYPE, p_id_mod_vendita CD_PRODOTTO_VENDITA.ID_MOD_VENDITA%TYPE, p_stato_vendita CD_PRODOTTO_ACQUISTATO.STATO_DI_VENDITA%TYPE, p_data_inizio CD_LISTINO.DATA_INIZIO%TYPE, p_data_fine CD_LISTINO.DATA_FINE%TYPE, p_id_formato CD_FORMATO_ACQUISTABILE.ID_FORMATO%TYPE, p_tipo_disp VARCHAR2) RETURN C_LISTA_VENDITA_TAB IS
v_lista_vendita C_LISTA_VENDITA_TAB;
v_descr_stato_vendita CD_STATO_DI_VENDITA.DESCR_BREVE%TYPE;
BEGIN

OPEN v_lista_vendita FOR 
       select id_circuito,
              id_prodotto_vendita,
              nome_circuito as circuito,
              desc_prodotto as prodotto_pubblicitario,
              tipologia_break,
              durata_break,
              id_listino,
              0 as numero_break,
              num_schermi,
              pa_cd_utility.fu_calcola_importo(pa_cd_tariffa.fu_get_tariffa_riparametrata(id_tariffa, p_id_formato),sconto_stagionale) as tariffa,
              pa_cd_utility.fu_calcola_importo(importo,sconto_stagionale) as importo_originale,
              id_tariffa,
              id_tipo_tariffa,
              id_unita, 
              desc_unita,
              sconto_stagionale, 
              id_tipo_cinema,
              0 as disponibilita_minima,
              0 as disponibilita_massima,
              flg_segui_il_film
       from
       (     
              select distinct num_schermi,
              id_prodotto_vendita,
              flg_segui_il_film, 
              id_tariffa,
              id_misura_prd_ve, 
              id_formato,
              id_listino,
              id_tipo_tariffa,
              id_tipo_cinema,
              importo,
              flg_stagionale,
              nome_circuito,
              id_circuito,
              desc_prodotto,
              desc_unita,
              id_unita,
              tipologia_break,
              durata_break,
              case 
                when flg_stagionale = 'S' then fu_get_sconto_stagionale(id_listino, p_data_inizio, p_data_fine)
                else 0
              end as sconto_stagionale
              from
              (
                  select   count(distinct schermo_proiezione.id_schermo) over (partition by prodotto_break.id_prodotto_vendita) num_schermi,
                  prodotto_break.id_prodotto_vendita,
                  prodotto_break.tipologia_break,
                  prodotto_break.durata_break,
                  prodotto_break.flg_segui_il_film, 
                  tariffa_prodotto_pubb.id_tariffa,
                  tariffa_prodotto_pubb.id_misura_prd_ve, 
                  tariffa_prodotto_pubb.id_formato,
                  tariffa_prodotto_pubb.id_listino,
                  tariffa_prodotto_pubb.id_tipo_tariffa,
                  tariffa_prodotto_pubb.id_tipo_cinema,
                  tariffa_prodotto_pubb.importo,
                  tariffa_prodotto_pubb.flg_stagionale,
                  tariffa_prodotto_pubb.desc_prodotto,
                  tariffa_prodotto_pubb.desc_unita,
                  tariffa_prodotto_pubb.id_unita,
                  break_circuito_break.nome_circuito,
                  break_circuito_break.id_circuito
           from
            (
                select bv.id_prodotto_vendita,
                       bv.id_circuito_break,
                       pv.id_target,
                       pv.flg_segui_il_film,
                       pv.id_prodotto_pubb,
                       pv.id_mod_vendita,
                       tb.desc_tipo_break as tipologia_break,
                       tb.durata_secondi as durata_break
                from   cd_prodotto_vendita pv, 
                       cd_break_vendita bv,
                       cd_tipo_break tb
                where  pv.id_prodotto_vendita = bv.id_prodotto_vendita
                and    bv.flg_annullato ='N'
                and    pv.flg_annullato ='N'
                and    bv.data_erogazione between p_data_inizio and p_data_fine
                and    tb.id_tipo_break = pv.id_tipo_break
            ) prodotto_break,
            (
               select
               pubb.id_prodotto_pubb,
               tar.id_prodotto_vendita, 
               tar.id_tariffa,
               tar.id_misura_prd_ve, 
               tar.id_formato,
               tar.id_listino,
               tar.id_tipo_tariffa,
               tar.id_tipo_cinema,
               tar.importo,
               tar.flg_stagionale,
               pubb.desc_prodotto,
               umt.desc_unita,
               umt.id_unita
               from                   
               cd_tariffa tar,
               cd_prodotto_pubb pubb,
               cd_misura_prd_vendita mp,
               cd_unita_misura_temp umt
               where (tar.id_tipo_tariffa = 1 or tar.id_formato = p_id_formato)
               and   (tar.data_inizio <= p_data_inizio) 
               and    tar.data_fine >= p_data_fine
               and   pubb.cod_categoria_prodotto=p_categoria_prodotto
               and   mp.id_misura_prd_ve = tar.id_misura_prd_ve
               and   umt.id_unita = mp.id_unita
               and   p_data_fine-p_data_inizio + 1 = umt.numero_di_giorni    
            ) tariffa_prodotto_pubb,
            (
                select br.id_proiezione,
                       cb.id_circuito_break,
                       cb.id_circuito,
                       cb.id_listino,
                       cir.nome_circuito
                from   cd_break br, 
                       cd_circuito_break cb,
                       cd_circuito cir
                where br.FLG_ANNULLATO ='N' 
                and   cb.flg_annullato = 'N'
                and   cb.id_break = br.ID_BREAK
                and   br.FLG_ANNULLATO ='N'
                and   cb.id_circuito = cir.id_circuito
                and   cir.flg_annullato = 'N'
            ) break_circuito_break,
            (
                select  pr.id_proiezione,sc.id_sala,sc.id_schermo
                from 
                cd_schermo sc, 
                cd_proiezione pr
                where sc.flg_annullato='N'
                and   sc.id_schermo =pr.id_schermo
                and   pr.flg_annullato ='N'
                and   pr.data_proiezione between p_data_inizio and p_data_fine
                and   pr.id_fascia =1
            )schermo_proiezione,
            (
                select sa.id_sala,ci.flg_virtuale 
                from   cd_cinema ci, 
                       cd_sala sa
                where  sa.id_cinema = ci.id_cinema
                and sa.flg_annullato = 'N'
                and sa.flg_visibile = 'S'
                and ci.flg_annullato = 'N'
            )sala_cinema
            where  prodotto_break.id_circuito_break =break_circuito_break.id_circuito_break 
            and    tariffa_prodotto_pubb.id_prodotto_vendita = prodotto_break.id_prodotto_vendita
            and    tariffa_prodotto_pubb.id_prodotto_pubb = prodotto_break.id_prodotto_pubb
            and    tariffa_prodotto_pubb.id_listino = tariffa_prodotto_pubb.id_listino
            and    prodotto_break.id_mod_vendita = p_id_mod_vendita
            and    schermo_proiezione.id_proiezione =  break_circuito_break.id_proiezione
            and    sala_cinema.id_sala = schermo_proiezione.id_sala
            and    (prodotto_break.id_target is null or sala_cinema.flg_virtuale = 'S')
            and    (prodotto_break.flg_segui_il_film ='N' or sala_cinema.flg_virtuale = 'S')
        )
    )
    order by id_circuito, tipologia_break;

RETURN v_lista_vendita;
END ELENCO_PRODOTTI_VENDITA_TABNE2;









FUNCTION FU_BASE_PRODOTTI_VENDITA_TAB(p_categoria_prodotto CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO%TYPE, p_id_mod_vendita CD_PRODOTTO_VENDITA.ID_MOD_VENDITA%TYPE, p_stato_vendita CD_PRODOTTO_ACQUISTATO.STATO_DI_VENDITA%TYPE, p_data_inizio CD_LISTINO.DATA_INIZIO%TYPE, p_data_fine CD_LISTINO.DATA_FINE%TYPE, p_id_formato CD_FORMATO_ACQUISTABILE.ID_FORMATO%TYPE, p_tipo_disp VARCHAR2,p_definito_a_listino VARCHAR2 default null) RETURN C_LISTA_VENDITA_TAB IS
v_lista_vendita C_LISTA_VENDITA_TAB;
v_descr_stato_vendita CD_STATO_DI_VENDITA.DESCR_BREVE%TYPE;
BEGIN

OPEN v_lista_vendita FOR
   select
   id_circuito,
   id_prodotto_vendita,
   nome_circuito as circuito,
   desc_prodotto as prodotto_pubblicitario,
   tipologia_break,
   durata_break,
   id_listino,
   0 as numero_break,
   num_schermi,
   pa_cd_utility.fu_calcola_importo(pa_cd_tariffa.fu_get_tariffa_riparametrata(id_tariffa, p_id_formato),sconto_stagionale) as tariffa,
   pa_cd_utility.fu_calcola_importo(importo,sconto_stagionale) as importo_originale,
   id_tariffa,
   id_tipo_tariffa,
   id_unita,
   desc_unita,
   sconto_stagionale,
   id_tipo_cinema,
   0 as disponibilita_minima,
   0 as disponibilita_massima,
   flg_segui_il_film
   from
   (
      select count(distinct id_sala)  num_schermi,
      id_prodotto_vendita,
      flg_segui_il_film,
      id_tariffa,
      id_misura_prd_ve,
      id_formato,
      id_listino,
      id_tipo_tariffa,
      id_tipo_cinema,
      importo,
      flg_stagionale,
      nome_circuito,
      id_circuito,
      desc_prodotto,
      desc_unita,
      id_unita,
      tipologia_break,
      durata_break,
      case
        when flg_stagionale = 'S' then fu_get_sconto_stagionale(id_listino, p_data_inizio, p_data_fine)
        else 0
      end as sconto_stagionale
      from
      (
           select
                  prodotto_break.id_prodotto_vendita,
                  prodotto_break.tipologia_break,
                  prodotto_break.durata_break,
                  prodotto_break.flg_segui_il_film,
                  prodotto_break.id_sala,
                  tariffa_prodotto_pubb.id_tariffa,
                  tariffa_prodotto_pubb.id_misura_prd_ve,
                  tariffa_prodotto_pubb.id_formato,
                  tariffa_prodotto_pubb.id_listino,
                  tariffa_prodotto_pubb.id_tipo_tariffa,
                  tariffa_prodotto_pubb.id_tipo_cinema,
                  tariffa_prodotto_pubb.importo,
                  tariffa_prodotto_pubb.flg_stagionale,
                  tariffa_prodotto_pubb.desc_prodotto,
                  tariffa_prodotto_pubb.desc_unita,
                  tariffa_prodotto_pubb.id_unita,
                  prodotto_break.nome_circuito,
                  prodotto_break.id_circuito
           from
           (
                select pv.id_prodotto_vendita,
                       cir.id_circuito,
                       cir.nome_circuito,
                       bv.id_sala,
                       pv.id_target,
                       pv.flg_segui_il_film,
                       pv.id_prodotto_pubb,
                       pv.id_mod_vendita,
                       tb.desc_tipo_break as tipologia_break,
                       tb.durata_secondi as durata_break
                from   cd_prodotto_vendita pv,
                       cd_break_vendita bv,
                       cd_tipo_break tb,
                       cd_circuito cir
                where  pv.id_prodotto_vendita = bv.id_prodotto_vendita
                and    pv.flg_definito_a_listino = decode(p_definito_a_listino,'S','S',pv.flg_definito_a_listino)
                and    bv.flg_annullato ='N'
                and    pv.flg_annullato ='N'
                and    bv.data_erogazione between p_data_inizio and p_data_fine
                and    tb.id_tipo_break = pv.id_tipo_break
                and    pv.id_circuito = cir.id_circuito
            ) prodotto_break,
            (
               select
               pubb.id_prodotto_pubb,
               tar.id_prodotto_vendita,
               tar.id_tariffa,
               tar.id_misura_prd_ve,
               tar.id_formato,
               tar.id_listino,
               tar.id_tipo_tariffa,
               tar.id_tipo_cinema,
               tar.importo,
               tar.flg_stagionale,
               pubb.desc_prodotto,
               umt.desc_unita,
               umt.id_unita
               from
               cd_tariffa tar,
               cd_prodotto_pubb pubb,
               cd_misura_prd_vendita mp,
               cd_unita_misura_temp umt
               where (tar.id_tipo_tariffa = 1 or tar.id_formato = p_id_formato)
               and   (tar.data_inizio <= p_data_inizio)
               and    tar.data_fine >= p_data_fine
               and   pubb.cod_categoria_prodotto=p_categoria_prodotto
               and   mp.id_misura_prd_ve = tar.id_misura_prd_ve
               and   umt.id_unita = mp.id_unita
               and   p_data_fine-p_data_inizio + 1 = umt.numero_di_giorni
            ) tariffa_prodotto_pubb,
            (
                select sa.id_sala,ci.flg_virtuale
                from   cd_cinema ci,
                       cd_sala sa
                where  sa.id_cinema = ci.id_cinema
                and sa.flg_annullato = 'N'
                and sa.flg_visibile  = 'S'
                and ci.flg_annullato = 'N'
            )sala_cinema
            where  tariffa_prodotto_pubb.id_prodotto_vendita = prodotto_break.id_prodotto_vendita
            and    tariffa_prodotto_pubb.id_prodotto_pubb = prodotto_break.id_prodotto_pubb
            and    tariffa_prodotto_pubb.id_listino = tariffa_prodotto_pubb.id_listino
            and    prodotto_break.id_mod_vendita = p_id_mod_vendita
            and    sala_cinema.id_sala = prodotto_break.id_sala
            and    (prodotto_break.id_target is null or sala_cinema.flg_virtuale = 'S')
            and    (prodotto_break.flg_segui_il_film ='N' or sala_cinema.flg_virtuale = 'S')
       )
       group by id_prodotto_vendita,
                flg_segui_il_film,
                id_tariffa,
                id_misura_prd_ve,
                id_formato,
                id_listino,
                id_tipo_tariffa,
                id_tipo_cinema,
                importo,
                flg_stagionale,
                nome_circuito,
                id_circuito,
                desc_prodotto,
                desc_unita,
                id_unita,
                tipologia_break,
                durata_break
    )
    order by id_circuito, tipologia_break;
RETURN v_lista_vendita;
END FU_BASE_PRODOTTI_VENDITA_TAB;



--Queste due funzioni verranno rinominate senza il suffisso DE
--Mauro Viel 01/09/2011 inserita la denormalizzazione id_sala sulla tavola cd_break_vendita 
 
FUNCTION ELENCO_PRODOTTI_VENDITA_TAB_DE(p_categoria_prodotto CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO%TYPE, p_id_mod_vendita CD_PRODOTTO_VENDITA.ID_MOD_VENDITA%TYPE, p_stato_vendita CD_PRODOTTO_ACQUISTATO.STATO_DI_VENDITA%TYPE, p_data_inizio CD_LISTINO.DATA_INIZIO%TYPE, p_data_fine CD_LISTINO.DATA_FINE%TYPE, p_id_formato CD_FORMATO_ACQUISTABILE.ID_FORMATO%TYPE, p_tipo_disp VARCHAR2) RETURN C_LISTA_VENDITA_TAB IS
BEGIN
return FU_BASE_PRODOTTI_VENDITA_TAB(p_categoria_prodotto, p_id_mod_vendita , p_stato_vendita, p_data_inizio, p_data_fine, p_id_formato, p_tipo_disp);
END ELENCO_PRODOTTI_VENDITA_TAB_DE;


FUNCTION ELENCO_PROD_VENDITA_TAB_RIC_DE(p_categoria_prodotto CD_PRODOTTO_PUBB.COD_CATEGORIA_PRODOTTO%TYPE, p_id_mod_vendita CD_PRODOTTO_VENDITA.ID_MOD_VENDITA%TYPE, p_data_inizio CD_LISTINO.DATA_INIZIO%TYPE, p_data_fine CD_LISTINO.DATA_FINE%TYPE, p_id_formato CD_FORMATO_ACQUISTABILE.ID_FORMATO%TYPE) RETURN C_LISTA_VENDITA_TAB IS
BEGIN
return FU_BASE_PRODOTTI_VENDITA_TAB(p_categoria_prodotto, p_id_mod_vendita , null, p_data_inizio, p_data_fine, p_id_formato, null,'S');
END ELENCO_PROD_VENDITA_TAB_RIC_DE;

END PA_CD_ESTRAZIONE_PROD_VENDITA; 
/

